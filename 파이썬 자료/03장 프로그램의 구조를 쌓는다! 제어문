{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"03장 프로그램의 구조를 쌓는다! 제어문","provenance":[{"file_id":"1dY4GslkNtFQbdFwinAwsozLdMn2hvJEx","timestamp":1601950423305},{"file_id":"1dzx-YMhkF6WJqfES5_PhijNyChOoarU6","timestamp":1601950282627},{"file_id":"1ONHdUATE6J5_XSyCo22k97WSnqsaa3Fm","timestamp":1601949560219}],"collapsed_sections":[],"toc_visible":true,"authorship_tag":"ABX9TyMsAHdnqY4fQyvslxsApLyb"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"BQLILtZfWhru"},"source":[">>> a = 123\n",">>> a = -178\n",">>> a = 0"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"KW_m2oBeWsZc"},"source":["**실수형**\n","\n","파이썬에서 실수형(Floating-point)은 소수점이 포함된 숫자를 말한다. 다음은 실수를 변수 a에 대입하는 예이다."]},{"cell_type":"code","metadata":{"id":"SZxyCJHiWyNu"},"source":[">>> a = 1.2\n",">>> a = -3.45"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"_yOTpfeIW0K3"},"source":["위 방식은 우리가 일반적으로 볼 수 있는 실수형의 소수점 표현 방식이다."]},{"cell_type":"code","metadata":{"id":"ZntbZf86W5Pl"},"source":[">>> a = 4.24E10\n",">>> a = 4.24e-10"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ndc5C6KtW7Mp"},"source":["위 방식은 \"컴퓨터식 지수 표현 방식\"으로 파이썬에서는 4.24e10 또는 4.24E10처럼 표현한다(e와 E 둘 중 어느 것을 사용해도 무방하다). 여기서 4.24E10은 4.24∗1010, 4.24e-10은 4.24∗10−10을 의미한다."]},{"cell_type":"markdown","metadata":{"id":"86eCYuZeXJeM"},"source":["**8진수(Octal)와 16진수**\n","**8진수(Octal)**\n","숫자가 0o 또는 0O(숫자 0 + 알파벳 소문자 o 또는 대문자 O)로 시작하면 된다."]},{"cell_type":"code","metadata":{"id":"lo1nSXOlXLs3"},"source":[">>> a = 0o177"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"xxjW_jPAXV3m"},"source":["**16진수(Hexadecimal)**\n","0x로 시작하면 된다.\n"]},{"cell_type":"code","metadata":{"id":"iCcIQqGNXYxF"},"source":[">>> a = 0x8ff\n",">>> a = 0xABC"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"hWEAtvdBXqre"},"source":["8진수나 16진수는 파이썬에서 잘 사용하지 않는 형태의 숫자 자료형"]},{"cell_type":"markdown","metadata":{"id":"htXYQ_9gXuPg"},"source":["**숫자형을 활용하기 위한 연산자**"]},{"cell_type":"markdown","metadata":{"id":"0qSwmkp8X719"},"source":["**사칙연산**\n","프로그래밍을 한 번도 해본 적이 없는 독자라도 사칙연산(+, -, *, /)은 알고 있을 것이다. 파이썬 역시 계산기와 마찬가지로 다음처럼 연산자를 사용해 사칙연산을 수행한다."]},{"cell_type":"code","metadata":{"id":"fpXZs87qYAsQ"},"source":[">>> a = 3\n",">>> b = 4\n",">>> a + b\n","7\n",">>> a * b\n","12\n",">>> a / b\n","0.75"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"9jw0hgYZYELP"},"source":["x의 y제곱을 나타내는 ** 연산자\n","\n","다음으로 알아야 할 연산자로 라는 연산자가 있다. 이 연산자는 x  y처럼 사용했을 때 x의 y제곱(xy) 값을 돌려준다. 다음의 예를 통해 알아보자."]},{"cell_type":"code","metadata":{"id":"qNfVAvvQYNdm"},"source":[">>> a = 3\n",">>> b = 4\n",">>> a ** b\n","81"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"C0cpqgFMYPTx"},"source":["**나눗셈 후 나머지를 반환하는 % 연산자**\n","\n","프로그래밍을 처음 접하는 독자라면 % 연산자는 본 적이 없을 것이다. %는 나눗셈의 나머지 값을 돌려주는 연산자이다. 7을 3으로 나누면 나머지는 1이 될 것이고 3을 7로 나누면 나머지는 3이 될 것이다. 다음 예로 확인해 보자."]},{"cell_type":"code","metadata":{"id":"WHS9UhZdYREu"},"source":[">>> 7 % 3\n","1\n",">>> 3 % 7\n","3"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ZvhkLAqnYVWe"},"source":["**나눗셈 후 몫을 반환하는 // 연산자**\n","/ 연산자를 사용하여 7 나누기 4를 하면 그 결과는 예상대로 1.75가 된다."]},{"cell_type":"code","metadata":{"id":"ciOpDXXfYYiz"},"source":[">>> 7 / 4\n","1.75"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"G1DLkflXYanJ"},"source":["이번에는 나눗셈 후 몫을 반환하는 // 연산자를 사용한 경우를 보자."]},{"cell_type":"code","metadata":{"id":"fKz4LrJhYb9D"},"source":[">>> 7 // 4\n","1"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"v36aRE5kYdOz"},"source":["1.75에서 몫에 해당되는 정수값 1만 돌려주는 것을 확인할 수 있다."]},{"cell_type":"code","metadata":{"id":"giFWhy4al98k"},"source":["\"Life is too short you need Python\"\n","\"a\"\n","\"123\""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Wwp5321um-w8"},"source":["모두 큰따옴표(\" \")로 둘러싸여 있다.\"123은 숫자인데 왜 문자열이지?\"\n","따옴표로 둘러싸여 있으면 모두 문자열이라고 보면 된다."]},{"cell_type":"markdown","metadata":{"id":"LiKFu8MmqtaT"},"source":["**문자열은 어떻게 만들고 사용할까?**\n","파이썬에서 문자열을 만드는 방법은 총 4가지이다."]},{"cell_type":"markdown","metadata":{"id":"sJUx6iCurDzy"},"source":["**1. 큰따옴표(\")로 양쪽 둘러싸기**"]},{"cell_type":"code","metadata":{"id":"TFsOwnUxq_By"},"source":["\"Hello World\""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"4ZSXT8cErKXF"},"source":["**2. 작은따옴표(')로 양쪽 둘러싸기**"]},{"cell_type":"code","metadata":{"id":"y6LPmydLrMwp"},"source":["'Python is fun'"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"23CXhamMrTTy"},"source":["**3. 큰따옴표 3개를 연속(\"\"\")으로 써서 양쪽 둘러싸기**"]},{"cell_type":"code","metadata":{"id":"APi-YtBErX0t"},"source":["\"\"\"Life is too short, you need Python\"\"\""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Y_HKnfmNrrrt"},"source":["**4. 작은따옴표 3개를 연속(''')으로 써서 양쪽 둘러싸기**"]},{"cell_type":"code","metadata":{"id":"xaJN47MYruYF"},"source":["'''Life is too short, you need Pyton'''"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"UA_2ukAEr5vY"},"source":["단순함이 자랑인 파이썬이 문자열을 만드는 방법은 왜 4가지나 가지게 되었을까?\n","\n","**문자열 안에 작은따옴표나 큰따옴표를 포함시키고 싶을 때**\n","문자열을 만들어 주는 주인공은 작은따옴표(')와 큰따옴표(\")이다. 그런데 문자열 안에도 작은따옴표와 큰따옴표가 들어 있어야 할 경우가 있다. 이때는 좀 더 특별한 기술이 필요하다.\n","\n","**1. 문자열에 작은따옴표 (') 포함시키기**\n"]},{"cell_type":"code","metadata":{"id":"LyNvi84GsSFn"},"source":["Python's favorite food is perl"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"jd4L17j-so4n"},"source":["위와 같은 문자열을 food 변수에 저장하고 싶다고 가정하자. 문자열 중 Python's에 작은따옴표(')가 포함되어 있다.\n","\n","이럴 때는 다음과 같이 문자열을 큰따옴표(\")로 둘러싸야 한다. 큰따옴표 안에 들어 있는 작은따옴표는 문자열을 나타내기 위한 기호로 인식되지 않는다."]},{"cell_type":"code","metadata":{"id":"la4laaC4suP-"},"source":[">>>food = \"Pythons's favorite food is perl \""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Sn7C7Y9st4YM"},"source":["프롬프트에 food를 입력해서 결과를 확인하자. 변수에 저장된 문자열이 그대로 출력되는 것을 볼 수 있다."]},{"cell_type":"code","metadata":{"id":"QGaVafAVt5L3"},"source":[">>>food\n","\"Pythons's favorite food is perl \""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Vmw1lpO-t9-4"},"source":["시험 삼아 다음과 같이 큰따옴표(\")가 아닌 작은따옴표(')로 문자열을 둘러싼 후 다시 실행해 보자. 'Python'이 문자열로 인식되어 구문 오류(SyntaxError)가 발생할 것이다."]},{"cell_type":"code","metadata":{"id":"1CWuTvVuuBSt"},"source":[">>> food = 'Python's favorite food is perl'\n","  File \"<stdin>\", line 1\n","    food = 'Python's favorite food is perl'\n","                   ^\n","SyntaxError: invalid syntax"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"-facwL6ruS1m"},"source":["**2. 문자열에 큰따옴표 (\") 포함시키기**"]},{"cell_type":"code","metadata":{"id":"SDvoipFwuXXg"},"source":["'\"Python is very easy.\" he says.'"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"MVXOan01urHE"},"source":["이렇게 작은따옴표(') 안에 사용된 큰따옴표(\")는 문자열을 만드는 기호로 인식되지 않는다."]},{"cell_type":"markdown","metadata":{"id":"eOk82W-AuwI0"},"source":["**3. 백슬래시(\\)를 사용해서 작은따옴표(')와 큰따옴표(\")를 문자열에 포함시키기**"]},{"cell_type":"code","metadata":{"id":"VPWz4IvmvHwL","executionInfo":{"status":"error","timestamp":1601564938692,"user_tz":-540,"elapsed":2841,"user":{"displayName":"김솔찬","photoUrl":"","userId":"16218816003344536399"}},"outputId":"c28bd7b6-1be8-45b1-b6b0-ad76445342c4","colab":{"base_uri":"https://localhost:8080/","height":136}},"source":[">>>food = 'Python\\'s favorite  food is perl'\n",">>>say = \"\\\"Python is very easy.\\\" he says.\""],"execution_count":null,"outputs":[{"output_type":"error","ename":"SyntaxError","evalue":"ignored","traceback":["\u001b[0;36m  File \u001b[0;32m\"<ipython-input-1-c82183fcc4a3>\"\u001b[0;36m, line \u001b[0;32m1\u001b[0m\n\u001b[0;31m    >>>food = 'Python\\'s favorite  food is perl'\u001b[0m\n\u001b[0m     ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"]}]},{"cell_type":"markdown","metadata":{"id":"SHxWNlCbv_RQ"},"source":["작은따옴표(')나 큰따옴표(\")를 문자열에 포함시키는 또 다른 방법은 백슬래시(\\)를 사용하는 것이다. 즉 백슬래시(\\)를 작은따옴표(')나 큰따옴표(\") 앞에 삽입하면 백슬래시(\\) 뒤의 작은따옴표(')나 큰따옴표(\")는 문자열을 둘러싸는 기호의 의미가 아니라 문자 ('), (\") 그 자체를 뜻하게 된다.\n","\n","어떤 방법을 사용해서 문자열 안에 작은따옴표(')와 큰따옴표(\")를 포함시킬지는 각자의 선택이다. 대화형 인터프리터를 실행한 후 위 예문을 꼭 직접 작성해 보자."]},{"cell_type":"markdown","metadata":{"id":"EkdrCMDYwIuV"},"source":["**여러 줄인 문자열을 변수에 대입하고 싶을 때**\n","\n","문자열이 항상 한 줄짜리만 있는 것은 아니다. 다음과 같이 여러 줄의 문자열을 변수에 대입하려면 어떻게 처리해야 할까?"]},{"cell_type":"code","metadata":{"id":"eGbz4nX8wM2f"},"source":["Life is too short\n","You need python"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"r7jEMpgAwPG9"},"source":["**1. 줄을 바꾸기 위한 이스케이프 코드 \\n 삽입하기**"]},{"cell_type":"code","metadata":{"id":"bEBOnwzKwc5Q"},"source":[">>> multiline = \"Life is very short\\nYou need python\""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"JVZ8h7-uxIDZ"},"source":["위 예처럼 줄바꿈 문자 \\n을 삽입하는 방법이 있지만 읽기에 불편하고 줄이 길어지는 단점이 있다.\n","\n","**2. 연속된 작은따옴표 3개(''') 또는 큰따옴표 3개(\"\"\") 사용하기**\n","\n","위 1번의 단점을 극복하기 위해 파이썬에서는 다음과 같이 작은따옴표 3개(''') 또는 큰따옴표 3개(\"\"\")를 사용한다."]},{"cell_type":"markdown","metadata":{"id":"b6DR3K7IyfoK"},"source":["**작은따옴표 3개를 사용한 경우**\n"]},{"cell_type":"code","metadata":{"id":"RQrv12EoxP78"},"source":[">>> multiline='''\n","... Life is too short\n","... You need python\n","... '''"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"uODkfDo6ykbl"},"source":["**큰따옴표 3개를 사용한 경우**\n","\n","print(multiline)을 입력해서 어떻게 출력되는지 확인해 보자."]},{"cell_type":"code","metadata":{"id":"L551jFzhx7U7"},"source":[">>> multiline=\"\"\"\n","... Life is too short\n","... You need python\n","... \"\"\""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"XmvtT5Hmx97w"},"source":["print(multiline)을 입력해서 어떻게 출력되는지 확인해 보자."]},{"cell_type":"code","metadata":{"id":"Fglvs-YMyAn5"},"source":[">>> print(multiline)\n","Life is very short\n","You need python"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"6ve98uY-yrcM"},"source":["두 경우 모두 결과는 동일하다. 위 예에서도 확인할 수 있듯이 문자열이 여러 줄인 경우 이스케이프 코드를 쓰는 것보다 따옴표를 연속해서 쓰는 것이 훨씬 깔끔하다."]},{"cell_type":"markdown","metadata":{"id":"N4kLrx3TyulH"},"source":["**[이스케이프 코드란?]**\n","\n","문자열 예제에서 여러 줄의 문장을 처리할 때 백슬래시 문자와 소문자 n을 조합한 \\n 이스케이프 코드를 사용했다.\n","\n","프로그래밍할 때 사용할 수 있도록 미리 정의해 둔 \"문자 조합\"이다. 주로 출력물을 보기 좋게 정렬하는 용도로 사용한다. 몇 가지 이스케이프 코드를 정리하면 다음과 같다.\n","\n","\\n  문자열 안에서 줄을 바꿀 때 사용\n","\\t  문자열 사이에 탭 간격을 줄 때 사용\n","\\\\  문자 \\를 그대로 표현할 때 사용\n","\\'  작은따옴표(')를 그대로 표현할 때 사용\n","\\\"  큰따옴표(\")를 그대로 표현할 때 사용\n","\\r  캐리지 리턴(줄 바꿈 문자, 현재 커서를 가장 앞으로 이동)\n","\\f  폼 피드(줄 바꿈 문자, 현재 커서를 다음 줄로 이동)\n","\\a  벨 소리(출력할 때 PC 스피커에서 '삑' 소리가 난다)\n","\\b  백 스페이스\n","\\000 널 문자\n","\n","활용빈도가 높은 것은 \\n, \\t, \\\\, \\', \\\"이다. 나머지는 잘 사용하지 않는다."]},{"cell_type":"markdown","metadata":{"id":"mA5LGt6pCTg6"},"source":["**문자열 연산하기**\n","파이썬에서는 문자열을 더하거나 곱할 수 있다. 다른 언어에서는 쉽게 찾아볼 수 없는 재미있는 기능으로, 우리 생각을 그대로 반영해 주는 파이썬만의 장점이라고 할 수 있다. 문자열을 더하거나 곱하는 방법에 대해 알아보자."]},{"cell_type":"markdown","metadata":{"id":"VLfC6fJmCdjR"},"source":["**문자열 더해서 연결하기(Concatenation)**\n"]},{"cell_type":"code","metadata":{"id":"zjghrGRgCgpR"},"source":[">>> head = \"Python\"\n",">>> tail = \" is fun!\"\n",">>> head + tail\n","'Python is fun!'"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"89PrEDhGDJiD"},"source":["위 소스 코드에서 세 번째 줄을 보자. 복잡하게 생각하지 말고 눈에 보이는 대로 생각해 보자. \"Python\"이라는 head 변수와 \" is fun!\"이라는 tail 변수를 더한 것이다. 결과는 'Python is fun!'이다. 즉 head와 tail 변수가 +에 의해 합쳐진 것이다."]},{"cell_type":"markdown","metadata":{"id":"lac2MMIWDQAt"},"source":["**문자열 곱하기**"]},{"cell_type":"code","metadata":{"id":"C_3MZ_SHDS-q"},"source":[">>> a = \"Python\"\n",">>> a * 2\n",">>> 'pythonpython'"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"fCF2yJs-Dofm"},"source":["위 소스코드에서 * 의미는 우리가 일반적으로 사용하는 숫자 곱하기의 의미와는 다르다. 위 소스 코드에서 a * 2 문장은 a를 두 번 반복하라는 뜻이다."]},{"cell_type":"markdown","metadata":{"id":"rypYA3EKECyo"},"source":["**문자열 곱하기 응용**\n","\n","문자열 곱하기를 좀 더 응용해 보자. 다음 소스를 IDLE 에디터를 열고 작성해 보자."]},{"cell_type":"code","metadata":{"id":"JI62T9DzEIdY"},"source":["# multistring.py\n","\n","print(\"=\" * 50)\n","print(\"My program\")\n","print(\"=\" * 50)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"JocwDfXfE01i"},"source":["입력한 소스는 C:\\doit 디렉터리에 파일 이름 multistring.py로 저장하자.\n","\n","이제 프로그램을 실행해 보자. [윈도우 + R(실행) → cmd 입력 → Enter]를 눌러 명령 프롬프트 창을 열고 다음을 따라 해 보자. 결괏값이 다음과 같이 나타날 것이다."]},{"cell_type":"code","metadata":{"id":"rXR5FVOXE152"},"source":["C:\\Users>cd C:\\doit\n","C:\\doit>python multistring.py\n","==================================================\n","My Program\n","=================================================="],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"CmQZFBS6E5ZS"},"source":["이런 식의 표현은 앞으로 자주 사용하게 될 것이다. 프로그램을 만들어 실행시켰을 때 출력되는 화면 제일 위쪽에 프로그램 제목을 이와 같이 표시하면 보기 좋지 않겠는가?"]},{"cell_type":"markdown","metadata":{"id":"gK5yXNx_E7zv"},"source":["**문자열 길이 구하기**\n","\n","문자열의 길이는 다음과 같이 len 함수를 사용하면 구할 수 있다. len 함수는 print 함수처럼 파이썬의 기본 내장 함수로 별다른 설정 없이 바로 사용할 수 있다."]},{"cell_type":"code","metadata":{"id":"0vvUpBHdE9j-"},"source":[">>> a = \"Life is too short\"\n",">>> len(a)\n","17"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Z0ffgnbdFRmZ"},"source":["**문자열 인덱싱과 슬라이싱**\n","\n","인덱싱(Indexing)이란 무엇인가를 \"가리킨다\"는 의미이고, 슬라이싱(Slicing)은 무엇인가를 \"잘라낸다\"는 의미이다. 이런 의미를 생각하면서 다음 내용을 살펴보자."]},{"cell_type":"markdown","metadata":{"id":"gqkznjEMFVQu"},"source":["**문자열 인덱싱이란?**"]},{"cell_type":"code","metadata":{"id":"6tA_9uxAFXOI"},"source":[">>> a \"LIfe is too short, Yon need python\""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"nwRWFR1SFh3s"},"source":["위 소스 코드에서 변수 a에 저장한 문자열의 각 문자마다 번호를 매겨 보면 다음과 같다."]},{"cell_type":"code","metadata":{"id":"IWoEAP9uFisf"},"source":["Life is too short, You need Python\n","0         1         2         3 \n","0123456789012345678901234567890123"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"x0HKmX5iFlXP"},"source":["\"Life is too short, You need Python\" 문자열에서 L은 첫 번째 자리를 뜻하는 숫자 0, 바로 다음인 i는 1 이런 식으로 계속 번호를 붙인 것이다. 중간에 있는 short의 s는 12가 된다.\n","\n","이제 다음 예를 실행해 보자."]},{"cell_type":"code","metadata":{"id":"3QzBPAbLFohe"},"source":[">>> a \"LIfe is too short, You need Python\"\n",">>> a[3]\n","'e'"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Zy1Eu4bBF_iR"},"source":["a[3]이 뜻하는 것은 a라는 문자열의 네 번째 문자 e를 말한다. 프로그래밍을 처음 접하는 독자라면 a[3]에서 숫자 3이 왜 네 번째 문자를 뜻하는지 의아할 수도 있다. 사실 이 부분이 헷갈릴 수 있는 부분인데, 이렇게 생각하면 쉽게 알 수 있을 것이다."]},{"cell_type":"markdown","metadata":{"id":"hV00fNH6GB-S"},"source":["**\"파이썬은 0부터 숫자를 센다.\"**\n","따라서 파이썬은 위 문자열을 다음과 같이 바라보고 있다."]},{"cell_type":"code","metadata":{"id":"LGwU4ywoGHit"},"source":["a[0]:'L', a[1]:'i', a[2]:'f', a[3]:'e', a[4]:' ', ..."],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"f6O3o8ZMGKXg"},"source":["0부터 숫자를 센다는 것이 처음에는 익숙하지 않겠지만 계속 사용하다 보면 자연스러워질 것이다. 위 예에서 볼 수 있듯이 a[번호]는 문자열 안의 특정한 값을 뽑아내는 역할을 한다. 이러한 작업을 인덱싱이라고 한다."]},{"cell_type":"markdown","metadata":{"id":"Wq8QJvI_GPtH"},"source":["**문자열 인덱싱 활용하기**\n","인덱싱 예를 몇 가지 더 보자."]},{"cell_type":"code","metadata":{"id":"IogQ_MHRGRL2"},"source":[">>> a = \"Life is too short, You need Python\"\n",">>> a[0]\n","'L'\n",">>> a[12]\n","'s'\n",">>> a[-1]\n","'n'"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"FIztJl_vGXTa"},"source":["a[0]과 a[12]는 쉽게 이해할 수 있는데 마지막의 a[-1]이 뜻하는 것은 뭘까? 눈치 빠른 독자는 이미 알아챘겠지만 문자열을 뒤에서부터 읽기 위해 마이너스(-) 기호를 붙이는 것이다. 즉 a[-1]은 뒤에서부터 세어 첫 번째가 되는 문자를 말한다. a의 값은 \"Life is too short, You need Python\" 문자열이므로 뒤에서부터 첫 번째 문자는 가장 마지막 문자 'n'이다.\n","\n","뒤에서부터 첫 번째 문자를 표시할 때도 0부터 세어 \"a[-0]이라고 해야 하지 않을까?\"라는 의문이 들 수도 있겠지만 잘 생각해 보자. 0과 -0은 똑같은 것이기 때문에 a[-0]은 a[0]과 똑같은 값을 보여 준다."]},{"cell_type":"code","metadata":{"id":"UeRZv0hFGZkr"},"source":[">>> a[-0]\n","'L'`"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"wyrVEk04Gd3e"},"source":["계속해서 몇 가지 예를 더 보자."]},{"cell_type":"code","metadata":{"id":"YZEAdEf-GgAG"},"source":[">>> a[-2]\n","'o'\n",">>> a[-5]\n","'y'`"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Y00OdomlGi9p"},"source":["위 첫 번째 예는 뒤에서부터 두 번째 문자를 가리키는 것이고, 두 번째 예는 뒤에서부터 다섯 번째 문자를 가리키는 것이다."]},{"cell_type":"markdown","metadata":{"id":"SvUeW1EiGlNf"},"source":[""]},{"cell_type":"markdown","metadata":{"id":"O2OiScoEGlSc"},"source":["**문자열 슬라이싱이란?**\n","\n","\"Life is too short, You need Python\" 문자열에서 단순히 한 문자만을 뽑아내는 것이 아니라 'Life' 또는 'You' 같은 단어를 뽑아내는 방법은 없을까?"]},{"cell_type":"code","metadata":{"id":"_bxiLD6lGsfW"},"source":[">>> a = \"Life is too short, You need python\"\n",">>> b = a[0] + a[1] + a[2] + a[3]\n",">>>b\n","'Life'"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"VQ_kYbARHJe1"},"source":["위 방법처럼 단순하게 접근할 수도 있지만 파이썬에서는 더 좋은 방법을 제공한다. 바로 슬라이싱(Slicing) 기법이다.\n","\n","※ 인덱싱 기법과 슬라이싱 기법은 뒤에서 배울 자료형인 리스트나 튜플에서도 사용할 수 있다.\n","\n","위 예는 슬라이싱 기법으로 다음과 같이 간단하게 처리할 수 있다."]},{"cell_type":"code","metadata":{"id":"Z9kcOsSRHL4Y"},"source":[">>> a = \"Life is too short, You need python\n",">>> a = [0:4]\n","'Life'"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"0i39usebHagJ"},"source":["a[0:4]가 뜻하는 것은 a 문자열, 즉 \"Life is too short, You need Python\" 문장에서 자리 번호 0부터 4까지의 문자를 뽑아낸다는 뜻이다. 하지만 다음과 같은 의문이 생길 것이다. a[0]은 L, a[1]은 i, a[2]는 f, a[3]은 e니까 a[0:3]으로도 Life라는 단어를 뽑아낼 수 있지 않을까? 다음 예로 확인해 보자."]},{"cell_type":"code","metadata":{"id":"yttZCGm3Ha_h"},"source":[">>> a[0:3]\n","'Lif'"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"2RTJupRGHoGA"},"source":["이렇게 되는 이유는 간단하다. 슬라이싱 기법으로 a[시작 번호:끝 번호]를 지정할 때 끝 번호에 해당하는 것은 포함하지 않기 때문이다. a[0:3]을 수식으로 나타내면 다음과 같다."]},{"cell_type":"code","metadata":{"id":"lgG1VK5kHpcT"},"source":["0 <= a < 3"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"yA2LxCzRI9ew"},"source":["이 수식을 만족하는 것은 a[0], a[1], a[2]이다. 따라서 a[0:3]은 'Lif'이고 a[0:4]는 'Life'가 되는 것이다. 이 부분이 문자열 연산에서 가장 혼동하기 쉬운 부분이니 장 마지막의 연습 문제를 많이 풀어 보면서 몸에 익히기 바란다."]},{"cell_type":"markdown","metadata":{"id":"RhNn0qNkJArM"},"source":["**문자열을 슬라이싱하는 방법**\n","\n","슬라이싱의 예를 조금 더 보자."]},{"cell_type":"code","metadata":{"id":"LGmztBz3KkZd"},"source":[">>> a[0:5]\n","'Life '"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"OT61McCUKq-v"},"source":["위 예는 a[0] + a[1] + a[2] + a[3] + a[4]와 동일하다. a[4]는 공백 문자이기 때문에 'Life'가 아닌 'Life '가 출력된다. 공백 문자 역시 L, i, f, e 같은 문자와 동일하게 취급되는 것을 잊지 말자. 'Life'와 'Life '는 완전히 다른 문자열이다.\n","\n","슬라이싱할 때 항상 시작 번호가 0일 필요는 없다."]},{"cell_type":"code","metadata":{"id":"yODPqkP-Kv2c"},"source":[">>> a[0:2]\n","'Li'\n",">>> a[5:7]\n","'is'\n",">>> a[12:17]\n","'short'"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"jgac5c6ELMF1"},"source":["a[시작 번호:끝 번호]에서 끝 번호 부분을 생략하면 시작 번호부터 그 문자열의 끝까지 뽑아낸다."]},{"cell_type":"code","metadata":{"id":"oEkcNadKLOsl"},"source":[">>> a[19:]\n","\"You need Python\""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"L6i-1huBLyEx"},"source":["a[시작 번호:끝 번호]에서 시작 번호를 생략하면 문자열의 처음부터 끝 번호까지 뽑아낸다."]},{"cell_type":"code","metadata":{"id":"p6LN4QDTL0Fk"},"source":[">>> a[:17]\n","'Life is too short'"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Gjamjdf6L16y"},"source":["a[시작 번호:끝 번호]에서 시작 번호와 끝 번호를 생략하면 문자열의 처음부터 끝까지를 뽑아낸다."]},{"cell_type":"code","metadata":{"id":"9Eat5vMeL40N"},"source":[">>> a[:]\n","'Life is too short, You need Python'\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"OovCl6PlL9V5"},"source":["슬라이싱에서도 인덱싱과 마찬가지로 마이너스(-) 기호를 사용할 수 있다."]},{"cell_type":"code","metadata":{"id":"LHablgUsL-qa"},"source":[">>> a[19:-7]\n","'You need'"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"5UE1nTI0MANv"},"source":["위 소스 코드에서 a[19:-7]이 뜻하는 것은 a[19]에서부터 a[-8]까지를 말한다. 이 역시 a[-7]은 포함하지 않는다."]},{"cell_type":"markdown","metadata":{"id":"eRBqYVYxMB7M"},"source":["**슬라이싱으로 문자열 나누기**\n","\n","다음은 자주 사용하게 되는 슬라이싱 기법 중 하나이다."]},{"cell_type":"code","metadata":{"id":"4SOq5by0MG8g"},"source":[">>> a = \"20010331Rainy\"\n",">>> date = a[:8]\n",">>> weather = a[8:]\n",">>> date\n","'20010331'\n",">>> weather\n","'Rainy'"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Zkmwx6uCMxNo"},"source":["위 예는 문자열 a를 두 부분으로 나누는 기법이다. 숫자 8을 기준으로 문자열 a를 양쪽으로 한 번씩 슬라이싱했다. a[:8]은 a[8]이 포함되지 않고, a[8:]은 a[8]을 포함하기 때문에 8을 기준으로 해서 두 부분으로 나눌 수 있는 것이다. 위 예에서는 \"20010331Rainy\" 문자열을 날짜를 나타내는 부분인 '20010331'과 날씨를 나타내는 부분인 'Rainy'로 나누는 방법을 보여 준다.\n","\n","위 문자열 \"20010331Rainy\"를 연도 2001, 월과 일을 나타내는 0331, 날씨를 나타내는 Rainy의 세 부분으로 나누려면 다음과 같이 할 수 있다."]},{"cell_type":"code","metadata":{"id":"IsyRj5OUMz9p"},"source":[">>> a = \"20010331Rainy\"\n",">>> year = a[:4]\n",">>> day = a[4:8]\n",">>> weather = a[8:]\n",">>> year\n","'2001'\n",">>> day\n","'0331'\n",">>> weather\n","'Rainy'"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"X6w6WAD7M3gK"},"source":["위 예는 숫자 4와 8로 \"20010331Rainy\" 문자열을 세 부분으로 나누는 방법을 보여 준다.\n","\n","지금까지 인덱싱과 슬라이싱에 대해서 살펴보았다. 인덱싱과 슬라이싱은 프로그래밍을 할때 매우 자주 사용하는 기법이니 꼭 반복해서 연습해 두자.\n","\n","**[\"Pithon\"이라는 문자열을 \"Python\"으로 바꾸려면?]**\n","Pithon 문자열을 Python으로 바꾸려면 어떻게 해야 할까? 제일 먼저 떠오르는 생각은 다음과 같을 것이다."]},{"cell_type":"code","metadata":{"id":"Z8NH9jSZM93Z"},"source":[">>> a = \"Pithon\"\n",">>> a[1]\n","'i'\n",">>> a[1] = 'y'"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"nFVhbjFbNCQh"},"source":["즉 a 변수에 \"Pithon\" 문자열을 대입하고 a[1]의 값이 i니까 a[1]을 y로 바꾸어 준다는 생각이다. 하지만 결과는 어떻게 나올까?\n","\n","당연히 오류가 발생한다. 왜냐하면 문자열의 요솟값은 바꿀 수 있는 값이 아니기 때문이다(문자열 자료형은 그 요솟값을 변경할 수 없다. 그래서 immutable한 자료형이라고도 부른다).\n","\n","하지만 앞에서 살펴본 슬라이싱 기법을 사용하면 Pithon 문자열을 사용해 Python 문자열을 만들 수 있다.\n","\n","다음 예를 보자."]},{"cell_type":"code","metadata":{"id":"SfKlXZwhNEbS"},"source":[">>> a = \"Pithon\"\n",">>> a[:1]\n","'P'\n",">>> a[2:]\n","'thon'\n",">>> a[:1] + 'y' + a[2:]\n","'Python'"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"gbuvC_L0NGKy"},"source":["위 예에서 볼 수 있듯이 슬라이싱을 사용하면 \"Pithon\" 문자열을 'P' 부분과 'thon' 부분으로 나눌 수 있기 때문에 그 사이에 'y' 문자를 추가하여 'Python'이라는 새로운 문자열을 만들 수 있다."]},{"cell_type":"markdown","metadata":{"id":"0JJASeAvNKpk"},"source":["**문자열 포매팅**\n","문자열에서 또 하나 알아야 할 것으로는 문자열 포매팅(Formatting)이 있다. 이것을 공부하기 전에 다음과 같은 문자열을 출력하는 프로그램을 작성했다고 가정해 보자.\n","\n","\"현재 온도는 18도입니다.\"\n","\n","시간이 지나서 20도가 되면 다음 문장을 출력한다.\n","\n","\"현재 온도는 20도입니다\"\n","\n","위 두 문자열은 모두 같은데 20이라는 숫자와 18이라는 숫자만 다르다. 이렇게 문자열 안의 특정한 값을 바꿔야 할 경우가 있을 때 이것을 가능하게 해주는 것이 바로 문자열 포매팅 기법이다.\n","\n","쉽게 말해 문자열 포매팅이란 문자열 안에 어떤 값을 삽입하는 방법이다. 다음 예를 직접 실행해 보면서 그 사용법을 알아보자.\n","\n","**문자열 포매팅 따라 하기**\n","**1. 숫자 바로 대입 **"]},{"cell_type":"code","metadata":{"id":"6PYkF2s2NVkR"},"source":[">>> \"I eat %d apples.\" % 3\n","'I eat 3 apples.'"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"6AK5SkgONZ89"},"source":["위 예제의 결괏값을 보면 알겠지만 위 예제는 문자열 안에 정수 3을 삽입하는 방법을 보여 준다. 문자열 안에서 숫자를 넣고 싶은 자리에 %d 문자를 넣어 주고, 삽입할 숫자 3은 가장 뒤에 있는 % 문자 다음에 써 넣었다. 여기에서 %d는 문자열 포맷 코드라고 부른다.\n","\n","**2. 문자열 바로 대입**\n","\n","문자열 안에 꼭 숫자만 넣으라는 법은 없다. 이번에는 숫자 대신 문자열을 넣어 보자."]},{"cell_type":"code","metadata":{"id":"WKSCfptTNeNn"},"source":[">>> \"I eat %s apples.\" % \"five\"\n","'I eat five apples.'"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"soHo2dSuOUsQ"},"source":["위 예제에서는 문자열 안에 또 다른 문자열을 삽입하기 위해 앞에서 사용한 문자열 포맷 코드 %d가 아닌 %s를 썼다. 어쩌면 눈치 빠른 독자는 벌써 유추하였을 것이다. 숫자를 넣기 위해서는 %d를 써야 하고, 문자열을 넣기 위해서는 %s를 써야 한다는 사실을 말이다.\n","\n","※ 문자열을 대입할 때는 앞에서 배운 것처럼 큰따옴표나 작은따옴표를 반드시 써주어야 한다."]},{"cell_type":"markdown","metadata":{"id":"S_C-XHTFOV6Q"},"source":["**3. 숫자 값을 나타내는 변수로 대입**"]},{"cell_type":"code","metadata":{"id":"SIbndtkKOYow"},"source":[">>> number = 3\n",">>> \"I eat %d apples.\" % number\n","'I eat 3 apples.'"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"-t4HEFolObNA"},"source":["1번처럼 숫자를 바로 대입하나 위 예제처럼 숫자 값을 나타내는 변수를 대입하나 결과는 같다."]},{"cell_type":"markdown","metadata":{"id":"BcbM_C21Oc5s"},"source":["**4. 2개 이상의 값 넣기**\n","\n","그렇다면 문자열 안에 1개가 아닌 여러 개의 값을 넣고 싶을 땐 어떻게 해야 할까?"]},{"cell_type":"code","metadata":{"id":"bNi3ZABsOgCx"},"source":[">>> number = 10\n",">>> day = \"three\"\n",">>> \"I ate %d apples. so I was sick for %s days.\" % (number, day)\n","'I ate 10 apples. so I was sick for three days.'"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"EuSmNahIOkMq"},"source":["위 예문처럼 2개 이상의 값을 넣으려면 마지막 % 다음 괄호 안에 콤마(,)로 구분하여 각각의 값을 넣어 주면 된다."]},{"cell_type":"markdown","metadata":{"id":"fvutc3GtOmCd"},"source":["**문자열 포맷 코드**\n","\n","문자열 포매팅 예제에서는 대입해 넣는 자료형으로 정수와 문자열을 사용했으나 이 외에도 다양한 것을 대입할 수 있다. 문자열 포맷 코드로는 다음과 같은 것이 있다.\n","\n","%s\t문자열(String)\n","%c\t문자 1개(character)\n","%d\t정수(Integer)\n","%f\t부동소수(floating-point)\n","%o\t8진수\n","%x\t16진수\n","%%\tLiteral % (문자 % 자체)"]},{"cell_type":"markdown","metadata":{"id":"rJ-avyOEOwot"},"source":["여기에서 재미있는 것은 %s 포맷 코드인데, 이 코드는 어떤 형태의 값이든 변환해 넣을 수 있다. 무슨 말인지 예를 통해 확인해 보자."]},{"cell_type":"code","metadata":{"id":"TegBtulDOxMZ"},"source":[">>> \"I have %s apples\" % 3\n","'I have 3 apples'\n",">>> \"rate is %s\" % 3.234\n","'rate is 3.234'"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"8sAJ7QgRO0fz"},"source":["3을 문자열 안에 삽입하려면 %d를 사용하고, 3.234를 삽입하려면 %f를 사용해야 한다. 하지만 %s를 사용하면 이런 것을 생각하지 않아도 된다. 왜냐하면 %s는 자동으로 % 뒤에 있는 값을 문자열로 바꾸기 때문이다."]},{"cell_type":"markdown","metadata":{"id":"xjQ-OUAgO6xg"},"source":["[포매팅 연산자 %d와 %를 같이 쓸 때는 %%를 쓴다]"]},{"cell_type":"code","metadata":{"id":"k9Vzh_StO8hI"},"source":[">>> \"Error is %d%.\" % 98"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"AeYoLq3SO_oX"},"source":["위 예문의 결괏값으로 당연히 \"Error is 98%.\"가 출력될 것이라고 예상하겠지만 파이썬은 값이 올바르지 않다는 값 오류(Value Error) 메시지를 보여 준다."]},{"cell_type":"code","metadata":{"id":"Y-oxjVtdPB9i"},"source":["Traceback (most recent call last):\n","File \"<stdin>\", line 1, in <module>\n","ValueError: incomplete format"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ZXquScBTPEJE"},"source":["이유는 문자열 포맷 코드인 %d와 %가 같은 문자열 안에 존재하는 경우, %를 나타내려면 반드시 %%로 써야 하는 법칙이 있기 때문이다. 이 점은 꼭 기억해 두어야 한다. 하지만 문자열 안에 %d 같은 포매팅 연산자가 없으면 %는 홀로 쓰여도 상관이 없다.\n","\n","따라서 위 예를 제대로 실행하려면 다음과 같이 해야 한다.\n","\n"]},{"cell_type":"code","metadata":{"id":"2uIeWkE_PGhB"},"source":[">>> \"Error is %d%%.\" % 98\n","'Error is 98%.'"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"t2Uo5E0JQhbU"},"source":["**포맷 코드와 숫자 함께 사용하기**\n","위에서 보았듯이 %d, %s 등의 포맷 코드는 문자열 안에 어떤 값을 삽입하기 위해 사용한다. 하지만 포맷 코드를 숫자와 함께 사용하면 더 유용하게 사용할 수 있다. 다음 예를 보고 따라해 보자."]},{"cell_type":"markdown","metadata":{"id":"WauiCxQ7Qkq_"},"source":["**1. 정렬과 공백**"]},{"cell_type":"code","metadata":{"id":"lIR8E1KiQncv"},"source":[">>> \"%10s\" % \"hi\"\n","'        hi'"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Ixy1dz2NQoJd"},"source":["앞의 예문에서 %10s는 전체 길이가 10개인 문자열 공간에서 대입되는 값을 오른쪽으로 정렬하고 그 앞의 나머지는 공백으로 남겨 두라는 의미이다.\n","\n","그렇다면 반대쪽인 왼쪽 정렬은 %-10s가 될 것이다. 확인해 보자."]},{"cell_type":"code","metadata":{"id":"_5lATE38Qqk0"},"source":[">>> \"%-10sjane.\" % 'hi'\n","'hi        jane.'"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"myYZCXnJQspG"},"source":["hi를 왼쪽으로 정렬하고 나머지는 공백으로 채웠음을 볼 수 있다."]},{"cell_type":"markdown","metadata":{"id":"Sk8tS_DIQvuI"},"source":["**2. 소수점 표현하기**"]},{"cell_type":"code","metadata":{"id":"9mw7fofJQyIE"},"source":[">>> \"%0.4f\" % 3.42134234\n","'3.4213'"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"NbT_X80MQzxJ"},"source":["3.42134234를 소수점 네 번째 자리까지만 나타내고 싶은 경우에는 위와 같이 사용한다. 즉 여기서 '.'의 의미는 소수점 포인트를 말하고 그 뒤의 숫자 4는 소수점 뒤에 나올 숫자의 개수를 말한다. 다음 예를 살펴보자."]},{"cell_type":"code","metadata":{"id":"wWL3uxs3Q1M2"},"source":[">>> \"%10.4f\" % 3.42134234\n","'    3.4213'"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ff4RII6SQ2yD"},"source":["위 예는 숫자 3.42134234를 소수점 네 번째 자리까지만 표시하고 전체 길이가 10개인 문자열 공간에서 오른쪽으로 정렬하는 예를 보여 준다."]},{"cell_type":"markdown","metadata":{"id":"UyNl6YQRQ4tJ"},"source":["**format 함수를 사용한 포매팅**\n","\n","문자열의 format 함수를 사용하면 좀 더 발전된 스타일로 문자열 포맷을 지정할 수 있다. 앞에서 살펴본 문자열 포매팅 예제를 format 함수를 사용해서 바꾸면 다음과 같다."]},{"cell_type":"markdown","metadata":{"id":"uqstptIvQ7o7"},"source":["**숫자 바로 대입하기**"]},{"cell_type":"code","metadata":{"id":"cwqbcMflQ9xG"},"source":[">>> \"I eat {0} apples\".format(3)\n","'I eat 3 apples'"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"dnXj1BeFQ-Ox"},"source":["\"I eat {0} apples\" 문자열 중 {0} 부분이 숫자 3으로 바뀌었다."]},{"cell_type":"markdown","metadata":{"id":"xc18ufg0RBYP"},"source":["**문자열 바로 대입하기**"]},{"cell_type":"code","metadata":{"id":"opVCTOpqREFN"},"source":[">>> \"I eat {0} apples\".format(\"five\")\n","'I eat five apples'"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"EUDgbX6sRGTC"},"source":["문자열의 {0} 항목이 five라는 문자열로 바뀌었다."]},{"cell_type":"markdown","metadata":{"id":"W0QFhwGkRG93"},"source":["**숫자 값을 가진 변수로 대입하기**"]},{"cell_type":"code","metadata":{"id":"VrpG2DadRJ_1"},"source":[">>> number = 3\n",">>> \"I eat {0} apples\".format(number)\n","'I eat 3 apples'"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"RioiDVFORLo3"},"source":["문자열의 {0} 항목이 number 변수 값인 3으로 바뀌었다."]},{"cell_type":"markdown","metadata":{"id":"W7u-nUBlRNxg"},"source":["**2개 이상의 값 넣기**"]},{"cell_type":"code","metadata":{"id":"j8QnbNztRP1y"},"source":[">>> number = 10\n",">>> day = \"three\"\n",">>> \"I ate {0} apples. so I was sick for {1} days.\".format(number, day)\n","'I ate 10 apples. so I was sick for three days.'"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"8YZQSal6RR4w"},"source":["2개 이상의 값을 넣을 경우 문자열의 {0}, {1}과 같은 인덱스 항목이 format 함수의 입력값으로 순서에 맞게 바뀐다. 즉 위 예에서 {0}은 format 함수의 첫 번째 입력값인 number로 바뀌고 {1}은 format 함수의 두 번째 입력값인 day로 바뀐다."]},{"cell_type":"markdown","metadata":{"id":"bCL_AkH4RTKP"},"source":["이름으로 넣기"]},{"cell_type":"code","metadata":{"id":"DlxmUBcoRVUL"},"source":[">>> \"I ate {number} apples. so I was sick for {day} days.\".format(number=10, day=3)\n","'I ate 10 apples. so I was sick for 3 days.'"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"NU9sD3j9RYfi"},"source":["위 예에서 볼 수 있듯이 {0}, {1}과 같은 인덱스 항목 대신 더 편리한 {name} 형태를 사용하는 방법도 있다. {name} 형태를 사용할 경우 format 함수에는 반드시 name=value 와 같은 형태의 입력값이 있어야만 한다. 위 예는 문자열의 {number}, {day}가 format 함수의 입력값인 number=10, day=3 값으로 각각 바뀌는 것을 보여 주고 있다."]},{"cell_type":"markdown","metadata":{"id":"v6SKbLPoRasA"},"source":["**인덱스와 이름을 혼용해서 넣기**"]},{"cell_type":"code","metadata":{"id":"oxZkHABzRdyW"},"source":[">>> \"I ate {0} apples. so I was sick for {day} days.\".format(10, day=3)\n","'I ate 10 apples. so I was sick for 3 days.'"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"dq86T7K4Rff-"},"source":["위와 같이 인덱스 항목과 name=value 형태를 혼용하는 것도 가능하다."]},{"cell_type":"markdown","metadata":{"id":"KhgigNjKRgoK"},"source":["**왼쪽 정렬**"]},{"cell_type":"code","metadata":{"id":"CyNF8caORi7V"},"source":[">>> \"{0:<10}\".format(\"hi\")\n","'hi        '\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"xt5nJ3i0Sg3h"},"source":[":<10 표현식을 사용하면 치환되는 문자열을 왼쪽으로 정렬하고 문자열의 총 자릿수를 10으로 맞출 수 있다."]},{"cell_type":"markdown","metadata":{"id":"FkaW5sjPSi4l"},"source":["**오른쪽 정렬**"]},{"cell_type":"code","metadata":{"id":"4qS26ipDSlRf"},"source":[">>> \"{0:>10}\".format(\"hi\")\n","'        hi'"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"_8mVlHXuSnTQ"},"source":["오른쪽 정렬은 :< 대신 :>을 사용하면 된다. 화살표 방향을 생각하면 어느 쪽으로 정렬되는지 바로 알 수 있을 것이다."]},{"cell_type":"markdown","metadata":{"id":"I6F_tgHMSreg"},"source":["**가운데 정렬**"]},{"cell_type":"code","metadata":{"id":"nBrsOFSBSuFS"},"source":[">>> \"{0:^10}\".format(\"hi\")\n","'    hi    '"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"NxZq4bkxSxAZ"},"source":[":^ 기호를 사용하면 가운데 정렬도 가능하다."]},{"cell_type":"markdown","metadata":{"id":"TBpu9bXSSyWF"},"source":["**공백 채우기**"]},{"cell_type":"code","metadata":{"id":"upcTZj13S0yL"},"source":[">>> \"{0:=^10}\".format(\"hi\")\n","'====hi===='\n",">>> \"{0:!<10}\".format(\"hi\")\n","'hi!!!!!!!!'"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"0kqU4QeSS2vq"},"source":["정렬할 때 공백 문자 대신에 지정한 문자 값으로 채워 넣는 것도 가능하다. 채워 넣을 문자 값은 정렬 문자 <, >, ^ 바로 앞에 넣어야 한다. 위 예에서 첫 번째 예제는 가운데(^)로 정렬하고 빈 공간을 = 문자로 채웠고, 두 번째 예제는 왼쪽(<)으로 정렬하고 빈 공간을 ! 문자로 채웠다."]},{"cell_type":"markdown","metadata":{"id":"HBMzHVduS4kw"},"source":["**소수점 표현하기**"]},{"cell_type":"code","metadata":{"id":"Pyjwb-QCS8GF"},"source":[">>> y = 3.42134234\n",">>> \"{0:0.4f}\".format(y)\n","'3.4213'"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"opPsYzGMS9cJ"},"source":["위 예는 format 함수를 사용해 소수점을 4자리까지만 표현하는 방법을 보여 준다. 앞에서 살펴보았던 표현식 0.4f를 그대로 사용한 것을 알 수 있다."]},{"cell_type":"code","metadata":{"id":"fYGb_qOIS-rJ"},"source":[">>> \"{0:10.4f}\".format(y)\n","'    3.4213'"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"hgMKqxUyTACY"},"source":["위와 같이 자릿수를 10으로 맞출 수도 있다. 역시 앞에서 살펴본 10.4f의 표현식을 그대로 사용한 것을 알 수 있다."]},{"cell_type":"markdown","metadata":{"id":"xkqInN7MTBpF"},"source":["**{ 또는 } 문자 표현하기**"]},{"cell_type":"code","metadata":{"id":"eDXYF5K_TD1f"},"source":[">>> \"{{ and }}\".format()\n","'{ and }'"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"sFwEE3jSTFd-"},"source":["format 함수를 사용해 문자열 포매팅을 할 경우 { }와 같은 중괄호(brace) 문자를 포매팅 문자가 아닌 문자 그대로 사용하고 싶은 경우에는 위 예의 {{ }}처럼 2개를 연속해서 사용하면 된다."]},{"cell_type":"markdown","metadata":{"id":"BVPpH521TIC-"},"source":["**f 문자열 포매팅**\n","\n","파이썬 3.6 버전부터는 f 문자열 포매팅 기능을 사용할 수 있다. 파이썬 3.6 미만 버전에서는 사용할 수 없는 기능이므로 주의해야 한다.\n","\n","다음과 같이 문자열 앞에 f 접두사를 붙이면 f 문자열 포매팅 기능을 사용할 수 있다."]},{"cell_type":"code","metadata":{"id":"L6Q7ElMzTLHy"},"source":[">>> name = '홍길동'\n",">>> age = 30\n",">>> f'나의 이름은 {name}입니다. 나이는 {d[\"age\"]}입니다.'\n","'나의 이름은 홍길동입니다. 나이는 30 입니다.'"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"6EN0uqVHT22p"},"source":["정렬은 다음과 같이 할 수 있다."]},{"cell_type":"code","metadata":{"id":"DPkofbJMT38A"},"source":[">>> f'{\"hi\":<10}'  # 왼쪽 정렬\n","'hi        '\n",">>> f'{\"hi\":>10}'  # 오른쪽 정렬\n","'        hi'\n",">>> f'{\"hi\":^10}'  # 가운데 정렬\n","'    hi    '"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"34lwW9VyUQux"},"source":["공백 채우기는 다음과 같이 할 수 있다."]},{"cell_type":"code","metadata":{"id":"qVelHDesUSpR"},"source":[">>> f'{\"hi\":=^10}'  # 가운데 정렬하고 '=' 문자로 공백 채우기\n","'====hi===='\n",">>> f'{\"hi\":!<10}'  # 왼쪽 정렬하고 '!' 문자로 공백 채우기\n","'hi!!!!!!!!'"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"YdHX_BinUUW5"},"source":["소수점은 다음과 같이 표현할 수 있다."]},{"cell_type":"code","metadata":{"id":"N1qlK26UUV3e"},"source":[">>> y = 3.42134234\n",">>> f'{y:0.4f}'  # 소수점 4자리까지만 표현\n","'3.4213'\n",">>> f'{y:10.4f}'  # 소수점 4자리까지 표현하고 총 자리수를 10으로 맞춤\n","'    3.4213'"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Q087pJW1UYff"},"source":["f 문자열에서 { } 문자를 표시하려면 다음과 같이 두 개를 동시에 사용해야 한다."]},{"cell_type":"code","metadata":{"id":"CXzbVhksUab_"},"source":[">>> f'{{ and }}'\n","'{ and }'"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"AIjZ74-pUb9h"},"source":["지금까지는 문자열을 가지고 할 수 있는 기본적인 것에 대해 알아보았다. 이제부터는 문자열을 좀 더 자유자재로 다루기 위해 공부해야 할 것을 설명할 것이다. "]},{"cell_type":"markdown","metadata":{"id":"fV3tRCVoUd2T"},"source":["**문자열 관련 함수들**\n","\n","문자열 자료형은 자체적으로 함수를 가지고 있다. 이들 함수를 다른 말로 문자열 내장 함수라 한다. 이 내장 함수를 사용하려면 문자열 변수 이름 뒤에 ‘.’를 붙인 다음에 함수 이름을 써주면 된다. 이제 문자열의 내장 함수에 대해서 알아보자.\n","\n","**문자 개수 세기(count)**"]},{"cell_type":"code","metadata":{"id":"0UX-hzerVCNZ"},"source":[">>> a = \"hobby\"\n",">>> a.count('b')\n","2"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"HUWCWB1tVE5D"},"source":["문자열 중 문자 b의 개수를 돌려준다."]},{"cell_type":"markdown","metadata":{"id":"UrenZoxQVGll"},"source":["**위치 알려주기1(find)**"]},{"cell_type":"code","metadata":{"id":"ohI_AqEDVKl9"},"source":[">>> a = \"Python is the best choice\"\n",">>> a.find('b')\n","14\n",">>> a.find('k')\n","-1"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"incLQTwlVMjM"},"source":["문자열 중 문자 b가 처음으로 나온 위치를 반환한다. 만약 찾는 문자나 문자열이 존재하지 않는다면 -1을 반환한다.\n","\n","※ 파이썬은 숫자를 0부터 세기 때문에 b의 위치는 15가 아닌 14가 된다.\n","\n","**위치 알려주기2(index)**"]},{"cell_type":"code","metadata":{"id":"9C2bGROeVTa9"},"source":[">>> a = \"Life is too short\"\n",">>> a.index('t')\n","8\n",">>> a.index('k')\n","Traceback (most recent call last):\n","File \"<stdin>\", line 1, in <module>\n","ValueError: substring not found"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"eovwOaxFVU3Z"},"source":["문자열 중 문자 t가 맨 처음으로 나온 위치를 반환한다. 만약 찾는 문자나 문자열이 존재하지 않는다면 오류를 발생시킨다. 앞의 find 함수와 다른 점은 문자열 안에 존재하지 않는 문자를 찾으면 오류가 발생한다는 점이다."]},{"cell_type":"markdown","metadata":{"id":"9xSRk9edVWfr"},"source":["**문자열 삽입(join)**"]},{"cell_type":"code","metadata":{"id":"hBSRPK7IVYdq"},"source":[">>> \",\".join('abcd')\n","'a,b,c,d'"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"i3swddTnVaDz"},"source":["abcd 문자열의 각각의 문자 사이에 ','를 삽입한다.\n","\n","join 함수는 문자열뿐만 아니라 앞으로 배울 리스트나 튜플도 입력으로 사용할 수 있다(리스트와 튜플은 곧 배울 내용이니 여기에서는 잠시 눈으로만 살펴보자). join 함수의 입력으로 리스트를 사용하는 예는 다음과 같다."]},{"cell_type":"code","metadata":{"id":"l1fjZy9EVbve"},"source":[">>> \",\".join(['a', 'b', 'c', 'd'])\n","'a,b,c,d'"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"RQpUfrLkVdRN"},"source":["**소문자를 대문자로 바꾸기(upper)**"]},{"cell_type":"code","metadata":{"id":"G0EZtwp9Vg3h"},"source":[">>> a = \"hi\"\n",">>> a.upper()\n","'HI'"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ocGOmyEwViY4"},"source":["upper 함수는 소문자를 대문자로 바꾸어 준다. 만약 문자열이 이미 대문자라면 아무 변화도 일어나지 않을 것이다."]},{"cell_type":"markdown","metadata":{"id":"wDI35jC9VkUk"},"source":["**대문자를 소문자로 바꾸기(lower)**"]},{"cell_type":"code","metadata":{"id":"zM3oqudnVpI-"},"source":[">>> a = \"HI\"\n",">>> a.lower()\n","'hi'"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"4ZLo6BAVVrL5"},"source":["lower 함수는 대문자를 소문자로 바꾸어 준다."]},{"cell_type":"markdown","metadata":{"id":"U8ldoMQqVsxC"},"source":["**왼쪽 공백 지우기(lstrip)**"]},{"cell_type":"code","metadata":{"id":"bi0hhMnmVu5u"},"source":[">>> a = \" hi \"\n",">>> a.lstrip()\n","'hi '"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"s3MJKiWaVwf1"},"source":["문자열 중 가장 왼쪽에 있는 한 칸 이상의 연속된 공백들을 모두 지운다. lstrip에서 l은 left를 의미한다."]},{"cell_type":"markdown","metadata":{"id":"NQxJJBB2Vx4Q"},"source":["**오른쪽 공백 지우기(rstrip)**"]},{"cell_type":"code","metadata":{"id":"vOnkGr3iV1hj"},"source":[">>> a= \" hi \"\n",">>> a.rstrip()\n","' hi'"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"2zqWBx6_V3BF"},"source":["문자열 중 가장 오른쪽에 있는 한 칸 이상의 연속된 공백을 모두 지운다. rstrip에서 r는 right를 의미한다."]},{"cell_type":"markdown","metadata":{"id":"702OlpH4V4tc"},"source":["**양쪽 공백 지우기(strip)**"]},{"cell_type":"code","metadata":{"id":"JuIrSxieV68Z"},"source":[">>> a = \" hi \"\n",">>> a.strip()\n","'hi'"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"GW0GC_mRV8cL"},"source":["문자열 양쪽에 있는 한 칸 이상의 연속된 공백을 모두 지운다."]},{"cell_type":"markdown","metadata":{"id":"OMuoWSYAV9pr"},"source":["**문자열 바꾸기(replace)**"]},{"cell_type":"code","metadata":{"id":"sS_rpgQQV_kD"},"source":[">>> a = \"Life is too short\"\n",">>> a.replace(\"Life\", \"Your leg\")\n","'Your leg is too short'"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"WAp3qh3ZWA-Y"},"source":["replace(바뀌게 될 문자열, 바꿀 문자열)처럼 사용해서 문자열 안의 특정한 값을 다른 값으로 치환해 준다."]},{"cell_type":"markdown","metadata":{"id":"nBNsg2TKWCBi"},"source":["**문자열 나누기(split)**"]},{"cell_type":"code","metadata":{"id":"k-Uu_sgTWFnD"},"source":[">>> a = \"Life is too short\"\n",">>> a.split()\n","['Life', 'is', 'too', 'short']\n",">>> b = \"a:b:c:d\"\n",">>> b.split(':')\n","['a', 'b', 'c', 'd']"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"VV-dnDeqWHP_"},"source":["split 함수는 a.split()처럼 괄호 안에 아무 값도 넣어 주지 않으면 공백(스페이스, 탭, 엔터 등)을 기준으로 문자열을 나누어 준다. 만약 b.split(':')처럼 괄호 안에 특정 값이 있을 경우에는 괄호 안의 값을 구분자로 해서 문자열을 나누어 준다. 이렇게 나눈 값은 리스트에 하나씩 들어가게 된다. ['Life', 'is', 'too', 'short']나 ['a', 'b', 'c', 'd']가 리스트인데 02-3에서 자세히 알아볼 것이니 여기에서는 너무 신경 쓰지 않아도 된다.\n","\n","위에서 소개한 문자열 관련 함수는 문자열 처리에서 사용 빈도가 매우 높고 유용하다. 이 외에도 몇 가지가 더 있지만 자주 사용되지는 않는다."]},{"cell_type":"markdown","metadata":{"id":"afZHfp0Xb3ro"},"source":["리스트를 만들 때는 위에서 보는 것과 같이 대괄호([ ])로 감싸 주고 각 요솟값은 쉼표(,)로 구분해 준다."]},{"cell_type":"code","metadata":{"id":"cQrUyfDcb4E1"},"source":["리스트명 = [요소1, 요소2, 요소3, ...]"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"zaXii-6db6wd"},"source":["여러 가지 리스트의 생김새를 살펴보면 다음과 같다."]},{"cell_type":"code","metadata":{"id":"HNZEN7iPb8hP"},"source":[">>> a = []\n",">>> b = [1, 2, 3]\n",">>> c = ['Life', 'is', 'too', 'short']\n",">>> d = [1, 2, 'Life', 'is']\n",">>> e = [1, 2, ['Life', 'is']]"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"DV3J7Cmyb_BF"},"source":["리스트는 a처럼 아무것도 포함하지 않아 비어 있는 리스트([ ])일 수도 있고 b처럼 숫자를 요솟값으로 가질 수도 있고 c처럼 문자열을 요솟값으로 가질 수도 있다. 또한 d처럼 숫자와 문자열을 함께 요솟값으로 가질 수도 있으며 e처럼 리스트 자체를 요솟값으로 가질 수도 있다. 즉 리스트 안에는 어떠한 자료형도 포함시킬 수 있다.\n","\n","※ 비어 있는 리스트는 a = list()로 생성할 수도 있다."]},{"cell_type":"markdown","metadata":{"id":"gkY6OzJJcBIx"},"source":["**리스트의 인덱싱과 슬라이싱**\n","\n","리스트도 문자열처럼 인덱싱과 슬라이싱이 가능하다. 백문이 불여일견. 말로 설명하는 것보다 직접 예를 실행해 보면서 리스트의 기본 구조를 이해하는 것이 쉽다. 대화형 인터프리터로 따라 하며 확실하게 이해하자."]},{"cell_type":"markdown","metadata":{"id":"HxRllUWwcCp9"},"source":["**리스트의 인덱싱**\n","\n","리스트 역시 문자열처럼 인덱싱을 적용할 수 있다. 먼저 a 변수에 [1, 2, 3] 값을 설정한다."]},{"cell_type":"code","metadata":{"id":"OCtg2FupcFhJ"},"source":[">>> a = [1, 2, 3]\n",">>> a\n","[1, 2, 3]"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"RqFRwXn0cH56"},"source":["a[0]은 리스트 a의 첫 번째 요솟값을 말한다."]},{"cell_type":"code","metadata":{"id":"OrgFAkDWcIgC"},"source":[">>> a[0]\n","1"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"8zLvCx5bcK2l"},"source":["다음 예는 리스트의 첫 번째 요소인 a[0]과 세 번째 요소인 a[2]의 값을 더한 것이다.\n","\n"]},{"cell_type":"code","metadata":{"id":"c1Sk0G_HcNY8"},"source":[">>> a[0] + a[2]\n","4"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"G_JXkY2CcPCu"},"source":["이것은 1 + 3으로 해석되어 값 4를 출력한다.\n","\n","문자열을 공부할 때 이미 살펴보았지만 파이썬은 숫자를 0부터 세기 때문에 a[1]이 리스트 a의 첫 번째 요소가 아니라 a[0]이 리스트 a의 첫 번째 요소임을 명심하자. a[-1]은 문자열에서와 마찬가지로 리스트 a의 마지막 요솟값을 말한다."]},{"cell_type":"code","metadata":{"id":"zQPU7Z5YcQWq"},"source":[">>> a[-1]\n","3"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"f6V4v-kHcSQ-"},"source":["이번에는 다음 예처럼 리스트 a를 숫자 1, 2, 3과 또 다른 리스트인 ['a', 'b', 'c']를 포함하도록 만들어 보자."]},{"cell_type":"code","metadata":{"id":"lBeahzh2cTzz"},"source":[">>> a = [1, 2, 3, ['a', 'b', 'c']]"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Ed5O2y8vcVsY"},"source":["다음 예를 따라 해 보자."]},{"cell_type":"code","metadata":{"id":"7laI3rBPcWDk"},"source":[">>> a[0]\n","1\n",">>> a[-1]\n","['a', 'b', 'c']\n",">>> a[3]\n","['a', 'b', 'c']"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"bDdJuxzHcaBq"},"source":["예상한 대로 a[-1]은 마지막 요솟값 ['a', 'b', 'c']를 나타낸다. a[3]은 리스트 a의 네 번째 요소를 나타내기 때문에 마지막 요소를 나타내는 a[-1]과 동일한 결괏값을 보여 준다.\n","\n","그렇다면 여기에서 리스트 a에 포함된 ['a', 'b', 'c'] 리스트에서 'a' 값을 인덱싱을 사용해 끄집어낼 수 있는 방법은 없을까? 다음 예를 보자."]},{"cell_type":"code","metadata":{"id":"LuFC0q5fcbYR"},"source":[">>> a[-1][0]\n","'a'"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"QS6ParC7cdVd"},"source":["위와 같이 하면 'a'를 끄집어낼 수 있다. a[-1]이 ['a', 'b', 'c'] 리스트라는 것은 이미 말했다. 바로 이 리스트에서 첫 번째 요소를 불러오기 위해 [0]을 붙여 준 것이다.\n","\n","다음 예도 마찬가지 경우이므로 어렵지 않게 이해될 것이다."]},{"cell_type":"code","metadata":{"id":"tcMAKIvSceQU"},"source":[">>> a[-1][1]\n","'b'\n",">>> a[-1][2]\n","'c'"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"doGr5vvSche3"},"source":["**[삼중 리스트에서 인덱싱하기]**\n","\n","조금 복잡하지만 다음 예를 따라 해 보자.\n","\n",">>> a = [1, 2, ['a', 'b', ['Life', 'is']]]\n","리스트 a 안에 ['a', 'b', ['Life', 'is']] 리스트가 포함되어 있고, 그 리스트 안에 다시 ['Life', 'is'] 리스트가 포함되어 있다. 삼중 구조의 리스트이다.\n","\n","이 경우 'Life' 문자열만 끄집어내려면 다음과 같이 해야 한다.\n","\n",">>> a[2][2][0]\n","'Life'\n","위 예는 리스트 a의 세 번째 요소인 리스트 ['a', 'b', ['Life', 'is']]에서 세 번째 요소인 리스트 ['Life', 'is']의 첫 번째 요소를 나타낸다.\n","\n","이렇듯 리스트를 삼중으로 중첩해서 쓰면 혼란스럽기 때문에 자주 사용하지는 않지만 알아두는 것이 좋다."]},{"cell_type":"markdown","metadata":{"id":"WjHNY_KockUb"},"source":["**리스트의 슬라이싱**\n","\n","문자열과 마찬가지로 리스트에서도 슬라이싱 기법을 적용할 수 있다. 슬라이싱은 ‘나눈다’는 뜻이라고 했다.\n","\n","자, 그럼 리스트의 슬라이싱에 대해서 살펴보자."]},{"cell_type":"code","metadata":{"id":"ny54GmUwcosi"},"source":[">>> a = [1, 2, 3, 4, 5]\n",">>> a[0:2]\n","[1, 2]"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"h-bKAnlydDHC"},"source":["앞의 예를 문자열에서 슬라이싱했던 것과 비교해 보자."]},{"cell_type":"code","metadata":{"id":"aSED_TIcdEm9"},"source":[">>> a = \"12345\"\n",">>> a[0:2]\n","'12'"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"mk20zFCrdGJ_"},"source":["2가지가 완전히 동일하게 사용되었음을 눈치챘을 것이다. 문자열에서 했던 것과 사용법이 완전히 동일하다.\n","\n","몇 가지 예를 더 들어 보자."]},{"cell_type":"code","metadata":{"id":"XOk73shSdGfq"},"source":[">>> a = [1, 2, 3, 4, 5]\n",">>> b = a[:2]\n",">>> c = a[2:]\n",">>> b\n","[1, 2]\n",">>> c\n","[3, 4, 5]"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"c0hEBihLdJRe"},"source":["b 변수는 리스트 a의 첫 번째 요소부터 두 번째 요소인 a[1]까지 나타내는 리스트이다. 물론 a[2] 값인 3은 포함되지 않는다. c라는 변수는 리스트 a의 세 번째 요소부터 끝까지 나타내는 리스트이다."]},{"cell_type":"markdown","metadata":{"id":"b6FHKa0adMQe"},"source":["**[중첩된 리스트에서 슬라이싱하기]**\n","\n","리스트가 포함된 중첩 리스트 역시 슬라이싱 방법은 똑같이 적용된다."]},{"cell_type":"code","metadata":{"id":"Li1euwMHdPR1"},"source":[">>> a = [1, 2, 3, ['a', 'b', 'c'], 4, 5]\n",">>> a[2:5]\n","[3, ['a', 'b', 'c'], 4]\n",">>> a[3][:2]\n","['a', 'b']"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"vdX1uP_hdQs-"},"source":["위 예에서 a[3]은 ['a', 'b', 'c']를 나타낸다. 따라서 a[3][:2]는 ['a', 'b', 'c']의 첫 번째 요소부터 세 번째 요소 직전까지의 값, 즉 ['a', 'b']를 나타내는 리스트가 된다."]},{"cell_type":"markdown","metadata":{"id":"DwV9WfE-dSus"},"source":["**리스트 연산하기**\n","\n","리스트 역시 + 기호를 사용해서 더할 수 있고 * 기호를 사용해서 반복할 수 있다. 문자열과 마찬가지로 리스트에서도 되는지 직접 확인해 보자."]},{"cell_type":"markdown","metadata":{"id":"Eh5L0IE_dYBS"},"source":["**리스트 더하기(+)**"]},{"cell_type":"code","metadata":{"id":"EUMh2ADVdYu2"},"source":[">>> a = [1, 2, 3]\n",">>> b = [4, 5, 6]\n",">>> a + b\n","[1, 2, 3, 4, 5, 6]"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Le6ZfnWqdgKn"},"source":["리스트 사이에서 + 기호는 2개의 리스트를 합치는 기능을 한다. 문자열에서 \"abc\" + \"def\" = \"abcdef\"가 되는 것과 같은 이치이다."]},{"cell_type":"markdown","metadata":{"id":"ckFKEYL0dh7D"},"source":["**리스트 반복하기(*)**"]},{"cell_type":"code","metadata":{"id":"SovfvYNKdpRs"},"source":[">>> a = [1, 2, 3]\n",">>> a * 3\n","[1, 2, 3, 1, 2, 3, 1, 2, 3]"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Fk2H9qbjdqrj"},"source":["위에서 볼 수 있듯이 [1, 2, 3] 리스트가 세 번 반복되어 새로운 리스트를 만들어낸다. 문자열에서 \"abc\" * 3 = \"abcabcabc\" 가 되는 것과 같은 이치이다."]},{"cell_type":"markdown","metadata":{"id":"446sqAIddsaH"},"source":["**리스트 길이구하기**\n","\n","리스트 길이를 구하기 위해서는 다음처럼 len 함수를 사용해야 한다."]},{"cell_type":"code","metadata":{"id":"658eSQNpdu6l"},"source":[">>> a = [1, 2, 3]\n",">>> len(a)\n","3"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"rwgzbs-VdwZb"},"source":["len 함수는 문자열, 리스트 외에 앞으로 배울 튜플과 딕셔너리에도 사용할 수 있는 함수이다. 실습에서 자주 사용하니 잘 기억해 두자."]},{"cell_type":"markdown","metadata":{"id":"tyGRdVdbdxyb"},"source":["**[초보자가 범하기 쉬운 리스트 연산 오류]**\n","\n","다음 소스 코드를 입력했을 때 결괏값은 어떻게 나올까?"]},{"cell_type":"code","metadata":{"id":"UbnZahy9d1UU"},"source":[">>> a = [1, 2, 3]\n",">>> a[2] + \"hi\""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"rODVzyq7d1sq"},"source":["a[2]의 값인 3과 문자열 hi가 더해져서 3hi가 출력될 것이라고 생각할 수 있다. 하지만 다음 결과를 보자. 형 오류(TypeError)가 발생했다. 오류의 원인은 무엇일까?"]},{"cell_type":"code","metadata":{"id":"lFJjT6Ard45b"},"source":["Traceback (most recent call last):\n","  File \"<stdin>\", line 1, in <module>\n","TypeError: unsupported operand type(s) for +: 'int' and 'str'"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"T6EvdJKDd6No"},"source":["a[2]에 저장된 값은 3이라는 정수인데 \"hi\"는 문자열이다. 정수와 문자열은 당연히 서로 더할 수 없기 때문에 형 오류가 발생한 것이다.\n","\n","만약 숫자와 문자열을 더해서 '3hi'처럼 만들고 싶다면 숫자 3을 문자 '3'으로 바꾸어 주어야 한다. 다음과 같이 할 수 있다."]},{"cell_type":"code","metadata":{"id":"o3grLcOVd9HW"},"source":[">>>str(a[2]) + \"hi\""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"6dDhYSV1d_G7"},"source":["str 함수는 정수나 실수를 문자열의 형태로 바꾸어 주는 파이썬의 내장 함수이다."]},{"cell_type":"markdown","metadata":{"id":"bLcW-A7HeEhM"},"source":["**리스트의 수정과 삭제**\n","\n","리스트는 값을 수정하거나 삭제할 수 있다."]},{"cell_type":"markdown","metadata":{"id":"YR1AIhX5eHnk"},"source":["**리스트에서 값 수정하기**"]},{"cell_type":"code","metadata":{"id":"y-Ql0uCmeIWf"},"source":[">>> a = [1, 2, 3]\n",">>> a[2] = 4\n",">>> a\n","[1, 2, 4]"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"7-sDM8-keJ7a"},"source":["a[2]의 요솟값 3이 4로 바뀌었다."]},{"cell_type":"markdown","metadata":{"id":"lsK-KTzqeLH4"},"source":["**del 함수 사용해 리스트 요소 삭제하기**"]},{"cell_type":"code","metadata":{"id":"cvnF7MJKeOZD"},"source":[">>> a = [1, 2, 3]\n",">>> del a[1]\n",">>> a\n","[1, 3]"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ZmQ_8vw3epzE"},"source":["del a[x]는 x번째 요솟값을 삭제한다. 여기에서는 a 리스트에서 a[1]을 삭제하는 방법을 보여준다. del 함수는 파이썬이 자체적으로 가지고 있는 삭제 함수이며 다음과 같이 사용한다."]},{"cell_type":"code","metadata":{"id":"vk8Xf4vAernL"},"source":["del 객체"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"tBGB-TgTesB9"},"source":["※ 객체란 파이썬에서 사용되는 모든 자료형을 말한다.\n","\n","다음처럼 슬라이싱 기법을 사용하여 리스트의 요소 여러 개를 한꺼번에 삭제할 수도 있다."]},{"cell_type":"code","metadata":{"id":"KYSrS5tZevE0"},"source":[">>> a = [1, 2, 3, 4, 5]\n",">>> del a[2:]\n",">>> a\n","[1, 2]"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"8WT4IMT8ewje"},"source":["a[2:]에 해당하는 리스트의 요소들이 삭제되었다.\n","\n","리스트의 요소를 삭제하는 방법에는 2가지가 더 있다. 그것은 리스트의 remove와 pop 함수를 사용하는 방법인데 이것에 대해서는 바로 이어지는 리스트 관련 함수에서 설명한다."]},{"cell_type":"markdown","metadata":{"id":"rGd4wV5meyr_"},"source":["**리스트 관련 함수들**\n","문자열과 마찬가지로 리스트 변수 이름 뒤에 '.'를 붙여서 여러 가지 리스트 관련 함수를 사용할 수 있다. 유용하게 사용되는 리스트 관련 함수 몇 가지에 대해서만 알아보기로 하자.\n","\n","**리스트에 요소 추가(append)**\n","사전에서 검색해 보면 \"덧붙이다, 첨부하다\"라는 뜻이 있다. 이 뜻을 안다면 다음 예가 바로 이해될 것이다. append(x)는 리스트의 맨 마지막에 x를 추가하는 함수이다."]},{"cell_type":"code","metadata":{"id":"0U_OgDUge6j3"},"source":[">>> a = [1, 2, 3]\n",">>> a.append(4)\n",">>> a\n","[1, 2, 3, 4]"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ONSOx5gPe_gE"},"source":["리스트 안에는 어떤 자료형도 추가할 수 있다.\n","\n","다음 예는 리스트에 다시 리스트를 추가한 결과이다."]},{"cell_type":"code","metadata":{"id":"uOibH0IPe_-v"},"source":[">>> a.append([5,6])\n",">>> a\n","[1, 2, 3, 4, [5, 6]]"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"lZeuBGH7fCkg"},"source":["**리스트 정렬(sort)**\n","sort 함수는 리스트의 요소를 순서대로 정렬해 준다."]},{"cell_type":"code","metadata":{"id":"XvxSzfQyfGW9"},"source":[">>> a = [1, 4, 3, 2]\n",">>> a.sort()\n",">>> a\n","[1, 2, 3, 4]\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"YEq7POMsfIG7"},"source":["문자 역시 알파벳 순서로 정렬할 수 있다.\n","\n"]},{"cell_type":"code","metadata":{"id":"6NLcU8F_fKLn"},"source":[">>> a = ['a', 'c', 'b']\n",">>> a.sort()\n",">>> a\n","['a', 'b', 'c']"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"pZHzBiOgfMYx"},"source":["**리스트 뒤집기(reverse)**\n","\n","reverse 함수는 리스트를 역순으로 뒤집어 준다. 이때 리스트 요소들을 순서대로 정렬한 다음 다시 역순으로 정렬하는 것이 아니라 그저 현재의 리스트를 그대로 거꾸로 뒤집는다."]},{"cell_type":"code","metadata":{"id":"UcbCvXdkfO1r"},"source":[">>> a = ['a', 'c', 'b']\n",">>> a.reverse()\n",">>> a\n","['b', 'c', 'a']"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"evKCC926fRD2"},"source":["**위치 반환(index)**\n","\n","index(x) 함수는 리스트에 x 값이 있으면 x의 위치 값을 돌려준다."]},{"cell_type":"code","metadata":{"id":"a7WAxhEzfTDI"},"source":[">>> a = [1,2,3]\n",">>> a.index(3)\n","2\n",">>> a.index(1)\n","0"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"vNmix-YCfV-L"},"source":["위 예에서 리스트 a에 있는 숫자 3의 위치는 a[2]이므로 2를 돌려주고, 숫자 1의 위치는 a[0]이므로 0을 돌려준다.\n","\n","다음 예에서 값 0은 a 리스트에 존재하지 않기 때문에 값 오류(ValueError)가 발생한다."]},{"cell_type":"code","metadata":{"id":"gb_Vg3f4fX2y"},"source":[">>> a.index(0)\n","\n","Traceback (most recent call last):\n","  File \"<stdin>\", line 1, in <module>\n","ValueError: 0 is not in list"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"rMUN51JAfa2Y"},"source":["**리스트에 요소 삽입(insert)**\n","\n","insert(a, b)는 리스트의 a번째 위치에 b를 삽입하는 함수이다. 파이썬에서는 숫자를 0부터 센다는 것을 반드시 기억하자."]},{"cell_type":"code","metadata":{"id":"3SNqv-AGfd11"},"source":[">>> a = [1, 2, 3]\n",">>> a.insert(0, 4)\n",">>> a\n","[4, 1, 2, 3]"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"vI-Teb9OffVY"},"source":["위 예는 0번째 자리, 즉 첫 번째 요소(a[0]) 위치에 값 4를 삽입하라는 뜻이다."]},{"cell_type":"code","metadata":{"id":"NGmS6sgyfftD"},"source":[">>> a.insert(3, 5)\n",">>> a\n","[4, 1, 2, 5, 3]"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"mTblDnn7fiaE"},"source":["위 예는 리스트 a의 a[3], 즉 네 번째 요소 위치에 값 5를 삽입하라는 뜻이다.\n","\n","**리스트 요소 제거(remove)**\n","\n","remove(x)는 리스트에서 첫 번째로 나오는 x를 삭제하는 함수이다."]},{"cell_type":"code","metadata":{"id":"VzbfUssufkJ4"},"source":[">>> a = [1, 2, 3, 1, 2, 3]\n",">>> a.remove(3)\n",">>> a\n","[1, 2, 1, 2, 3]"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"WSDYaSsbfmde"},"source":["a가 3이라는 값을 2개 가지고 있을 경우 첫 번째 3만 제거되는 것을 알 수 있다."]},{"cell_type":"code","metadata":{"id":"cx07_eipfn9A"},"source":[">>> a.remove(3)\n",">>> a\n","[1, 2, 1, 2]"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"516pcLZ-fp1Z"},"source":["remove(3)을 한 번 더 실행하면 다시 3이 삭제된다.\n","\n","리스트 요소 끄집어내기(pop)\n","pop()은 리스트의 맨 마지막 요소를 돌려주고 그 요소는 삭제한다."]},{"cell_type":"code","metadata":{"id":"2AOtdH9DfrIg"},"source":[">>> a = [1,2,3]\n",">>> a.pop()\n","3\n",">>> a\n","[1, 2]"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"jF7ZUrTcfymw"},"source":["a 리스트 [1, 2, 3]에서 3을 끄집어내고 최종적으로 [1, 2]만 남는 것을 볼 수 있다.\n","\n","pop(x)는 리스트의 x번째 요소를 돌려주고 그 요소는 삭제한다."]},{"cell_type":"code","metadata":{"id":"V204gTjof0Os"},"source":[">>> a = [1,2,3]\n",">>> a.pop(1)\n","2\n",">>> a\n","[1, 3]"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"1-1qAJUzf0uy"},"source":["a.pop(1)은 a[1]의 값을 끄집어낸다. 다시 a를 출력해 보면 끄집어낸 값이 삭제된 것을 확인할 수 있다.\n","\n","**리스트에 포함된 요소 x의 개수 세기(count)**\n","\n","count(x)는 리스트 안에 x가 몇 개 있는지 조사하여 그 개수를 돌려주는 함수이다."]},{"cell_type":"code","metadata":{"id":"Jg-Xd_9zf40u"},"source":[">>> a = [1,2,3,1]\n",">>> a.count(1)\n","2"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Zb7PXOU3f6oj"},"source":["1이라는 값이 리스트 a에 2개 들어 있으므로 2를 돌려준다.\n","\n","**리스트 확장(extend)**\n","\n","extend(x)에서 x에는 리스트만 올 수 있으며 원래의 a 리스트에 x 리스트를 더하게 된다."]},{"cell_type":"code","metadata":{"id":"t5HICxKOf_pB"},"source":[">>> a = [1,2,3]\n",">>> a.extend([4,5])\n",">>> a\n","[1, 2, 3, 4, 5]\n",">>> b = [6, 7]\n",">>> a.extend(b)\n",">>> a\n","[1, 2, 3, 4, 5, 6, 7]"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"l23AXg6bgADx"},"source":["a.extend([4, 5])는 a += [4, 5]와 동일하다.\n","\n"]},{"cell_type":"code","metadata":{"id":"Q0b4mxsdg4Cx"},"source":[">>> t1 = ()\n",">>> t2 = (1,)\n",">>> t3 = (1, 2, 3)\n",">>> t4 = 1, 2, 3\n",">>> t5 = ('a', 'b', ('ab', 'cd'))"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"92I7hbvHg7J9"},"source":["리스트와 모습은 거의 비슷하지만 튜플에서는 리스트와 다른 2가지 차이점을 찾아볼 수 있다. t2 = (1,)처럼 단지 1개의 요소만을 가질 때는 요소 뒤에 콤마(,)를 반드시 붙여야 한다는 것과 t4 = 1, 2, 3처럼 괄호( )를 생략해도 무방하다는 점이다.\n","\n","얼핏 보면 튜플과 리스트는 비슷한 역할을 하지만 프로그래밍을 할 때 튜플과 리스트는 구별해서 사용하는 것이 유리하다. 튜플과 리스트의 가장 큰 차이는 값을 변화시킬 수 있는가 여부이다. 즉 리스트의 항목 값은 변화가 가능하고 튜플의 항목 값은 변화가 불가능하다. 따라서 프로그램이 실행되는 동안 그 값이 항상 변하지 않기를 바란다거나 값이 바뀔까 걱정하고 싶지 않다면 주저하지 말고 튜플을 사용해야 한다. 이와는 반대로 수시로 그 값을 변화시켜야할 경우라면 리스트를 사용해야 한다. 실제 프로그램에서는 값이 변경되는 형태의 변수가 훨씬 많기 때문에 평균적으로 튜플보다는 리스트를 더 많이 사용한다."]},{"cell_type":"markdown","metadata":{"id":"_R6Smoobg7no"},"source":["**튜플의 요소값을 지우거나 변경하려고 하면 어떻게 될까?**\n","\n","앞에서 설명했듯이 튜플의 요솟값은 한 번 정하면 지우거나 변경할 수 없다. 다음에 소개하는 두 예를 살펴보면 무슨 말인지 알 수 있을 것이다.\n","\n","**1. 튜플 요솟값을 삭제하려 할 때**"]},{"cell_type":"code","metadata":{"id":"u9jREQHXhA04"},"source":[">>> t1 = (1, 2, 'a', 'b')\n",">>> del t1[0]\n","\n","Traceback (most recent call last):\n","  File \"<stdin>\", line 1, in <module>\n","TypeError: 'tuple' object doesn't support item deletion"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"d3nqKACIhDj1"},"source":["튜플의 요소를 리스트처럼 del 함수로 지우려고 한 예이다. 튜플은 요소를 지우는 행위가 지원되지 않는다는 메시지를 확인할 수 있다.\n","\n","**2. 튜플 요솟값을 변경하려 할 때**"]},{"cell_type":"code","metadata":{"id":"7JMk1IV1hGLB"},"source":[">>> t1 = (1, 2, 'a', 'b')\n",">>> t1[0] = 'c'\n","\n","Traceback (most recent call last):\n","  File \"<stdin>\", line 1, in <module>\n","TypeError: 'tuple' object does not support item assignment"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"WrDhaACrhImH"},"source":["튜플의 요솟값을 변경하려고 해도 마찬가지로 오류가 발생하는 것을 확인할 수 있다.\n","\n","**튜플 다루기**\n","튜플은 값을 변화시킬 수 없다는 점만 제외하면 리스트와 완전히 동일하므로 간단하게만 살펴보겠다. 다음 예제는 서로 연관되어 있으므로 차례대로 수행해 보기 바란다.\n","\n","**인덱싱하기**"]},{"cell_type":"code","metadata":{"id":"lcl6sH_PhLiI"},"source":[">>> t1 = (1, 2, 'a', 'b')\n",">>> t1[0]\n","1\n",">>> t1[3]\n","'b'"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"u1d0DNSohNGZ"},"source":["문자열, 리스트와 마찬가지로 t1[0], t1[3]처럼 인덱싱이 가능하다.\n","\n","**슬라이싱하기**"]},{"cell_type":"code","metadata":{"id":"oBNDSqfRhP62"},"source":[">>> t1 = (1, 2, 'a', 'b')\n",">>> t1[1:]\n","(2, 'a', 'b')"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"5fsBlSJZhRXq"},"source":["t1[1]부터 튜플의 마지막 요소까지 슬라이싱하는 예이다.\n","\n","**튜플 더하기**"]},{"cell_type":"code","metadata":{"id":"XovJUV0PhTce"},"source":[">>> t1 = (1, 2, 'a', 'b')\n",">>> t2 = (3, 4)\n",">>> t1 + t2\n","(1, 2, 'a', 'b', 3, 4)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"oKuB8M6EhUrD"},"source":["튜플을 더하는 방법을 보여 주는 예이다.\n","\n","**튜플 곱하기**"]},{"cell_type":"code","metadata":{"id":"m0JS7pOfhXPQ"},"source":[">>> t2 = (3, 4)\n",">>> t2 * 3\n","(3, 4, 3, 4, 3, 4)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Vp0BSGwLhY4P"},"source":["튜플의 곱하기(반복) 예를 보여 준다.\n","\n","**튜플 길이 구하기**"]},{"cell_type":"code","metadata":{"id":"yzZcjwD0hbrf"},"source":[">>> t1 = (1, 2, 'a', 'b')\n",">>> len(t1)\n","4\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"_G_wi5tRhdpL"},"source":["튜플의 길이를 구하는 예이다."]},{"cell_type":"code","metadata":{"id":"d949bZjqht9c"},"source":["{Key1:Value1, Key2:Value2, Key3:Value3, ...}"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"OuniRVIQhwou"},"source":["**Key**와 **Value**의 쌍 여러 개가 { }로 둘러싸여 있다. 각각의 요소는 Key : Value 형태로 이루어져 있고 쉼표(,)로 구분되어 있다.\n","\n","※ Key에는 변하지 않는 값을 사용하고, Value에는 변하는 값과 변하지 않는 값 모두 사용할 수 있다.\n","\n","다음 딕셔너리 예를 살펴보자."]},{"cell_type":"code","metadata":{"id":"TECUb4TJh5Gu"},"source":[">>> dic = {'name':'pey', 'phone':'0119993323', 'birth': '1118'}"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"H_ex3yhfh8FU"},"source":["위에서 Key는 각각 'name', 'phone', 'birth'이고, 각각의 Key에 해당하는 Value는 'pey', '0119993323', '1118'이 된다.\n","\n","**딕셔너리 dic의 정보**\n","\n","key\t  value\n","name\t pey\n","phone\t 01199993323\n","birth\t 1118\n","\n","다음 예는 Key로 정수 값 1, Value로 문자열 'hi'를 사용한 예이다."]},{"cell_type":"code","metadata":{"id":"9qa0K9A7iFJe"},"source":[">>> a = {1: 'hi'}"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"YM9t1Ms4iGUy"},"source":["또한 다음 예처럼 Value에 리스트도 넣을 수 있다."]},{"cell_type":"code","metadata":{"id":"_GXAOCJniHpx"},"source":[">>> a = { 'a': [1,2,3]}"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"jaujrpPDiI9D"},"source":["**딕셔너리 쌍 추가, 삭제하기**\n","딕셔너리 쌍을 추가하는 방법과 삭제하는 방법을 살펴보자. 먼저 딕셔너리에 쌍을 추가하는 다음 예를 함께 따라 해 보자.\n","\n","**딕셔너리 쌍 추가하기**"]},{"cell_type":"code","metadata":{"id":"n3Jj-oSmiLH6"},"source":[">>> a = {1: 'a'}\n",">>> a[2] = 'b'\n",">>> a\n","{1: 'a', 2: 'b'}"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"X3BDbBf6iN2b"},"source":["{1: 'a'} 딕셔너리에 a[2] = 'b'와 같이 입력하면 딕셔너리 a에 Key와 Value가 각각 2와 'b'인 2 : 'b'라는 딕셔너리 쌍이 추가된다."]},{"cell_type":"code","metadata":{"id":"oAX2MDq1iPMh"},"source":[">>> a['name'] = 'pey'\n",">>> a\n","{1: 'a', 2: 'b', 'name': 'pey'}"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"3lNtP0cdiRv6"},"source":["딕셔너리 a에 'name': 'pey'라는 쌍이 추가되었다."]},{"cell_type":"code","metadata":{"id":"bB-gI-2WiR_N"},"source":[">>> a[3] = [1,2,3]\n",">>> a\n","{1: 'a', 2: 'b', 'name': 'pey', 3: [1, 2, 3]}"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"V82cwtzIiVrU"},"source":["Key는 3, Value는 [1, 2, 3]을 가지는 한 쌍이 또 추가되었다.\n","\n","딕셔너리 요소 삭제하기"]},{"cell_type":"code","metadata":{"id":"Oj23ISoJiXCA"},"source":[">>> del a[1]\n",">>> a\n","{2: 'b', 'name': 'pey', 3: [1, 2, 3]}"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ZBirUoabiYYy"},"source":["위 예제는 딕셔너리 요소를 지우는 방법을 보여 준다. del 함수를 사용해서 del a[key]처럼 입력하면 지정한 Key에 해당하는 {key : value} 쌍이 삭제된다.\n","\n","**딕셔너리를 사용하는 방법**\n","\"딕셔너리는 주로 어떤 것을 표현하는 데 사용할까?\"라는 의문이 들 것이다. 예를 들어 4명의 사람이 있다고 가정하고, 각자의 특기를 표현할 수 있는 좋은 방법에 대해서 생각해 보자. 리스트나 문자열로는 표현하기가 상당히 까다로울 것이다. 하지만 파이썬의 딕셔너리를 사용한다면 이 상황을 표현하기가 정말 쉽다. 다음 예를 보자."]},{"cell_type":"code","metadata":{"id":"2voQxlFriasu"},"source":["{\"김연아\":\"피겨스케이팅\", \"류현진\":\"야구\", \"박지성\":\"축구\", \"귀도\":\"파이썬\"}"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"KeS-RR8qicEz"},"source":["사람 이름과 특기를 한 쌍으로 하는 딕셔너리이다. 정말 간편하지 않은가?\n","\n","지금껏 우리는 딕셔너리를 만드는 방법에 대해서만 살펴보았는데 딕셔너리를 제대로 활용하기 위해서는 알아야 할 것이 더 있다. 이제부터 하나씩 알아보자.\n","\n","**딕셔너리에서 Key 사용해 Value 얻기**\n","다음 예를 살펴보자."]},{"cell_type":"code","metadata":{"id":"1CtEZExtiinn"},"source":[">>> grade = {'pey': 10, 'julliet': 99}\n",">>> grade['pey']\n","10\n",">>> grade['julliet']\n","99"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"zNiblsGMiksJ"},"source":["리스트나 튜플, 문자열은 요솟값을 얻고자 할 때 인덱싱이나 슬라이싱 기법 중 하나를 사용했다. 하지만 딕셔너리는 단 한 가지 방법뿐이다. 바로 Key를 사용해서 Value를 구하는 방법이다. 위 예에서 'pey'라는 Key의 Value를 얻기 위해 grade['pey']를 사용한 것처럼 어떤 Key의 Value를 얻기 위해서는 딕셔너리변수이름[Key]를 사용한다.\n","\n","몇 가지 예를 더 보자."]},{"cell_type":"code","metadata":{"id":"9XEpOYcPilbo"},"source":[">>> a = {1:'a', 2:'b'}\n",">>> a[1]\n","'a'\n",">>> a[2]\n","'b'"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Ar7t7COjim7p"},"source":["먼저 a 변수에 {1:'a', 2:'b'} 딕셔너리를 대입하였다. 위 예에서 볼 수 있듯이 a[1]은 'a' 값을 돌려준다. 여기에서 a[1]이 의미하는 것은 리스트나 튜플의 a[1]과는 전혀 다르다. 딕셔너리 변수에서 [ ] 안의 숫자 1은 두 번째 요소를 뜻하는 것이 아니라 Key에 해당하는 1을 나타낸다. 앞에서도 말했듯이 딕셔너리는 리스트나 튜플에 있는 인덱싱 방법을 적용할 수 없다. 따라서 a[1]은 딕셔너리 {1:'a', 2:'b'}에서 Key가 1인 것의 Value인 'a'를 돌려주게 된다. a[2] 역시 마찬가지이다.\n","\n","이번에는 a라는 변수에 앞의 예에서 사용한 딕셔너리의 Key와 Value를 뒤집어 놓은 딕셔너리를 대입해 보자."]},{"cell_type":"code","metadata":{"id":"ak2_7biwiozn"},"source":[">>> a = {'a':1, 'b':2}\n",">>> a['a']\n","1\n",">>> a['b']\n","2"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"X7WYZqd3iptf"},"source":["역시 a['a'], a['b']처럼 Key를 사용해서 Value를 얻을 수 있다. 정리하면, 딕셔너리 a는 a[Key]로 입력해서 Key에 해당하는 Value를 얻는다.\n","\n","다음 예는 이전에 한 번 언급한 딕셔너리인데 Key를 사용해서 Value를 얻는 방법을 잘 보여 준다."]},{"cell_type":"code","metadata":{"id":"iRNDn6cIiqzt"},"source":[">>> dic = {'name':'pey', 'phone':'0119993323', 'birth': '1118'}\n",">>> dic['name']\n","'pey'\n",">>> dic['phone']\n","'0119993323'\n",">>> dic['birth']\n","'1118'"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"CuB4wHMUitJB"},"source":["**딕셔너리 만들 때 주의할 사항**\n","\n","먼저 딕셔너리에서 Key는 고유한 값이므로 중복되는 Key 값을 설정해 놓으면 하나를 제외한 나머지 것들이 모두 무시된다는 점을 주의해야 한다. 다음 예에서 볼 수 있듯이 동일한 Key가 2개 존재할 경우 1:'a' 쌍이 무시된다."]},{"cell_type":"code","metadata":{"id":"2wX00XQwiwvX"},"source":[">>> a = {1:'a', 1:'b'}\n",">>> a\n","{1: 'b'}"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"vAyMjx_liyC4"},"source":["이렇게 Key가 중복되었을 때 1개를 제외한 나머지 Key:Value 값이 모두 무시되는 이유는 Key를 통해서 Value를 얻는 딕셔너리의 특징에서 비롯된다. 즉 동일한 Key가 존재하면 어떤 Key에 해당하는 Value를 불러야 할지 알 수 없기 때문이다.\n","\n","또 한 가지 주의해야 할 사항은 Key에 리스트는 쓸 수 없다는 것이다. 하지만 튜플은 Key로 쓸 수 있다. 딕셔너리의 Key로 쓸 수 있느냐 없느냐는 Key가 변하는 값인지 변하지 않는 값인지에 달려 있다. 리스트는 그 값이 변할 수 있기 때문에 Key로 쓸 수 없다. 다음 예처럼 리스트를 Key로 설정하면 리스트를 키 값으로 사용할 수 없다는 오류가 발생한다."]},{"cell_type":"code","metadata":{"id":"ZwKyPGZdiyvZ"},"source":[">>> a = {[1,2] : 'hi'}\n","Traceback (most recent call last):\n","  File \"<stdin>\", line 1, in <module>\n","TypeError: unhashable type: 'list'"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"LxdJsNr-i1MJ"},"source":["따라서 딕셔너리의 Key 값으로 딕셔너리를 사용할 수 없음은 당연하다. 단 Value에는 변하는 값이든 변하지 않는 값이든 상관없이 아무 값이나 넣을 수 있다.\n","\n","**딕셔너리 관련 함수들**\n","딕셔너리를 자유자재로 사용하기 위해 딕셔너리가 자체적으로 가지고 있는 관련 함수를 사용해 보자.\n","\n","**Key 리스트 만들기(keys)**"]},{"cell_type":"code","metadata":{"id":"pIDdJj1yi7od"},"source":[">>> a = {'name': 'pey', 'phone': '0119993323', 'birth': '1118'}\n",">>> a.keys()\n","dict_keys(['name', 'phone', 'birth'])\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"yh5uS8V8i-Nb"},"source":["a.keys()는 딕셔너리 a의 Key만을 모아서 dict_keys 객체를 돌려준다.\n","\n","**[파이썬 3.0 이후 버전의 keys 함수, 어떻게 달라졌나?]**\n","\n","파이썬 2.7 버전까지는 a.keys() 함수를 호출할 때 반환 값으로 dict_keys가 아닌 리스트를 돌려준다. 리스트를 돌려주기 위해서는 메모리 낭비가 발생하는데 파이썬 3.0 이후 버전에서는 이러한 메모리 낭비를 줄이기 위해 dict_keys 객체를 돌려준다. 다음에 소개할 dict_values, dict_items 역시 파이썬 3.0 이후 버전에서 추가된 것들이다. 만약 3.0 이후 버전에서 반환 값으로 리스트가 필요한 경우에는 list(a.keys())를 사용하면 된다. dict_keys, dict_values, dict_items 등은 리스트로 변환하지 않더라도 기본적인 반복(iterate) 구문(예: for문)을 실행할 수 있다.\n","\n","dict_keys 객체는 다음과 같이 사용할 수 있다. 리스트를 사용하는 것과 차이가 없지만, 리스트 고유의 append, insert, pop, remove, sort 함수는 수행할 수 없다."]},{"cell_type":"code","metadata":{"id":"RHD_W_UpjJ1E"},"source":[">>> for k in a.keys():\n","...    print(k)\n","...\n","name\n","phone\n","birth"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"4uvviL9BjMQS"},"source":["※ print(k)를 입력할 때 들여쓰기를 하지 않으면 오류가 발생하니 주의하자. for문 등 반복 구문에 대해서는 03장에서 자세히 살펴본다.\n","\n","dict_keys 객체를 리스트로 변환하려면 다음과 같이 하면 된다."]},{"cell_type":"code","metadata":{"id":"8NE5y_kQjN_F"},"source":[">>> list(a.keys())\n","['name', 'phone', 'birth']"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"dnLHtVAyjP3Y"},"source":["**Value 리스트 만들기(values)**"]},{"cell_type":"code","metadata":{"id":"v7U0FQHrjRjY"},"source":[">>> a.values()\n","dict_values(['pey', '0119993323', '1118'])"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"bqvts4pajWf8"},"source":[">>> a.values()\n","dict_values(['pey', '0119993323', '1118'])"]},{"cell_type":"markdown","metadata":{"id":"M9Qof_j3jYPe"},"source":["**Key, Value 쌍 얻기(items)**"]},{"cell_type":"code","metadata":{"id":"Ntj7k2x2jb44"},"source":[">>> a.items()\n","dict_items([('name', 'pey'), ('phone', '0119993323'), ('birth', '1118')])"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"08NM3kyrjgFk"},"source":["items 함수는 Key와 Value의 쌍을 튜플로 묶은 값을 dict_items 객체로 돌려준다. dict_values 객체와 dict_items 객체 역시 dict_keys 객체와 마찬가지로 리스트를 사용하는 것과 동일하게 사용할 수 있다.\n","\n","**Key: Value 쌍 모두 지우기(clear)**"]},{"cell_type":"code","metadata":{"id":"1QAu3D5Cjirv"},"source":[">>> a.clear()\n",">>> a\n","{}"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"SOJ0o5YxjkOZ"},"source":["clear 함수는 딕셔너리 안의 모든 요소를 삭제한다. 빈 리스트를 [ ], 빈 튜플을 ( )로 표현하는 것과 마찬가지로 빈 딕셔너리도 { }로 표현한다.\n","\n","**Key로 Value얻기(get)**"]},{"cell_type":"code","metadata":{"id":"N1ntzOq_jng8"},"source":[">>> a = {'name':'pey', 'phone':'0119993323', 'birth': '1118'}\n",">>> a.get('name')\n","'pey'\n",">>> a.get('phone')\n","'0119993323'"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"wJotdTcrjpAN"},"source":["get(x) 함수는 x라는 Key에 대응되는 Value를 돌려준다. 앞에서 살펴보았듯이 a.get('name')은 a['name']을 사용했을 때와 동일한 결괏값을 돌려받는다.\n","\n","다만 다음 예제에서 볼 수 있듯이 a['nokey']처럼 존재하지 않는 키(nokey)로 값을 가져오려고 할 경우 a['nokey']는 Key 오류를 발생시키고 a.get('nokey')는 None을 돌려준다는 차이가 있다. 어떤것을 사용할지는 여러분의 선택이다.\n","\n","※ 여기에서 None은 \"거짓\"이라는 뜻이라고만 알아두자."]},{"cell_type":"code","metadata":{"id":"wngzQ5sqjqa3"},"source":[">>> a = {'name':'pey', 'phone':'0119993323', 'birth': '1118'}\n",">>> print(a.get('nokey'))\n","None\n",">>> print(a['nokey'])\n","Traceback (most recent call last):\n","  File \"<stdin>\", line 1, in <module>\n","KeyError: 'nokey'"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"sWcFYYSWjsLK"},"source":["딕셔너리 안에 찾으려는 Key 값이 없을 경우 미리 정해 둔 디폴트 값을 대신 가져오게 하고 싶을 때에는 get(x, '디폴트 값')을 사용하면 편리하다."]},{"cell_type":"code","metadata":{"id":"moBwKpIhjtQp"},"source":[">>> a.get('foo', 'bar')\n","'bar'"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"xbUIOSDijuip"},"source":["a 딕셔너리에는 'foo'에 해당하는 값이 없다. 따라서 디폴트 값인 'bar'를 돌려준다.\n","\n","**해당 Key가 딕셔너리 안에 있는지 조사하기(in)**"]},{"cell_type":"code","metadata":{"id":"7PBc01Ntjv0c"},"source":[">>> a = {'name':'pey', 'phone':'0119993323', 'birth': '1118'}\n",">>> 'name' in a\n","True\n",">>> 'email' in a\n","False"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"rTQBYjU0jycw"},"source":["'name' 문자열은 a 딕셔너리의 Key 중 하나이다. 따라서 'name' in a를 호출하면 참(True)을 돌려준다. 반대로 'email'은 a 딕셔너리 안에 존재하지 않는 Key이므로 거짓(False)을 돌려준다."]},{"cell_type":"code","metadata":{"id":"TRULPEv_kvil"},"source":[">>> s1 = set([1,2,3])\n",">>> s1\n","{1, 2, 3}"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Mng6E-aekw4A"},"source":["위와 같이 set()의 괄호 안에 리스트를 입력하여 만들거나 다음과 같이 문자열을 입력하여 만들 수도 있다."]},{"cell_type":"code","metadata":{"id":"1L0DlUH4kybL"},"source":[">>> s2 = set(\"Hello\")\n",">>> s2\n","{'e', 'H', 'l', 'o'}"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ScgxIQRdkzo5"},"source":["※ 비어 있는 집합 자료형은 s = set()로 만들수 있다."]},{"cell_type":"markdown","metadata":{"id":"qSVwWZKLk1aO"},"source":["**집합 자료형의 특징**\n","\n","자, 그런데 위에서 살펴본 set(\"Hello\")의 결과가 좀 이상하지 않은가? 분명 \"Hello\" 문자열로 set 자료형을 만들었는데 생성된 자료형에는 l 문자가 하나 빠져 있고 순서도 뒤죽박죽이다. 그 이유는 set에 다음과 같은 2가지 큰 특징이 있기 때문이다.\n","\n","-중복을 허용하지 않는다.\n","-순서가 없다(Unordered).\n","\n","리스트나 튜플은 순서가 있기(ordered) 때문에 인덱싱을 통해 자료형의 값을 얻을 수 있지만 set 자료형은 순서가 없기(unordered) 때문에 인덱싱으로 값을 얻을 수 없다. 이는 마치 02-5에서 살펴본 딕셔너리와 비슷하다. 딕셔너리 역시 순서가 없는 자료형이라 인덱싱을 지원하지 않는다.\n","\n","만약 set 자료형에 저장된 값을 인덱싱으로 접근하려면 다음과 같이 리스트나 튜플로 변환한후 해야 한다.\n","\n","※ 중복을 허용하지 않는 set의 특징은 자료형의 중복을 제거하기 위한 필터 역할로 종종 사용하기도 한다."]},{"cell_type":"code","metadata":{"id":"x-6pU8Eok-0T"},"source":[">>> s1 = set([1,2,3])\n",">>> l1 = list(s1)\n",">>> l1\n","[1, 2, 3]\n",">>> l1[0]\n","1\n",">>> t1 = tuple(s1)\n",">>> t1\n","(1, 2, 3)\n",">>> t1[0]\n","1"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"UTVnjm2ClANW"},"source":["**교집합, 합집합, 차집합 구하기**\n","\n","set 자료형을 정말 유용하게 사용하는 경우는 교집합, 합집합, 차집합을 구할 때이다.\n","\n","우선 다음과 같이 2개의 set 자료형을 만든 후 따라 해 보자. s1은 1부터 6까지의 값을 가지게 되었고, s2는 4부터 9까지의 값을 가지게 되었다."]},{"cell_type":"code","metadata":{"id":"dp_ivIGJlCsr"},"source":[">>> s1 = set([1, 2, 3, 4, 5, 6])\n",">>> s2 = set([4, 5, 6, 7, 8, 9])"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"IwbjLXkzlEYy"},"source":["**1. 교집합**\n","\n","s1과 s2의 교집합을 구해 보자."]},{"cell_type":"code","metadata":{"id":"5E9Msl5VlPeI"},"source":[">>> s1 & s2\n","{4, 5, 6}"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"-cmlStrolP34"},"source":["\"&\" 기호를 이용하면 교집합을 간단히 구할 수 있다.\n","\n","또는 다음과 같이 intersection 함수를 사용해도 동일한 결과를 돌려준다."]},{"cell_type":"code","metadata":{"id":"8t2jzhKSlSDC"},"source":[">>> s1.intersection(s2)\n","{4, 5, 6}"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"PgfPAD6blUmg"},"source":["s2.intersection(s1)을 사용해도 결과는 같다.\n","\n","**2. 합집합**\n","\n","합집합은 다음과 같이 구할 수 있다. 이때 4, 5, 6처럼 중복해서 포함된 값은 한 개씩만 표현된다."]},{"cell_type":"code","metadata":{"id":"FfZeWXGVlWpu"},"source":[">>> s1 | s2\n","{1, 2, 3, 4, 5, 6, 7, 8, 9}"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"40WsiQ2olYBp"},"source":["\"|\" 기호를 사용한 방법이다."]},{"cell_type":"code","metadata":{"id":"ns_5LKIXlZTu"},"source":[">>> s1.union(s2)\n","{1, 2, 3, 4, 5, 6, 7, 8, 9}"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"kSYCahe3laru"},"source":["또는 union 함수를 사용하면 된다. 교집합에서 사용한 intersection 함수와 마찬가지로 s2.union(s1)을 사용해도 동일한 결과를 돌려준다.\n","\n","**3. 차집합**\n","\n","차집합은 다음과 같이 구할 수 있다."]},{"cell_type":"code","metadata":{"id":"7DjLq7r6lcZj"},"source":[">>> s1 - s2\n","{1, 2, 3}\n",">>> s2 - s1\n","{8, 9, 7}"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ELand23Dlh2Q"},"source":["빼기(-) 기호를 사용한 방법이다."]},{"cell_type":"code","metadata":{"id":"PiWRTJXSliLJ"},"source":[">>> s1.difference(s2)\n","{1, 2, 3}\n",">>> s2.difference(s1)\n","{8, 9, 7}"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"CNaD0xZMllCt"},"source":["difference 함수를 사용해도 차집합을 구할 수 있다.\n","\n","**집합 자료형 관련 함수들**\n","\n","값 1개 추가하기(add)\n","이미 만들어진 set 자료형에 값을 추가할 수 있다. 1개의 값만 추가(add)할 경우에는 다음과 같이 한다."]},{"cell_type":"code","metadata":{"id":"eNAH9xlklpWs"},"source":[">>> s1 = set([1, 2, 3])\n",">>> s1.add(4)\n",">>> s1\n","{1, 2, 3, 4}"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"JN4N99eWlq3f"},"source":["**값 여러 개 추가하기(update)**\n","\n","여러 개의 값을 한꺼번에 추가(update)할 때는 다음과 같이 하면 된다."]},{"cell_type":"code","metadata":{"id":"fp5yBPxvltr-"},"source":[">>> s1 = set([1, 2, 3])\n",">>> s1.update([4, 5, 6])\n",">>> s1\n","{1, 2, 3, 4, 5, 6}"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ImMNLoELlvL3"},"source":["**특정 값 제거하기(remove)**\n","\n","특정 값을 제거하고 싶을 때는 다음과 같이 하면 된다."]},{"cell_type":"code","metadata":{"id":"1XdnDYa_lyFz"},"source":[">>> s1 = set([1, 2, 3])\n",">>> s1.remove(2)\n",">>> s1\n","{1, 3}"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"JZNyreXAmxt_"},"source":["따옴표로 감싸지 않은 문자열을 변수에 지정해서 오류가 발생할 것 같지만 잘 실행된다. type 함수를 변수 a와 b에 사용하면 두 변수의 자료형이 bool로 지정된 것을 확인할 수 있다."]},{"cell_type":"code","metadata":{"id":"i6FTVCttmzPw"},"source":[">>> type(a)\n","<class 'bool'>\n",">>> type(b)\n","<class 'bool'>"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"jVUrzDS5m1Cy"},"source":["※ type(x)는 x의 자료형을 확인하는 파이썬의 내장 함수이다.\n","\n","불 자료형은 조건문의 반환 값으로도 사용된다. 조건문에 대해서는 if문에서 자세히 배우겠지만 잠시 살펴보고 넘어가자."]},{"cell_type":"code","metadata":{"id":"sSAVpNuGm2aS"},"source":[">>> 1 == 1\n","True"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"-MaRlGdrm33w"},"source":["1 == 1 은 \"1과 1이 같은가?\"를 묻는 조건문이다. 이런 조건문은 결과로 True 또는 False에 해당되는 불 자료형을 돌려준다. 1과 1은 같으므로 True를 돌려준다."]},{"cell_type":"code","metadata":{"id":"VYRg-jYmm5Cs"},"source":[">>> 2 > 1\n","True"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ECLrIpkNm6eF"},"source":["2는 1보다 크기 때문에 2 > 1 조건문은 True를 돌려준다."]},{"cell_type":"code","metadata":{"id":"rVLPPPqUm8A3"},"source":[">>> 2 < 1\n","False"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"nT_aSzBBm9oo"},"source":["2는 1보다 작지 않기 때문에 2 < 1 조건문은 False를 돌려준다.\n","\n","**자료형의 참과 거짓**\n","\n","자료형에 참과 거짓이 있다? 조금 이상하게 들리겠지만 참과 거짓은 분명히 있다. 이는 매우 중요한 특징이며 실제로도 자주 쓰인다.\n","\n","자료형의 참과 거짓을 구분하는 기준은 다음과 같다.\n","\n","\n","\"python\"----------참\n","\"\"---------------거짓\n","[1, 2, 3]---------참\n","[]---------------거짓\n","()---------------거짓\n","{}---------------거짓\n","1-----------------참\n","0----------------거짓\n","None-------------거짓"]},{"cell_type":"markdown","metadata":{"id":"oav1Dl69n_B3"},"source":["문자열, 리스트, 튜플, 딕셔너리 등의 값이 비어 있으면(\" \", [ ], ( ), { }) 거짓이 된다. 당연히 비어있지 않으면 참이 된다. 숫자에서는 그 값이 0일 때 거짓이 된다. 위 표를 보면 None이 있는데, 이것에 대해서는 뒷부분에서 배우니 아직은 신경 쓰지 말자. 그저 None은 거짓을 뜻한다는 것만 알아두자.\n","\n","다음 예를 보고 참과 거짓이 프로그램에서 어떻게 쓰이는지 간단히 알아보자."]},{"cell_type":"code","metadata":{"id":"5YjL4ylooELy"},"source":[">>> a = [1, 2, 3, 4]\n",">>> while a:\n","...     print(a.pop())\n","...\n","4\n","3\n","2\n","1"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Hmz1UpiHoFwo"},"source":["먼저 a = [1, 2, 3, 4] 리스트를 하나 만들었다.\n","\n","while문은 03장에서 자세히 다루겠지만 간단히 알아보면 다음과 같다. 조건문이 참인 동안 조건문 안에 있는 문장을 반복해서 수행한다."]},{"cell_type":"code","metadata":{"id":"wAtzOayboI1A"},"source":["while 조건문:\n","    수행할 문장"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"jpL4AEpkoKOI"},"source":["즉 위 예를 보면 a가 참인 경우에 a.pop( )을 계속 실행하라는 의미이다. a.pop( ) 함수는 리스트 a의 마지막 요소를 끄집어내는 함수이므로 리스트 안에 요소가 존재하는 한(a가 참인 동안) 마지막 요소를 계속해서 끄집어낼 것이다. 결국 더 이상 끄집어낼 것이 없으면 a가 빈 리스트([ ])가 되어 거짓이 된다. 따라서 while문에서 조건이 거짓이 되므로 중지된다. 위에서 본 예는 파이썬 프로그래밍에서 매우 자주 사용하는 기법 중 하나이다.\n","\n","위 예가 너무 복잡하다고 생각하는 독자는 다음 예를 보면 쉽게 이해될 것이다."]},{"cell_type":"code","metadata":{"id":"1Q4pazUzoLYR"},"source":[">>> if []:\n","...     print(\"참\")\n","... else:\n","...     print(\"거짓\")\n","...\n","거짓"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"hMJ9LtL6oN4o"},"source":["if문에 대해서 잘 모르는 독자라도 위의 문장을 해석하는 데는 무리가 없을 것이다.\n","\n","※ if문에 대해서는 03장에서 자세히 다룬다.\n","\n","[ ]는 앞의 표에서 볼 수 있듯이 비어 있는 리스트이므로 거짓이다. 따라서 \"거짓\"이란 문자열이 출력된다. if문에 대해서 잘 모르는 독자라도 위 문장을 해석하는 데는 무리가 없을 것이다."]},{"cell_type":"code","metadata":{"id":"3_qQObwYoPY5"},"source":[">>> if [1, 2, 3]:\n","...     print(\"참\")\n","... else:\n","...     print(\"거짓\")\n","... \n","참"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"42fOrYQioQtC"},"source":["위 코드를 해석해 보면 다음과 같다."]},{"cell_type":"code","metadata":{"id":"_VtCwKwqoSJR"},"source":["만약 [1, 2, 3]이 참이면 \"참\"이라는 문자열을 출력하고 그렇지 않으면 \"거짓\"이라는 문자열을 출력하라."],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"zcd7wUD0oTVZ"},"source":["위 코드의 [1, 2, 3]은 요솟값이 있는 리스트이기 때문에 참이다. 따라서 \"참\"을 출력한다."]},{"cell_type":"markdown","metadata":{"id":"w3mJs6_joVFs"},"source":["**불 연산**\n","\n","자료형에 참과 거짓이 있음을 이미 알아보았다. bool 내장 함수를 사용하면 자료형의 참과 거짓을 식별할 수 있다.\n","\n","다음 예제를 따라 해 보자."]},{"cell_type":"code","metadata":{"id":"7RoNYmr_oYOh"},"source":[">>> bool('python')\n","True"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"A9NXPRqSoaAI"},"source":["'python' 문자열은 빈 문자열이 아니므로 bool 연산의 결과로 불 자료형인 True를 돌려준다."]},{"cell_type":"code","metadata":{"id":"cO9YJtUeobPO"},"source":[">>> bool('')\n","False"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"AREKs-p4oc0j"},"source":["'' 문자열은 빈 문자열이므로 bool 연산의 결과로 불 자료형인 False를 돌려준다.\n","\n","위에서 알아본 몇 가지 예제를 더 수행해 보자."]},{"cell_type":"code","metadata":{"id":"15MiJrY-oeGw"},"source":[">>> bool([1,2,3])\n","True\n",">>> bool([])\n","False\n",">>> bool(0)\n","False\n",">>> bool(3)\n","True"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"hsqUrZ3lofm_"},"source":["위에서 알아본 것과 동일한 참과 거짓에 대한 결과를 돌려주는 것을 확인할 수 있다.\n","\n","지금까지 파이썬의 가장 기본이 되는 자료형인 숫자, 문자열, 리스트, 튜플, 딕셔너리, 집합, 불에 대해서 알아보았다. 여기까지 잘 따라온 독자라면 파이썬에 대해서 대략 50% 정도 습득했다고 보아도 된다. 그만큼 자료형은 중요하고 프로그램의 근간이 되기 때문에 확실하게 해놓지 않으면 좋은 프로그램을 만들 수 없다. 책에 있는 예제만 따라 하지 말고 직접 여러 가지 예들을 테스트해 보며 02-1~02-7의 자료형에 익숙해지기를 바란다."]},{"cell_type":"markdown","metadata":{"id":"Z4iiz6pXL3y2"},"source":["변수를 만들 때는 위 예처럼 =(assignment) 기호를 사용한다.\n","\n","다른 프로그래밍 언어인 C나 JAVA에서는 변수를 만들 때 자료형을 직접 지정해야 한다. 하지만 파이썬은 변수에 저장된 값을 스스로 판단하여 자료형을 지정하기 때문에 더 편리하다."]},{"cell_type":"code","metadata":{"id":"Ea_4rbQwL6co"},"source":["변수 이름 = 변수에 저장할 값"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"787y5DGNL7_X"},"source":["**변수란?**\n","파이썬에서 사용하는 변수는 객체를 가리키는 것이라고도 말할 수 있다. 객체란 우리가 지금껏 보아 온 자료형과 같은 것을 의미하는 말이다(객체에 대해서는 05-1에서 자세하게 공부한다)."]},{"cell_type":"code","metadata":{"id":"AZ03DtrOMEAb"},"source":[">>> a = [1, 2, 3]"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"atwNmlsPMFpq"},"source":["만약 위 코드처럼 a = [1, 2, 3]이라고 하면 [1, 2, 3] 값을 가지는 리스트 자료형(객체)이 자동으로 메모리에 생성되고 변수 a는 [1, 2, 3] 리스트가 저장된 메모리의 주소를 가리키게 된다.\n","\n","※ 메모리란 컴퓨터가 프로그램에서 사용하는 데이터를 기억하는 공간이다.\n","\n","a 변수가 가리키는 메모리의 주소는 다음과 같이 확인할 수 있다."]},{"cell_type":"code","metadata":{"id":"qTcvMcmkMIaU"},"source":[">>> a = [1, 2, 3]\n",">>> id(a)\n","4303029896"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"luOJiZnkMLZ7"},"source":["id 함수는 변수가 가리키고 있는 객체의 주소 값을 돌려주는 파이썬 내장 함수이다. 즉 여기에서 필자가 만든 변수 a가 가리키는 [1, 2, 3] 리스트의 주소 값은 4303029896 임을 알 수 있다."]},{"cell_type":"markdown","metadata":{"id":"u3-LWoUYMNes"},"source":["**리스트를 복사하고자 할 때**\n","\n","여기에서는 리스트 자료형에서 가장 혼동하기 쉬운 ‘복사’에 대해 설명하겠다. 다음 예를 통해 알아보자."]},{"cell_type":"code","metadata":{"id":"3xn-EzYMMRY7"},"source":[">>> a = [1,2,3]\n",">>> b = a"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"j1DLwYBwMUKm"},"source":["b 변수에 a 변수를 대입하면 어떻게 될까? b와 a는 같은 걸까 다른 걸까? 결론부터 말하면 b는 a와 완전히 동일하다고 할 수 있다. 다만 [1, 2, 3] 리스트를 참조하는 변수가 a 변수 1개에서 b 변수가 추가되어 2개로 늘어났다는 차이만 있을 뿐이다.\n","\n","id 함수를 사용하면 이러한 사실을 확인할 수 있다."]},{"cell_type":"code","metadata":{"id":"7dDHm6BPMXib"},"source":[">>> id(a)\n","4303029896\n",">>> id(b)\n","4303029896"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"9H7wYVOmMZnz"},"source":["id(a)의 값이 id(b)의 값과 동일함을 확인할 수 있다. 즉 a가 가리키는 대상과 b가 가리키는 대상이 동일하다는 것을 알 수 있다. 동일한 객체를 가리키고 있는지에 대해서 판단하는 파이썬 명령어 is를 다음과 같이 실행해도 역시 참(True)을 돌려준다."]},{"cell_type":"code","metadata":{"id":"VuiDmL9-MbAd"},"source":[">>> a is b  # a와 b가 가리키는 객체는 동일한가?\n","True"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"THHd4ncSMcbm"},"source":["이제 다음 예를 계속해서 수행해 보자."]},{"cell_type":"code","metadata":{"id":"X-UhRem1Md5B"},"source":[">>> a[1] = 4\n",">>> a\n","[1, 4, 3]\n",">>> b\n","[1, 4, 3]"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"bY3tLeiIMgRT"},"source":["a 리스트의 두 번째 요소를 값 4로 바꾸었더니 a만 바뀌는 것이 아니라 b도 똑같이 바뀌었다. 그 이유는 앞에서 살펴본 것처럼 a, b 모두 동일한 리스트를 가리키고 있기 때문이다.\n","\n","그렇다면 b 변수를 생성할 때 a 변수의 값을 가져오면서 a와는 다른 주소를 가리키도록 만들수는 없을까? 다음 2가지 방법이 있다."]},{"cell_type":"markdown","metadata":{"id":"EUD0GOleMh52"},"source":["**1. [:] 이용**\n","\n","첫 번째 방법으로는 다음과 같이 리스트 전체를 가리키는 [:]을 사용해서 복사하는 것이다."]},{"cell_type":"code","metadata":{"id":"GONXi_jbMlBi"},"source":[">>> a = [1, 2, 3]\n",">>> b = a[:]\n",">>> a[1] = 4\n",">>> a\n","[1, 4, 3]\n",">>> b\n","[1, 2, 3]"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Q7R45sXpMm1t"},"source":["위 예에서 볼 수 있듯이 a 리스트 값을 바꾸더라도 b 리스트에는 영향을 끼치지 않는다."]},{"cell_type":"markdown","metadata":{"id":"U1jyfop6MnSO"},"source":["**2. copy 모듈 이용**\n","\n","두 번째는 copy 모듈을 사용하는 방법이다. 다음 예를 보면 from copy import copy라는 처음 보는 형태의 문장이 나오는데, 이것은 뒤에 설명할 파이썬 모듈 부분에서 자세히 다룬다. 여기에서는 단순히 copy 함수를 쓰기 위해서 사용하는 것이라고만 알아두자."]},{"cell_type":"code","metadata":{"id":"HQcVudDGMsIZ"},"source":[">>> from copy import copy\n",">>> b = copy(a)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"iQBIT1-5MtoD"},"source":["위 예에서 b = copy(a)는 b = a[:]과 동일하다.\n","\n","두 변수가 같은 값을 가지면서 다른 객체를 제대로 생성했는지 다음과 같이 확인해 보자."]},{"cell_type":"code","metadata":{"id":"SPNDOchsMvB0"},"source":[">>> b is a\n","False"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"MeuJA58jMwUa"},"source":["위 예에서 b is a가 False를 돌려주므로 b와 a가 가리키는 객체는 서로 다르다는 것을 알 수 있다."]},{"cell_type":"markdown","metadata":{"id":"L5OFjoSMMxqE"},"source":["**변수를 만드는 여러 가지 방법**"]},{"cell_type":"markdown","metadata":{"id":"UbxN7lVdM0vT"},"source":[">>> a, b = ('python', 'life')"]},{"cell_type":"markdown","metadata":{"id":"ZIEJabMFM2It"},"source":["위 예문처럼 튜플로 a, b에 값을 대입할 수 있다. 이 방법은 다음 예문과 완전히 동일하다."]},{"cell_type":"code","metadata":{"id":"pxLRSPNFM3pT"},"source":[">>> (a, b) = 'python', 'life'"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"1tFdFrVzM43u"},"source":["튜플 부분에서도 언급했지만 튜플은 괄호를 생략해도 된다.\n","\n","다음처럼 리스트로 변수를 만들 수도 있다."]},{"cell_type":"code","metadata":{"id":"ggBXLdKtM6In"},"source":[">>> [a,b] = ['python', 'life']"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"pUr2jDVPM7aK"},"source":["또한 여러 개의 변수에 같은 값을 대입할 수도 있다."]},{"cell_type":"code","metadata":{"id":"dyhyfUY_M8uO"},"source":[">>> a = b = 'python'"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"5x8WeLbjM-Am"},"source":["파이썬에서는 위 방법을 사용하여 두 변수의 값을 아주 간단히 바꿀 수 있다."]},{"cell_type":"code","metadata":{"id":"RuOVZZilM_fL"},"source":[">>> a = 3\n",">>> b = 5\n",">>> a, b = b, a\n",">>> a\n","5\n",">>> b\n","3"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"V2WzQ4PVNBjl"},"source":["처음에 a에 값 3, b에는 값 5가 대입되어 있었지만 a, b = b, a 문장을 수행한 후에는 그 값이 서로 바뀌었음을 확인할 수 있다."]},{"cell_type":"markdown","metadata":{"id":"mnUmkNK9PI6O"},"source":["**Q1**\n","홍길동 씨의 과목별 점수는 다음과 같다. 홍길동 씨의 평균 점수를 구해 보자.\n","\n","과목\t점수\n","국어\t80\n","영어\t75\n","수학\t55"]},{"cell_type":"markdown","metadata":{"id":"E0sLIAjsPLwG"},"source":["**Q2**\n","자연수 13이 홀수인지 짝수인지 판별할 수 있는 방법에 대해 말해 보자."]},{"cell_type":"markdown","metadata":{"id":"Dmc3UQ2ZPNge"},"source":["**Q3**\n","홍길동 씨의 주민등록번호는 881120-1068234이다. 홍길동 씨의 주민등록번호를 연월일(YYYYMMDD) 부분과 그 뒤의 숫자 부분으로 나누어 출력해 보자.\n","\n","※ 문자열 슬라이싱 기법을 사용해 보자."]},{"cell_type":"markdown","metadata":{"id":"BegXkavpPXoe"},"source":["**Q6**\n","[1, 3, 5, 4, 2] 리스트를 [5, 4, 3, 2, 1]로 만들어 보자.\n","\n","※ 리스트의 내장 함수를 사용해 보자."]},{"cell_type":"markdown","metadata":{"id":"Ea-xPoe7PZua"},"source":["**Q7**\n","['Life', 'is', 'too', 'short'] 리스트를 Life is too short 문자열로 만들어 출력해 보자.\n","\n","※ 문자열의 join 함수를 사용하면 리스트를 문자열로 쉽게 만들 수 있다.\n","\n"]},{"cell_type":"markdown","metadata":{"id":"SGSBIvA5Pji_"},"source":["**Q8**\n","(1,2,3) 튜플에 값 4를 추가하여 (1,2,3,4)를 만들어 출력해 보자.\n","\n","※ 더하기(+)를 사용해 보자.\n","\n"]},{"cell_type":"markdown","metadata":{"id":"pdhpV19uPqhS"},"source":["**Q9**\n","다음과 같은 딕셔너리 a가 있다."]},{"cell_type":"code","metadata":{"id":"GvHhx4taPshO"},"source":[">>> a = dict()\n",">>> a\n","{}"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"oz8knVDNPwWJ"},"source":["다음 중 오류가 발생하는 경우를 고르고, 그 이유를 설명해 보자.\n","\n","1.a['name'] = 'python'\n","2.a[('a',)] = 'python'\n","3.a[[1]] = 'python'\n","4.a[250] = 'python'"]},{"cell_type":"markdown","metadata":{"id":"jivAQVFOP2hK"},"source":["**Q10**\n","딕셔너리 a에서 'B'에 해당되는 값을 추출해 보자."]},{"cell_type":"code","metadata":{"id":"nnmpgCFwP5gY"},"source":[">>> a = {'A':90, 'B':80, 'C':70}"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"iFNDawQAP6qO"},"source":["※ 딕셔너리의 pop 함수를 사용해 보자."]},{"cell_type":"markdown","metadata":{"id":"zIiY-UBxP79v"},"source":["**Q11**\n","a 리스트에서 중복 숫자를 제거해 보자."]},{"cell_type":"code","metadata":{"id":"R0itv5HGP93i"},"source":[">>> a = [1, 1, 1, 2, 2, 3, 3, 3, 4, 4, 5]"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"6FKbmJaSP_Dw"},"source":["※ 집합 자료형의 요솟값이 중복될 수 없다는 특징을 사용해 보자."]},{"cell_type":"markdown","metadata":{"id":"OUAH00yMQAW8"},"source":["**Q12**\n","\n","파이썬은 다음처럼 동일한 값에 여러 개의 변수를 선언할 수 있다. 다음과 같이 a, b 변수를 선언한 후 a의 두 번째 요솟값을 변경하면 b 값은 어떻게 될까? 그리고 이런 결과가 오는 이유에 대해 설명해 보자."]},{"cell_type":"code","metadata":{"id":"hZ5xE-v1QCo_"},"source":[">>> a = b = [1, 2, 3]\n",">>> a[1] = 4\n",">>> print(b)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"nXetoilfQ6AP"},"source":["##03장 프로그램의 구조를 쌓는다! 제어문\n","\n","이번 장에서는 if, while, for 등의 제어문에 대해서 배우고자 한다. 제어문을 배우기 전에 집을 짓는 일을 생각해 보자.\n","\n","집을 지을 때 나무, 돌, 시멘트 등은 재료가 되고, 철근은 집의 뼈대가 된다. 프로그램을 만드는 것도 집 짓기와 매우 비슷한 면이 있다. 나무, 돌, 시멘트와 같은 재료는 자료형이 되고, 집의 뼈대를 이루는 철근은 이번 장에서 알아볼 제어문에 해당한다. 이번 장에서는 자료형을 바탕으로 제어문을 이용하여 프로그램의 구조를 만들어 보자."]},{"cell_type":"markdown","metadata":{"id":"3QrBDHxOZAzW"},"source":["###03-1 if문\n","\n","**if문은 왜 필요할까?**\n","다음과 같은 상상을 해보자.\n","\n","\"돈이 있으면 택시를 타고, 돈이 없으면 걸어 간다.\"\n","\n","우리 모두에게 일어날 수 있는 상황 중 하나이다. 프로그래밍도 사람이 하는 것이므로 위 문장처럼 주어진 조건을 판단한 후 그 상황에 맞게 처리해야 할 경우가 생긴다. 이렇듯 프로그래밍에서 조건을 판단하여 해당 조건에 맞는 상황을 수행하는 데 쓰는 것이 바로 if문이다.\n","\n","위와 같은 상황을 파이썬에서는 다음과 같이 표현할 수 있다."]},{"cell_type":"code","metadata":{"id":"fCWjVuHiZG83"},"source":[">>> money = True\n",">>> if money:\n","...     print(\"택시를 타고 가라\")\n","... else:\n","...     print(\"걸어 가라\")\n","...\n","택시를 타고 가라"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"WGUv_Z2AZZmU"},"source":["money에 True를 입력했으므로 money는 참이다. 따라서 if문 다음 문장이 수행되어 '택시를 타고 가라'가 출력된다."]},{"cell_type":"markdown","metadata":{"id":"zCJMytTTZODJ"},"source":["**if문의 기본 구조**\n","\n","다음은 if와 else를 사용한 조건문의 기본 구조이다."]},{"cell_type":"code","metadata":{"id":"tfSShAugZQkD"},"source":["if 조건문:\n","    수행할 문장1\n","    수행할 문장2\n","    ...\n","else:\n","    수행할 문장A\n","    수행할 문장B\n","    ..."],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"qi6M4a7pZaf4"},"source":["조건문을 테스트해서 참이면 if문 바로 다음 문장(if 블록)들을 수행하고, 조건문이 거짓이면 else문 다음 문장(else 블록)들을 수행하게 된다. 그러므로 else문은 if문 없이 독립적으로 사용할 수 없다."]},{"cell_type":"markdown","metadata":{"id":"lXjwdNlAZdxw"},"source":["**들여쓰기**"]},{"cell_type":"markdown","metadata":{"id":"-k86P6iVZhGf"},"source":["if문을 만들 때는 if 조건문: 바로 아래 문장부터 if문에 속하는 모든 문장에 들여쓰기(indentation)를 해주어야 한다. 오른쪽에서 보는 것과 같이 조건문이 참일 경우 \"수행할 문장1\"을 들여쓰기했고 \"수행할 문장2\"와 \"수행할 문장3\"도 들여쓰기 해 주었다. 다른 프로그래밍 언어를 사용해 온 사람들은 파이썬에서 \"수행할 문장\"을 들여쓰기하는 것을 무시하는 경우가 많으니 더 주의해야 한다."]},{"cell_type":"code","metadata":{"id":"H4HzEmh_ZjFb"},"source":["if 조건문:\n","    수행할 문장1\n","    수행할 문장2\n","    수행할 문장3"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"UH9r5uuKZkYC"},"source":["다음처럼 작성하면 오류가 발생한다. \"수행할 문장2\"를 들여쓰기하지 않았기 때문이다."]},{"cell_type":"code","metadata":{"id":"hATeMRAaZl9Y"},"source":["if 조건문:\n","    수행할 문장1\n","수행할 문장2\n","    수행할 문장3"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"JG3PbPZoZnP3"},"source":["IDLE 에디터에서 다음과 같이 작성하여 실행해 보자. 여기에서는 오류가 뜨는지 확인만 하면 되니 IDLE 에디터 창에서 바로 실행하자(단축키:F5)."]},{"cell_type":"code","metadata":{"id":"esEFqbPGZoiN"},"source":["money = True\n","if money:\n","    print(\"택시를\")\n","print(\"타고\")\n","    print(\"가라\")"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"F-Wtde2paWVi"},"source":["들여쓰기 오류가 발생하는 것을 확인할 수 있다."]},{"cell_type":"markdown","metadata":{"id":"mhnq65dOaa40"},"source":["들여쓰기는 공백(Spacebar)으로 하는 것이 좋을까? 아니면 탭(Tab)으로 하는 것이 좋을까? 이에 대한 논란은 파이썬을 사용하는 사람들 사이에서 아직도 계속되고 있다. 탭으로 하자는 쪽과 공백으로 하자는 쪽 모두가 동의하는 내용은 단 하나, 2가지를 혼용해서 쓰지는 말자는 것이다. 공백으로 할 거면 항상 공백으로 통일하고, 탭으로 할 거면 항상 탭으로 통일해서 사용하자는 말이다. 탭이나 공백은 프로그램 소스에서 눈으로 보이는 것이 아니기 때문에 혼용해서 쓰면 오류의 원인이 되니 주의하자.\n","\n","※ 요즘 파이썬 커뮤니티에서는 들여쓰기를 할 때 공백(Spacebar) 4개를 사용하는 것을 권장한다."]},{"cell_type":"markdown","metadata":{"id":"F0bkAGVUadHW"},"source":["[조건문 다음에 콜론(:)을 잊지 말자!]\n","\n","if 조건문 뒤에는 반드시 콜론(:)이 붙는다. 어떤 특별한 의미가 있다기보다는 파이썬의 문법 구조이다. 왜 하필 콜론(:)인지 궁금하다면 파이썬을 만든 귀도에게 직접 물어보아야 할 것이다. 앞으로 배울 while이나 for, def, class문에도 역시 문장의 끝에 콜론(:)이 항상 들어간다. 초보자들은 이 콜론(:)을 빠뜨리는 경우가 많으니 특히 주의하자.\n","\n","파이썬이 다른 언어보다 보기 쉽고 소스 코드가 간결한 이유는 바로 콜론(:)을 사용하여 들여쓰기(indentation)를 하도록 만들었기 때문이다. 하지만 이는 숙련된 프로그래머들이 파이썬을 처음 접할 때 제일 혼란스러워하는 부분이기도 하다. 다른 언어에서는 if문을 { } 기호로 감싸지만 파이썬에서는 들여쓰기로 해결한다는 점을 기억하자."]},{"cell_type":"markdown","metadata":{"id":"PtdGEMehafV4"},"source":["**조건문이란 무엇인가?**\n","\n","if 조건문에서 \"조건문\"이란 참과 거짓을 판단하는 문장을 말한다.\n","\n","앞에서 살펴본 택시 예제에서 조건문은 money가 된다."]},{"cell_type":"code","metadata":{"id":"CSzNWiAJahuT"},"source":[">>> money = True\n",">>> if money:"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"z5OVemoQajUc"},"source":["money는 True이기 때문에 조건이 참이 되어 if문 다음 문장을 수행한다."]},{"cell_type":"markdown","metadata":{"id":"nKoZQdfkakT2"},"source":["**비교연산자**"]},{"cell_type":"markdown","metadata":{"id":"VQHnrSjfamgz"},"source":["이번에는 조건문에 비교연산자(<, >, ==, !=, >=, <=)를 쓰는 방법에 대해 알아보자.\n","\n","다음 표는 비교 연산자를 잘 설명해 준다.\n","\n","비교연산자\t 설명\n","x < y \t x가 y보다 작다\n","x > y \t x가 y보다 크다\n","x == y \tx와 y가 같다\n","x != y\tx와 y가 같지 않다\n","x >= y\tx가 y보다 크거나 같다\n","x <= y\tx가 y보다 작거나 같다\n","이제 위 연산자를 어떻게 사용하는지 알아보자."]},{"cell_type":"code","metadata":{"id":"E6PyVw3Xavbk"},"source":[">>> x = 3\n",">>> y = 2\n",">>> x > y\n","True\n",">>>"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"eLzmBLVYaxr3"},"source":["x에 3을, y에 2를 대입한 다음에 x > y라는 조건문을 수행하면 True를 돌려준다. x > y 조건문이 참이기 때문이다."]},{"cell_type":"code","metadata":{"id":"JXAtuWkEayuS"},"source":[">>> x < y\n","False"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"teQyflcva0CJ"},"source":["위 조건문은 거짓이기 때문에 False를 돌려준다.\n","\n"]},{"cell_type":"code","metadata":{"id":"qFnCaF_9a2B1"},"source":[">>> x == y\n","False"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"cS8JjDzTa387"},"source":["x와 y는 같지 않다. 따라서 위 조건문은 거짓이다."]},{"cell_type":"code","metadata":{"id":"ezk9VZTea5XA"},"source":[">>> x != y\n","True"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"WuPwW80Da7V-"},"source":["x와 y는 같지 않다. 따라서 위 조건문은 참이다.\n","\n","앞에서 살펴본 택시 예제를 다음처럼 바꾸려면 어떻게 해야 할까?\n","\n","\"만약 3000원 이상의 돈을 가지고 있으면 택시를 타고 그렇지 않으면 걸어 가라.\"\n","\n","위 상황은 다음처럼 프로그래밍할 수 있다."]},{"cell_type":"code","metadata":{"id":"CGHOdR8Ya9G0"},"source":[">>> money = 2000\n",">>> if money >= 3000:\n","...     print(\"택시를 타고 가라\")\n","... else:\n","...     print(\"걸어가라\")\n","...\n","걸어가라\n",">>>"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"FMASIORla-qx"},"source":["money >= 3000 조건문이 거짓이 되기 때문에 else문 다음 문장을 수행하게 된다."]},{"cell_type":"markdown","metadata":{"id":"1b-QwTTsbAHS"},"source":["and, or, not\n","조건을 판단하기 위해 사용하는 다른 연산자로는 and, or, not이 있다. 각각의 연산자는 다음처럼 동작한다."]},{"cell_type":"markdown","metadata":{"id":"-WiQnWjLbCOz"},"source":["연산자\t설명\n","x or y\tx와 y 둘중에 하나만 참이어도 참이다\n","x and y\tx와 y 모두 참이어야 참이다\n","not x\tx가 거짓이면 참이다\n","다음 예를 통해 or 연산자의 사용법을 알아보자.\n","\n","\"돈이 3000원 이상 있거나 카드가 있다면 택시를 타고 그렇지 않으면 걸어 가라.\""]},{"cell_type":"code","metadata":{"id":"0yxZRizwbD9d"},"source":[">>> money = 2000\n",">>> card = True\n",">>> if money >= 3000 or card:\n","...     print(\"택시를 타고 가라\")\n","... else:\n","...     print(\"걸어가라\")\n","...\n","택시를 타고 가라\n",">>>"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"E22kuCxBbFMr"},"source":["money는 2000이지만 card가 True이기 때문에 money >= 3000 or card 조건문이 참이 된다. 따라서 if문 다음 ‘택시를 타고 가라’ 문장이 출력된다."]},{"cell_type":"markdown","metadata":{"id":"ncqZapRzbHGV"},"source":["**x in s, x not in s**\n","더 나아가 파이썬은 다른 프로그래밍 언어에서 쉽게 볼 수 없는 재미있는 조건문을 제공한다.\n","\n","바로 다음과 같은 것들이다.\n","\n","in\tnot in\n","x in 리스트\tx not in 리스트\n","x in 튜플\tx not in 튜플\n","x in 문자열\tx not in 문자열\n","영어 단어 in의 뜻이 \"~안에\"라는 것을 생각해 보면 다음 예가 쉽게 이해될 것이다."]},{"cell_type":"code","metadata":{"id":"9Ddm3twPbJQb"},"source":[">>> 1 in [1, 2, 3]\n","True\n",">>> 1 not in [1, 2, 3]\n","False"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"GW6uRrgxbLCR"},"source":["앞에서 첫 번째 예는 \"[1, 2, 3]이라는 리스트 안에 1이 있는가?\" 조건문이다. 1은 [1, 2, 3] 안에 있으므로 참이 되어 True를 돌려준다. 두 번째 예는 \"[1, 2, 3] 리스트 안에 1이 없는가?\" 조건문이다. 1은 [1, 2, 3] 안에 있으므로 거짓이 되어 False를 돌려준다.\n","\n","다음은 튜플과 문자열에 적용한 예이다. 각각의 결과가 나온 이유는 쉽게 유추할 수 있다."]},{"cell_type":"code","metadata":{"id":"gdl5hJrGbMhn"},"source":[">>> 'a' in ('a', 'b', 'c')\n","True\n",">>> 'j' not in 'python'\n","True"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"rzizsiGWbN2n"},"source":["이번에는 우리가 계속 사용해 온 택시 예제에 in을 적용해 보자.\n","\n","\"만약 주머니에 돈이 있으면 택시를 타고, 없으면 걸어 가라.\""]},{"cell_type":"code","metadata":{"id":"7rgWjfOTbPXb"},"source":[">>> pocket = ['paper', 'cellphone', 'money']\n",">>> if 'money' in pocket:\n","...     print(\"택시를 타고 가라\")\n","... else:\n","...     print(\"걸어가라\")\n","...\n","택시를 타고 가라\n",">>>"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"A4ja-HhRbRKz"},"source":["['paper', 'cellphone', 'money'] 리스트 안에 'money'가 있으므로 'money' in pocket은 참이 된다. 따라서 if문 다음 문장이 수행된다.\n","\n","[조건문에서 아무 일도 하지 않게 설정하고 싶다면?]\n","\n","가끔 조건문의 참, 거짓에 따라 실행할 행동을 정의할 때, 아무런 일도 하지 않도록 설정하고 싶을 때가 있다.\n","\n","다음 예를 보자.\n","\n","\"주머니에 돈이 있으면 가만히 있고 주머니에 돈이 없으면 카드를 꺼내라.\"\n","\n","이럴 때 사용하는 것이 바로 pass이다. 위 예를 pass를 적용해서 구현해 보자."]},{"cell_type":"code","metadata":{"id":"VRhiEMVzbvGv"},"source":[">>> pocket = ['paper', 'money', 'cellphone']\n",">>> if 'money' in pocket:\n","...     pass \n","... else:\n","...     print(\"카드를 꺼내라\")\n","..."],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"XQzFO6fHbwkB"},"source":["pocket 리스트 안에 money 문자열이 있기 때문에 if문 다음 문장인 pass가 수행되고 아무 결괏값도 보여 주지 않는다."]},{"cell_type":"markdown","metadata":{"id":"jnr98U7cby_A"},"source":["**다양한 조건을 판단하는 elif**\n","\n","if와 else만으로는 다양한 조건을 판단하기 어렵다. 다음 예를 보더라도 if와 else만으로는 조건을 판단하는 데 어려움을 겪게 된다.\n","\n","\"주머니에 돈이 있으면 택시를 타고, 주머니에 돈은 없지만 카드가 있으면 택시를 타고, 돈도 없고 카드도 없으면 걸어 가라.\"\n","\n","위 문장을 보면 조건을 판단하는 부분이 두 군데가 있다. 먼저 주머니에 돈이 있는지를 판단해야 하고 주머니에 돈이 없으면 다시 카드가 있는지 판단해야 한다.\n","\n","if와 else만으로 위 문장을 표현하려면 다음과 같이 할 수 있다."]},{"cell_type":"code","metadata":{"id":"WURcXc_pb1mL"},"source":[">>> pocket = ['paper', 'handphone']\n",">>> card = True\n",">>> if 'money' in pocket:\n","...     print(\"택시를 타고가라\")\n","... else:\n","...     if card:\n","...         print(\"택시를 타고가라\")\n","...     else:\n","...         print(\"걸어가라\")\n","...\n","택시를 타고가라\n",">>>"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"sGY4a1TAb3Y0"},"source":["언뜻 보기에도 이해하기 어렵고 산만한 느낌이 든다. 이런 복잡함을 해결하기 위해 파이썬에서는 다중 조건 판단을 가능하게 하는 elif를 사용한다.\n","\n","위 예를 elif를 사용하면 다음과 같이 바꿀 수 있다."]},{"cell_type":"code","metadata":{"id":"bqfriGClb4pK"},"source":[">>> pocket = ['paper', 'cellphone']\n",">>> card = True\n",">>> if 'money' in pocket:\n","...      print(\"택시를 타고가라\")\n","... elif card: \n","...      print(\"택시를 타고가라\")\n","... else:\n","...      print(\"걸어가라\")\n","...\n","택시를 타고가라"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"JelRB7nwb53U"},"source":["즉 elif는 이전 조건문이 거짓일 때 수행된다. if, elif, else를 모두 사용할 때 기본 구조는 다음과 같다."]},{"cell_type":"code","metadata":{"id":"IY8VoYbxb7bJ"},"source":["If <조건문>:\n","    <수행할 문장1> \n","    <수행할 문장2>\n","    ...\n","elif <조건문>:\n","    <수행할 문장1>\n","    <수행할 문장2>\n","    ...\n","elif <조건문>:\n","    <수행할 문장1>\n","    <수행할 문장2>\n","    ...\n","...\n","else:\n","   <수행할 문장1>\n","   <수행할 문장2>\n","   ... "],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"7fvi_s0Tb9a9"},"source":["위에서 볼 수 있듯이 elif는 개수에 제한 없이 사용할 수 있다.\n","\n","[if문을 한 줄로 작성하기]\n","\n","앞의 pass를 사용한 예를 보면 if문 다음에 수행할 문장이 한 줄이고, else문 다음에 수행할 문장도 한 줄밖에 되지 않는다."]},{"cell_type":"code","metadata":{"id":"oaWpA8ieb-9W"},"source":[">>> if 'money' in pocket:\n","...     pass \n","... else:\n","...     print(\"카드를 꺼내라\")\n","..."],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"2-rjvo_AcBxh"},"source":["이렇게 수행할 문장이 한 줄일 때 조금 더 간략하게 코드를 작성하는 방법이 있다."]},{"cell_type":"code","metadata":{"id":"A6orBtPdcDGa"},"source":[">>> pocket = ['paper', 'money', 'cellphone']\n",">>> if 'money' in pocket: pass\n","... else: print(\"카드를 꺼내라\")\n","..."],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"QxWYlMa4cEZa"},"source":["if문 다음 수행할 문장을 콜론(:) 뒤에 바로 적어 주었다. else문 역시 마찬가지이다."]},{"cell_type":"markdown","metadata":{"id":"uo2qS5OpcF5B"},"source":["**조건부 표현식**\n","\n","다음과 같은 코드를 보자."]},{"cell_type":"code","metadata":{"id":"OssPyipycH_i"},"source":["if score >= 60:\n","    message = \"success\"\n","else:\n","    message = \"failure\""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"1BiaZCU0cJTH"},"source":["위 코드는 score가 60 이상일 경우 message에 문자열 \"success\"를, 아닐 경우에는 \"failure\"를 대입하는 코드이다.\n","\n","파이썬의 조건부 표현식(conditional expression)을 사용하면 위 코드를 다음과 같이 간단히 표현할 수 있다."]},{"cell_type":"code","metadata":{"id":"r_SOhmsIcKtK"},"source":["message = \"success\" if score >= 60 else \"failure\""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"g8uUiuMIcMKB"},"source":["조건부 표현식은 다음과 같이 정의한다.\n","\n","조건문이 참인 경우 if 조건문 else 조건문이 거짓인 경우\n","\n","조건부 표현식은 가독성에 유리하고 한 줄로 작성할 수 있어 활용성이 좋다."]},{"cell_type":"markdown","metadata":{"id":"MpCUW0HTcOag"},"source":["###03-2 while문\n","\n"]},{"cell_type":"markdown","metadata":{"id":"85Qv8R2rcTd2"},"source":["**while문의 기본 구조**\n","\n","반복해서 문장을 수행해야 할 경우 while문을 사용한다. 그래서 while문을 반복문이라고도 부른다.\n","\n","다음은 while문의 기본 구조이다."]},{"cell_type":"code","metadata":{"id":"XwHtLwkKcVFw"},"source":["while <조건문>:\n","    <수행할 문장1>\n","    <수행할 문장2>\n","    <수행할 문장3>\n","    ..."],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ilQWnjuscWWn"},"source":["while문은 조건문이 참인 동안에 while문 아래의 문장이 반복해서 수행된다.\n","\n","\"열 번 찍어 안 넘어가는 나무 없다\"는 속담을 파이썬 프로그램으로 만든다면 다음과 같이 될 것이다."]},{"cell_type":"code","metadata":{"id":"ehNMgaHRcboV"},"source":[">>> treeHit = 0\n",">>> while treeHit < 10:\n","...     treeHit = treeHit +1\n","...     print(\"나무를 %d번 찍었습니다.\" % treeHit)\n","...     if treeHit == 10:\n","...         print(\"나무 넘어갑니다.\")\n","...\n","나무를 1번 찍었습니다.\n","나무를 2번 찍었습니다.\n","나무를 3번 찍었습니다.\n","나무를 4번 찍었습니다.\n","나무를 5번 찍었습니다.\n","나무를 6번 찍었습니다.\n","나무를 7번 찍었습니다.\n","나무를 8번 찍었습니다.\n","나무를 9번 찍었습니다.\n","나무를 10번 찍었습니다.\n","나무 넘어갑니다."],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ns2Ia6RocdxS"},"source":["위 예에서 while문의 조건문은 treeHit < 10이다. 즉 treeHit가 10보다 작은 동안에 while문 안의 문장을 계속 수행한다. whlie문 안의 문장을 보면 제일 먼저 treeHit = treeHit + 1로 treeHit 값이 계속 1씩 증가한다. 그리고 나무를 treeHit번만큼 찍었음을 알리는 문장을 출력하고 treeHit가 10이 되면 \"나무 넘어갑니다.\"라는 문장을 출력한다. 그러고 나면 treeHit < 10 조건문이 거짓이 되므로 while문을 빠져나가게 된다.\n","\n","※ treeHit = treeHit + 1은 프로그래밍을 할 때 매우 자주 사용하는 기법이다. treeHit 값을 1만큼씩 증가시킬 목적으로 사용하며, treeHit += 1 처럼 사용하기도 한다.\n","\n","다음은 while문이 반복되는 과정을 순서대로 정리한 표이다. 이렇게 긴 과정을 소스 코드 단 5줄로 만들 수 있다니 놀랍지 않은가?"]},{"cell_type":"markdown","metadata":{"id":"EAT3mWVhcf4P"},"source":["treeHit\t조건문\t조건판단\t수행하는 문장\t         while문\n","0\t     0 < 10\t     참\t  나무를 1번 찍었습니다.\t 반복\n","1\t     1 < 10\t     참\t  나무를 2번 찍었습니다.\t 반복\n","2\t     2 < 10\t     참\t  나무를 3번 찍었습니다.\t 반복\n","3\t     3 < 10\t     참\t  나무를 4번 찍었습니다.\t 반복\n","4\t     4 < 10\t     참\t  나무를 5번 찍었습니다.\t 반복\n","5\t     5 < 10\t     참\t  나무를 6번 찍었습니다.\t 반복\n","6\t     6 < 10\t     참\t  나무를 7번 찍었습니다.\t 반복\n","7\t     7 < 10\t     참\t  나무를 8번 찍었습니다.\t 반복\n","8\t     8 < 10\t     참\t  나무를 9번 찍었습니다.\t 반복\n","9\t     9 < 10\t     참\t  나무를 10번 찍었습니다. 나무 넘어갑니다.\t반복\n","10\t  10 < 10\t    거짓\t\t                       종료"]},{"cell_type":"markdown","metadata":{"id":"qNvlE9ptdDw7"},"source":["**while문 만들기**\n","\n","이번에는 여러 가지 선택지 중 하나를 선택해서 입력받는 예제를 만들어 보자. 먼저 다음과 같이 여러 줄짜리 문자열을 입력한다."]},{"cell_type":"code","metadata":{"id":"sdf52xFTdF_N"},"source":[">>> prompt = \"\"\"\n","... 1. Add\n","... 2. Del\n","... 3. List\n","... 4. Quit\n","...\n","... Enter number: \"\"\"\n",">>>"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"9tDtFwDMdHMu"},"source":["이어서 number 변수에 0을 먼저 대입한다. 이렇게 변수를 먼저 설정해 놓지 않으면 다음에 나올 while문의 조건문인 number != 4에서 변수가 존재하지 않는다는 오류가 발생한다."]},{"cell_type":"code","metadata":{"id":"DfOCXSmqdIt2"},"source":[">>> number = 0\n",">>> while number != 4:\n","...     print(prompt)\n","...     number = int(input())\n","...\n","\n","1. Add\n","2. Del\n","3. List\n","4. Quit\n","\n","Enter number:"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Fjt9yz1mdJ_7"},"source":["while문을 보면 number가 4가 아닌 동안 prompt를 출력하고 사용자로부터 번호를 입력받는다. 다음 결과 화면처럼 사용자가 값 4를 입력하지 않으면 계속해서 prompt를 출력한다."]},{"cell_type":"markdown","metadata":{"id":"uCaL-7LfdLed"},"source":["※ 여기에서 number = int(input())는 사용자의 숫자 입력을 받아들이는 것이라고만 알아두자. int나 input 함수에 대한 내용은 뒤의 내장 함수 부분에서 자세하게 다룬다."]},{"cell_type":"code","metadata":{"id":"fo7UIvCkdOip"},"source":["Enter number:\n","1\n","\n","1. Add\n","2. Del\n","3. List\n","4. Quit"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"bz5foMZQdPiU"},"source":["4를 입력하면 조건문이 거짓이 되어 while문을 빠져나가게 된다."]},{"cell_type":"code","metadata":{"id":"-44QVIyIdQor"},"source":["Enter number:\n","4\n",">>>"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"otnAFE0vdSKT"},"source":["while문 강제로 빠져나가기\n","while문은 조건문이 참인 동안 계속해서 while문 안의 내용을 반복적으로 수행한다. 하지만 강제로 while문을 빠져나가고 싶을 때가 있다. 예를 들어 커피 자판기를 생각해 보자. 자판기 안에 커피가 충분히 있을 때에는 동전을 넣으면 커피가 나온다. 그런데 자판기가 제대로 작동하려면 커피가 얼마나 남았는지 항상 검사해야 한다. 만약 커피가 떨어졌다면 판매를 중단하고 \"판매 중지\" 문구를 사용자에게 보여주어야 한다. 이렇게 판매를 강제로 멈추게 하는 것이 바로 break문이다.\n","\n"]},{"cell_type":"markdown","metadata":{"id":"aUXWjp0SdVqv"},"source":["커피 자판기 이야기를 파이썬 프로그램으로 표현해 본 것이다."]},{"cell_type":"code","metadata":{"id":"oKlm7I8VdXmL"},"source":[">>> coffee = 10\n",">>> money = 300\n",">>> while money:\n","...     print(\"돈을 받았으니 커피를 줍니다.\")\n","...     coffee = coffee -1\n","...     print(\"남은 커피의 양은 %d개입니다.\" % coffee)\n","...     if coffee == 0:\n","...         print(\"커피가 다 떨어졌습니다. 판매를 중지합니다.\")\n","...         break\n","..."],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"YIFNEPM1dZon"},"source":["money가 300으로 고정되어 있으므로 while money:에서 조건문인 money는 0이 아니기 때문에 항상 참이다. 따라서 무한히 반복되는 무한 루프를 돌게 된다. 그리고 while문의 내용을 한 번 수행할 때마다 coffee = coffee - 1에 의해서 coffee의 개수가 1개씩 줄어든다. 만약 coffee가 0이 되면 if coffee == 0: 문장에서 coffee == 0:이 참이 되므로 if문 다음 문장 \"커피가 다 떨어졌습니다. 판매를 중지합니다.\"가 수행되고 break문이 호출되어 while문을 빠져나가게 된다.\n","\n","하지만 실제 자판기는 위 예처럼 작동하지는 않을 것이다. 다음은 자판기의 실제 작동 과정과 비슷하게 만들어본 예이다. 이해가 안 되더라도 걱정하지 말자. 다음 예는 조금 복잡하니까 대화형 인터프리터를 사용하지 말고 IDLE 에디터를 사용해서 작성해 보자.\n","\n","※ 대화형 인터프리터가 아닌 IDLE 에디터에서 소스를 입력하는 예제에서는 실제 실습 환경을 반영해 >>>(프롬프트)를 표시하지 않았다. 앞으로 어떤 창에 소스를 입력해야 할지 헷갈릴 때는 이를 참고하자."]},{"cell_type":"code","metadata":{"id":"khDBXEujda5k"},"source":["# coffee.py\n","\n","coffee = 10\n","while True:\n","    money = int(input(\"돈을 넣어 주세요: \"))\n","    if money == 300:\n","        print(\"커피를 줍니다.\")\n","        coffee = coffee -1\n","    elif money > 300:\n","        print(\"거스름돈 %d를 주고 커피를 줍니다.\" % (money -300))\n","        coffee = coffee -1\n","    else:\n","        print(\"돈을 다시 돌려주고 커피를 주지 않습니다.\")\n","        print(\"남은 커피의 양은 %d개 입니다.\" % coffee)\n","    if coffee == 0:\n","        print(\"커피가 다 떨어졌습니다. 판매를 중지 합니다.\")\n","        break"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"KK6K3U5kdcdd"},"source":["위 프로그램 소스를 따로 설명하지는 않겠다. 여러분이 소스를 입력하면서 무슨 내용인지 이해할 수 있다면 지금껏 배운 if문이나 while문을 이해했다고 보면 된다. 만약 money = int(input(\"돈을 넣어 주세요: \")) 문장이 이해되지 않는다면 이 문장은 사용자로부터 값을 입력받는 부분이고 입력받은 숫자를 money 변수에 대입하는 것이라고만 알아두자.\n","\n","이제 coffee.py 파일을 저장한 후 명령 프롬프트 창을 열어 프로그램을 직접 실행해 보자.\n","\n","※ 프로그램 소스를 에디터로 작성해서 실행시키는 방법이 기억나지 않는다면 01-6을 참고하자.\n","\n","다음과 같은 입력 란이 나타난다."]},{"cell_type":"code","metadata":{"id":"c8GLG8YPddz9"},"source":["C:\\doit>python coffee.py\n","돈을 넣어 주세요:"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"e9EvUiA-dfbM"},"source":["입력 란에 여러 숫자를 입력해 보면서 결과를 확인하자."]},{"cell_type":"code","metadata":{"id":"Y4RVuZXXdgm0"},"source":["돈을 넣어 주세요: 500\n","거스름돈 200를 주고 커피를 줍니다.\n","돈을 넣어 주세요: 300\n","커피를 줍니다.\n","돈을 넣어 주세요: 100\n","돈을 다시 돌려주고 커피를 주지 않습니다.\n","남은 커피의 양은 8개입니다.\n","돈을 넣어 주세요:"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"4SoJnuaLdh5L"},"source":["while문의 맨 처음으로 돌아가기\n","while문 안의 문장을 수행할 때 입력 조건을 검사해서 조건에 맞지 않으면 while문을 빠져나간다. 그런데 프로그래밍을 하다 보면 while문을 빠져나가지 않고 while문의 맨 처음(조건문)으로 다시 돌아가게 만들고 싶은 경우가 생기게 된다. 이때 사용하는 것이 바로 continue문이다.\n","\n","1부터 10까지의 숫자 중에서 홀수만 출력하는 것을 while문을 사용해서 작성한다고 생각해보자. 어떤 방법이 좋을까?"]},{"cell_type":"code","metadata":{"id":"95aYvOd3djOW"},"source":[">>> a = 0\n",">>> while a < 10:\n","...     a = a + 1\n","...     if a % 2 == 0: continue\n","...     print(a)\n","...\n","1\n","3\n","5\n","7\n","9"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"wNGAjvTPdk88"},"source":["위 예는 1부터 10까지의 숫자 중 홀수만 출력하는 예이다. a가 10보다 작은 동안 a는 1만큼씩 계속 증가한다. if a % 2 == 0(a를 2로 나누었을 때 나머지가 0인 경우)이 참이 되는 경우는 a가 짝수일 때이다. 즉 a가 짝수이면 continue 문장을 수행한다. 이 continue문은 while문의 맨 처음(조건문: a<10)으로 돌아가게 하는 명령어이다. 따라서 위 예에서 a가 짝수이면 print(a)는 수행되지 않을 것이다.\n","\n","무한 루프\n","이번에는 무한 루프(Loop)에 대해 알아보자. 무한 루프란 무한히 반복한다는 의미이다. 우리가 사용하는 일반 프로그램 중에서 무한 루프 개념을 사용하지 않는 프로그램은 거의 없다. 그만큼 자주 사용한다는 뜻이다.\n","\n","파이썬에서 무한 루프는 while문으로 구현할 수 있다. 다음은 무한 루프의 기본 형태이다."]},{"cell_type":"code","metadata":{"id":"kyFgo6fMdmSf"},"source":["while True: \n","    수행할 문장1 \n","    수행할 문장2\n","    ..."],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"YxaurwgndnTz"},"source":["while문의 조건문이 True이므로 항상 참이 된다. 따라서 while문 안에 있는 문장들은 무한하게 수행될 것이다.\n","\n","다음의 무한 루프 예이다."]},{"cell_type":"code","metadata":{"id":"xHHjAnDBdolk"},"source":[">>> while True:\n","...     print(\"Ctrl+C를 눌러야 while문을 빠져나갈 수 있습니다.\")\n","...\n","Ctrl+C를 눌러야 while문을 빠져나갈 수 있습니다.\n","Ctrl+C를 눌러야 while문을 빠져나갈 수 있습니다.\n","Ctrl+C를 눌러야 while문을 빠져나갈 수 있습니다.\n","...."],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"c9qUi_wYdp6F"},"source":["위 문장은 영원히 출력된다. 하지만 이 예처럼 아무 의미 없이 무한 루프를 돌리는 경우는 거의 없을 것이다. [Ctrl+C]를 눌러 빠져나가자."]},{"cell_type":"markdown","metadata":{"id":"PD-WKI1ldvEL"},"source":["###03-3 for문\n","파이썬의 직관적인 특징을 가장 잘 대변해 주는 것이 바로 이 for문이다. while문과 비슷한 반복문인 for문은 매우 유용하고 문장 구조가 한눈에 쏙 들어온다는 장점이 있다. for문을 잘 사용하면 프로그래밍이 즐거워질 것이다."]},{"cell_type":"markdown","metadata":{"id":"T1YgJeXrdy31"},"source":["**for문의 기본 구조**\n","for문의 기본 구조는 다음과 같다."]},{"cell_type":"code","metadata":{"id":"E1PAVum4d5pL"},"source":["for 변수 in 리스트(또는 튜플, 문자열):\n","    수행할 문장1\n","    수행할 문장2\n","    ..."],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"dPzqBXVXd69Z"},"source":["리스트나 튜플, 문자열의 첫 번째 요소부터 마지막 요소까지 차례로 변수에 대입되어 \"수행할 문장1\", \"수행할 문장2\" 등이 수행된다."]},{"cell_type":"markdown","metadata":{"id":"oNhKre7jd8pE"},"source":["**예제를 통해 for문 이해하기**\n","\n","for문은 예제를 통해서 살펴보는 것이 가장 알기 쉽다. 다음 예제를 직접 입력해 보자.\n","**1. 전형적인 for문**"]},{"cell_type":"code","metadata":{"id":"bId9UfqveBid"},"source":[">>> test_list = ['one', 'two', 'three'] \n",">>> for i in test_list: \n","...     print(i)\n","... \n","one \n","two \n","three"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"KmwSB0skeDfB"},"source":["['one', 'two', 'three'] 리스트의 첫 번째 요소인 'one'이 먼저 i 변수에 대입된 후 print(i) 문장을 수행한다. 다음에 두 번째 요소 'two'가 i 변수에 대입된 후 print(i) 문장을 수행하고 리스트의 마지막 요소까지 이것을 반복한다."]},{"cell_type":"markdown","metadata":{"id":"L-AFbMPNeHH_"},"source":["**2. 다양한 for문의 사용**"]},{"cell_type":"code","metadata":{"id":"HTzCi64leJRM"},"source":[">>> a = [(1,2), (3,4), (5,6)]\n",">>> for (first, last) in a:\n","...     print(first + last)\n","...\n","3\n","7\n","11"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"HA9w60-aeLjD"},"source":["위 예는 a 리스트의 요솟값이 튜플이기 때문에 각각의 요소가 자동으로 (first, last) 변수에 대입된다.\n","\n","※ 이 예는 02장에서 살펴본 튜플을 사용한 변수값 대입 방법과 매우 비슷한 경우이다.\n",">>> (first, last) = (1, 2)"]},{"cell_type":"markdown","metadata":{"id":"vdATzJ8SeNC5"},"source":["**3. for문의 응용**\n","\n","for문의 쓰임새를 알기 위해 다음을 가정해 보자."]},{"cell_type":"code","metadata":{"id":"qaDAsreCePbb"},"source":["\"총 5명의 학생이 시험을 보았는데 시험 점수가 60점이 넘으면 합격이고 그렇지 않으면 불합격이다. 합격인지 불합격인지 결과를 보여 주시오.\""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"F71qcPr2eQdT"},"source":["우선 학생 5명의 시험 점수를 리스트로 표현해 보았다."]},{"cell_type":"code","metadata":{"id":"5m4CfDeWeRkl"},"source":["marks = [90, 25, 67, 45, 80]"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"hrXD0_EuedZI"},"source":["1번 학생은 90점이고 5번 학생은 80점이다.\n","\n","이런 점수를 차례로 검사해서 합격했는지 불합격했는지 통보해 주는 프로그램을 만들어 보자. 역시 IDLE 에디터로 작성한다."]},{"cell_type":"code","metadata":{"id":"j3qFmfDNeezY"},"source":["# marks1.py\n","marks = [90, 25, 67, 45, 80]\n","\n","number = 0 \n","for mark in marks: \n","    number = number +1 \n","    if mark >= 60: \n","        print(\"%d번 학생은 합격입니다.\" % number)\n","    else: \n","        print(\"%d번 학생은 불합격입니다.\" % number)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"gXf15BJjegHG"},"source":["각각의 학생에게 번호를 붙여 주기 위해 number 변수를 사용하였다. 점수 리스트 marks에서 차례로 점수를 꺼내어 mark라는 변수에 대입하고 for문 안의 문장들을 수행한다. 우선 for문이 한 번씩 수행될 때마다 number는 1씩 증가한다.\n","\n","이 프로그램을 실행하면 mark가 60 이상일 때 합격 메시지를 출력하고 60을 넘지 않을 때 불합격 메시지를 출력한다. 명령 프롬프트 창을 열어 실행해 보자."]},{"cell_type":"code","metadata":{"id":"AuTtV2fjehwD"},"source":["C:\\doit>python marks1.py\n","1번 학생은 합격입니다.\n","2번 학생은 불합격입니다.\n","3번 학생은 합격입니다.\n","4번 학생은 불합격입니다.\n","5번 학생은 합격입니다.\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Q8ItZNetejf-"},"source":["**for문과 continue**\n","while문에서 살펴본 continue문을 for문에서도 사용할 수 있다. 즉 for문 안의 문장을 수행하는 도중에 continue문을 만나면 for문의 처음으로 돌아가게 된다.\n","\n","앞에서 for문 응용 예제를 그대로 사용해서 60점 이상인 사람에게는 축하 메시지를 보내고 나머지 사람에게는 아무 메시지도 전하지 않는 프로그램을 에디터를 사용해 작성해 보자."]},{"cell_type":"code","metadata":{"id":"HJ6JVyjzelnG"},"source":["# marks2.py \n","marks = [90, 25, 67, 45, 80]\n","\n","number = 0 \n","for mark in marks: \n","    number = number +1 \n","    if mark < 60:\n","        continue \n","    print(\"%d번 학생 축하합니다. 합격입니다. \" % number)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"IFRbg99HemvB"},"source":["점수가 60점 이하인 학생일 경우에는 mark < 60이 참이 되어 continue문이 수행된다. 따라서 축하 메시지를 출력하는 부분인 print문을 수행하지 않고 for문의 처음으로 돌아가게 된다."]},{"cell_type":"code","metadata":{"id":"MYEznvPYeoWf"},"source":["C:\\doit>python marks2.py\n","1번 학생 축하합니다. 합격입니다.\n","3번 학생 축하합니다. 합격입니다.\n","5번 학생 축하합니다. 합격입니다."],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"hD-YZZ4Jep4d"},"source":["**for문과 함께 자주 사용하는 range 함수**\n","\n","for문은 숫자 리스트를 자동으로 만들어 주는 range 함수와 함께 사용하는 경우가 많다. 다음은 range 함수의 간단한 사용법이다."]},{"cell_type":"code","metadata":{"id":"x0fvK7UdesTy"},"source":[">>> a = range(10)\n",">>> a\n","range(0, 10)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"KgQJYen0etkM"},"source":["range(10)은 0부터 10 미만의 숫자를 포함하는 range 객체를 만들어 준다.\n","\n","시작 숫자와 끝 숫자를 지정하려면 range(시작 숫자, 끝 숫자) 형태를 사용하는데, 이때 끝 숫자는 포함되지 않는다."]},{"cell_type":"code","metadata":{"id":"hvAHCJvZeuvq"},"source":[">>> a = range(1, 11)\n",">>> a\n","range(1, 11)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"xK6ux7zrev_7"},"source":["**range 함수의 예시 살펴보기**\n","\n","for와 range 함수를 사용하면 1부터 10까지 더하는 것을 다음과 같이 쉽게 구현할 수 있다.\n","\n"]},{"cell_type":"code","metadata":{"id":"wfgk9CV0ey0A"},"source":[">>> add = 0 \n",">>> for i in range(1, 11): \n","...     add = add + i \n","... \n",">>> print(add)\n","55"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"-vD_LjNQe1Cy"},"source":["range(1, 11)은 숫자 1부터 10까지(1 이상 11 미만)의 숫자를 데이터로 갖는 객체이다. 따라서 위 예에서 i 변수에 리스트의 숫자가 1부터 10까지 하나씩 차례로 대입되면서 add = add + i 문장을 반복적으로 수행하고 add는 최종적으로 55가 된다.\n","\n","또한 우리가 앞에서 살본 \"60점 이상이면 합격\"이라는 문장을 출력하는 예제도 range 함수를 사용해서 바꿀 수 있다. 다음을 보자."]},{"cell_type":"code","metadata":{"id":"b_DaImI2e2TV"},"source":["#marks3.py\n","marks = [90, 25, 67, 45, 80]\n","for number in range(len(marks)):\n","    if marks[number] < 60: \n","        continue\n","    print(\"%d번 학생 축하합니다. 합격입니다.\" % (number+1))"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"nMS0h5Gue5aI"},"source":["len 함수는 리스트 안의 요소 개수를 돌려주는 함수이다. 따라서 len(marks)는 5가 될 것이고 range(len(marks))는 range(5)가 될 것이다. number 변수에는 차례로 0부터 4까지의 숫자가 대입될 것이고, marks[number]는 차례대로 90, 25, 67, 45, 80 값을 갖게 된다. 결과는 marks2.py 예제와 동일하다."]},{"cell_type":"markdown","metadata":{"id":"tbveGDOie50b"},"source":["**for와 range를 이용한 구구단**\n","\n","for와 range 함수를 사용하면 소스 코드 단 4줄만으로 구구단을 출력할 수 있다. 들여쓰기에 주의하며 입력해 보자."]},{"cell_type":"code","metadata":{"id":"hKnIx4CSe9-O"},"source":[">>> for i in range(2,10):        # ①번 for문\n","...     for j in range(1, 10):   # ②번 for문\n","...         print(i*j, end=\" \") \n","...     print('') \n","... \n","2 4 6 8 10 12 14 16 18 \n","3 6 9 12 15 18 21 24 27 \n","4 8 12 16 20 24 28 32 36\n","5 10 15 20 25 30 35 40 45\n","6 12 18 24 30 36 42 48 54 \n","7 14 21 28 35 42 49 56 63 \n","8 16 24 32 40 48 56 64 72 \n","9 18 27 36 45 54 63 72 81"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"so95ht8ze_Oe"},"source":["위 예를 보면 for문을 두 번 사용했다. ①번 for문에서 2부터 9까지의 숫자(range(2, 10))가 차례로 i에 대입된다. i가 처음 2일 때 ②번 for문을 만나게 된다. ②번 for문에서 1부터 9까지의 숫자(range(1, 10))가 j에 대입되고 그다음 문장 print(i*j)를 수행한다.\n","\n","따라서 i가 2일 때 2*1, 2*2, 2*3, … 2*9까지 차례로 수행되며 그 값을 출력하게 된다. 그다음으로 i가 3일 때 역시 2일 때와 마찬가지로 수행될 것이고 i가 9일 때까지 계속 반복된다."]},{"cell_type":"markdown","metadata":{"id":"Ul1FrkTufA_C"},"source":["[매개변수 end를 넣어 준 이유는 무엇일까?]\n","\n","앞의 예제에서 print(i*j, end=\" \")와 같이 매개변수 end를 넣어 준 이유는 해당 결괏값을 출력할 때 다음줄로 넘기지 않고 그 줄에 계속해서 출력하기 위해서이다. 그다음에 이어지는 print(' ')는 2단, 3단 등을 구분하기 위해 두 번째 for문이 끝나면 결괏값을 다음 줄부터 출력하게 해주는 문장이다."]},{"cell_type":"markdown","metadata":{"id":"wPNIo9CZfCOy"},"source":["**리스트 내포 사용하기**\n","\n","리스트 안에 for문을 포함하는 리스트 내포(List comprehension)를 사용하면 좀 더 편리하고 직관적인 프로그램을 만들 수 있다. 다음 예제를 보자."]},{"cell_type":"code","metadata":{"id":"YsLjmhOJfErS"},"source":[">>> a = [1,2,3,4]\n",">>> result = []\n",">>> for num in a:\n","...     result.append(num*3)\n","...\n",">>> print(result)\n","[3, 6, 9, 12]"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"iKggOnvrfGe-"},"source":["위 예제는 a 리스트의 각 항목에 3을 곱한 결과를 result 리스트에 담는 예제이다.\n","\n","이것을 리스트 내포를 사용하면 다음과 같이 간단히 해결할 수 있다."]},{"cell_type":"code","metadata":{"id":"q_TivwhQfH_0"},"source":[">>> a = [1,2,3,4]\n",">>> result = [num * 3 for num in a]\n",">>> print(result)\n","[3, 6, 9, 12]"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"GJm9O7hPfJWY"},"source":["만약 [1,2,3,4] 중에서 짝수에만 3을 곱하여 담고 싶다면 다음과 같이 리스트 내포 안에 \"if 조건\"을 사용할 수 있다."]},{"cell_type":"code","metadata":{"id":"-LDJ8v37fKev"},"source":[">>> a = [1,2,3,4]\n",">>> result = [num * 3 for num in a if num % 2 == 0]\n",">>> print(result)\n","[6, 12]"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"vWad2KXOfL1s"},"source":["리스트 내포의 일반 문법은 다음과 같다. \"if 조건\" 부분은 앞의 예제에서 볼 수 있듯이 생략할 수 있다."]},{"cell_type":"code","metadata":{"id":"cQsbjAnSfNBf"},"source":["[표현식 for 항목 in 반복가능객체 if 조건문]"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"yegoMZOefOei"},"source":["조금 복잡하지만 for문을 2개 이상 사용하는 것도 가능하다. for문을 여러 개 사용할 때의 문법은 다음과 같다."]},{"cell_type":"code","metadata":{"id":"R28V0ANjfPkd"},"source":["[표현식 for 항목1 in 반복가능객체1 if 조건문1\n","        for 항목2 in 반복가능객체2 if 조건문2\n","        ...\n","        for 항목n in 반복가능객체n if 조건문n]"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"WaSm1NsbfQ5G"},"source":["만약 구구단의 모든 결과를 리스트에 담고 싶다면 리스트 내포를 사용하여 다음과 같이 간단하게 구현할 수도 있다."]},{"cell_type":"code","metadata":{"id":"omHoD8fpfSYy"},"source":[">>> result = [x*y for x in range(2,10)\n","...               for y in range(1,10)]\n",">>> print(result)\n","[2, 4, 6, 8, 10, 12, 14, 16, 18, 3, 6, 9, 12, 15, 18, 21, 24, 27, 4, 8, 12, 16,\n","20, 24, 28, 32, 36, 5, 10, 15, 20, 25, 30, 35, 40, 45, 6, 12, 18, 24, 30, 36, 42\n",", 48, 54, 7, 14, 21, 28, 35, 42, 49, 56, 63, 8, 16, 24, 32, 40, 48, 56, 64, 72,\n","9, 18, 27, 36, 45, 54, 63, 72, 81]"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"WhvJx5UPfT5c"},"source":["지금껏 우리는 프로그램 흐름을 제어하는 if문, while문, for문에 대해 알아보았다. 아마도 여러분은 while문과 for문을 보면서 2가지가 아주 비슷하다는 느낌을 받았을 것이다. 실제로 for문을 사용한 부분을 while문으로 바꿀 수 있는 경우도 많고, while문을 for문으로 바꾸어서 사용할 수 있는 경우도 많다."]},{"cell_type":"markdown","metadata":{"id":"UgGnwfkCflhz"},"source":["###03장 연습문제\n","\n","(연습문제 풀이 : https://wikidocs.net/12769#03)"]},{"cell_type":"markdown","metadata":{"id":"xNIY1lGDfn2S"},"source":["**Q1**\n","\n","다음 코드의 결괏값은 무엇일까?"]},{"cell_type":"code","metadata":{"id":"A26zKPTvfsXZ"},"source":["a = \"Life is too short, you need python\"\n","\n","if \"wife\" in a: print(\"wife\")\n","elif \"python\" in a and \"you\" not in a: print(\"python\")\n","elif \"shirt\" not in a: print(\"shirt\")\n","elif \"need\" in a: print(\"need\")\n","else: print(\"none\")"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ugnCUmfEfuEq"},"source":["**Q2**\n","\n","while문을 사용해 1부터 1000까지의 자연수 중 3의 배수의 합을 구해 보자."]},{"cell_type":"markdown","metadata":{"id":"j0SDNizDfwRn"},"source":["**Q3**\n","\n","while문을 사용하여 다음과 같이 별(*)을 표시하는 프로그램을 작성해 보자."]},{"cell_type":"code","metadata":{"id":"Ks3mH0lufyuc"},"source":["*\n","**\n","***\n","****\n","*****"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"OQkyMZRIfz3N"},"source":["**Q4**\n","\n","for문을 사용해 1부터 100까지의 숫자를 출력해 보자."]},{"cell_type":"markdown","metadata":{"id":"YncLWu78f29z"},"source":["**Q5**\n","\n","A 학급에 총 10명의 학생이 있다. 이 학생들의 중간고사 점수는 다음과 같다.\n","\n","[70, 60, 55, 75, 95, 90, 80, 80, 85, 100]\n","\n","for문을 사용하여 A 학급의 평균 점수를 구해 보자."]},{"cell_type":"markdown","metadata":{"id":"_BuJmpw3f5bu"},"source":["**Q6**\n","\n","리스트 중에서 홀수에만 2를 곱하여 저장하는 다음 코드가 있다."]},{"cell_type":"code","metadata":{"id":"_Buz1OeNf7Wz"},"source":["numbers = [1, 2, 3, 4, 5]\n","result = []\n","for n in numbers:\n","    if n % 2 == 1:\n","        result.append(n*2)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"iic04sxUf8lT"},"source":["위 코드를 리스트 내포(list comprehension)를 사용하여 표현해 보자."]},{"cell_type":"markdown","metadata":{"id":"htvlO6uwgNft"},"source":["**함수를 사용하는 이유는 무엇일까?**\n","\n","프로그래밍을 하다 보면 똑같은 내용을 반복해서 작성하고 있는 자신을 발견할 때가 종종 있다. 이때가 바로 함수가 필요한 때이다. 즉 반복되는 부분이 있을 경우 \"반복적으로 사용되는 가치 있는 부분\"을 한 뭉치로 묶어서 \"어떤 입력값을 주었을 때 어떤 결괏값을 돌려준다\"라는 식의 함수로 작성하는 것이 현명하다.\n","\n","함수를 사용하는 또 다른 이유는 자신이 만든 프로그램을 함수화하면 프로그램 흐름을 일목요연하게 볼 수 있기 때문이다. 마치 공장에서 원재료가 여러 공정을 거쳐 하나의 상품이 되는 것처럼 프로그램에서도 입력한 값이 여러 함수를 거치면서 원하는 결괏값을 내는 것을 볼 수 있다. 이렇게 되면 프로그램 흐름도 잘 파악할 수 있고 오류가 어디에서 나는지도 바로 알아차릴 수 있다. 함수를 잘 사용하고 함수를 적절하게 만들 줄 아는 사람이 능력 있는 프로그래머이다."]},{"cell_type":"markdown","metadata":{"id":"A2M2BaEngpFY"},"source":["**파이썬 함수의 구조**\n","\n","파이썬 함수의 구조는 다음과 같다.\n","\n"]},{"cell_type":"code","metadata":{"id":"lXjQpghlgsIj"},"source":["def 함수명(매개변수):\n","    <수행할 문장1>\n","    <수행할 문장2>\n","    ..."],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"DAL8otpcg6cP"},"source":["def는 함수를 만들 때 사용하는 예약어이며, 함수 이름은 함수를 만드는 사람이 임의로 만들 수 있다. 함수 이름 뒤 괄호 안의 매개변수는 이 함수에 입력으로 전달되는 값을 받는 변수이다. 이렇게 함수를 정의한 다음 if, while, for문 등과 마찬가지로 함수에서 수행할 문장을 입력한다.\n","\n","간단하지만 많은 것을 설명해 주는 다음 예를 보자."]},{"cell_type":"code","metadata":{"id":"VTLYXu7Rg7wG"},"source":["def add(a, b): \n","    return a + b"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"D0J49xJfg9fF"},"source":["위 함수는 다음과 같이 풀이된다.\n","\n","\"이 함수의 이름(함수 이름)은 add이고 입력으로 2개의 값을 받으며 결괏값은 2개의 입력값을 더한 값이다.\"\n","\n","여기에서 return은 함수의 결괏값을 돌려주는 명령어이다. 먼저 다음과 같이 add 함수를 만들자."]},{"cell_type":"code","metadata":{"id":"aJjF4zjZg-Gi"},"source":[">>> def add(a, b):\n","...     return a+b\n","...\n",">>>"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"4n1fjxRAg__y"},"source":["이제 직접 add 함수를 사용해 보자."]},{"cell_type":"code","metadata":{"id":"Oir8s9BBhBxB"},"source":[">>> a = 3\n",">>> b = 4\n",">>> c = add(a, b)\n",">>> print(c)\n","7"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"zTGXOzSDhDLN"},"source":["변수 a에 3, b에 4를 대입한 다음 앞에서 만든 add 함수에 a와 b를 입력값으로 넣어 준다. 그리고 변수 c에 add 함수의 결괏값을 대입하면 print(c)로 c의 값을 확인할 수 있다."]},{"cell_type":"markdown","metadata":{"id":"tbxDsGlKhEqS"},"source":["**매개변수와 인수**\n","\n","매개변수(parameter)와 인수(arguments)는 혼용해서 사용되는 헷갈리는 용어이므로 잘 기억해 두자. 매개변수는 함수에 입력으로 전달된 값을 받는 변수를 의미하고 인수는 함수를 호출할 때 전달하는 입력값을 의미한다."]},{"cell_type":"code","metadata":{"id":"huZizR-xhG03"},"source":["def add(a, b):  # a, b는 매개변수\n","    return a+b\n","\n","print(add(3, 4))  # 3, 4는 인수"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"-90kVgYMhIRT"},"source":["[같은 의미를 가진 여러 가지 용어들에 주의하자]\n","\n","프로그래밍을 공부할 때 어려운 부분 중 하나가 용어의 혼용이라고 할 수 있다. 우리는 공부하면서 원서를 보기도 하고 누군가의 번역본을 보기도 하면서 의미는 같지만 표현이 다른 용어를 자주 만나게 된다. 한 예로 입력값을 다른 말로 함수의 인수, 매개변수 등으로 말하기도 하고 결괏값을 출력값, 반환 값, 돌려주는 값 등으로 말하기도 한다. 이렇듯 많은 용어가 여러 가지 다른 말로 표현되지만 의미는 동일한 경우가 많다. 따라서 이런 용어를 기억해 놓아야 머리가 덜 아플 것이다."]},{"cell_type":"markdown","metadata":{"id":"JJqXk8LFhK5e"},"source":["**입력값과 결괏값에 따른 함수의 형태**\n","\n","함수는 들어온 입력값을 받아 어떤 처리를 하여 적절한 결괏값을 돌려준다.\n","\n","입력값 ---> 함수 ----> 결괏값\n","\n","함수의 형태는 입력값과 결괏값의 존재 유무에 따라 4가지 유형으로 나뉜다. 자세히 알아보자."]},{"cell_type":"markdown","metadata":{"id":"mPNemCo5hM21"},"source":["**일반적인 함수**\n","\n","입력값이 있고 결괏값이 있는 함수가 일반적인 함수이다.\n","\n","앞으로 여러분이 프로그래밍을 할 때 만들 함수는 대부분 다음과 비슷한 형태일 것이다"]},{"cell_type":"code","metadata":{"id":"S_oyuXnThPaT"},"source":["def 함수이름(매개변수):\n","    <수행할 문장>\n","    ...\n","    return 결과값"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"VvnDbMjkhS0t"},"source":["다음은 일반 함수의 전형적인 예이다."]},{"cell_type":"code","metadata":{"id":"t4UNZlYPhUfx"},"source":["def add(a, b): \n","    result = a + b \n","    return result"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"jZWZGlR4hWVL"},"source":["add 함수는 2개의 입력값을 받아서 서로 더한 결괏값을 돌려준다.\n","\n","이 함수를 사용하는 방법은 다음과 같다. 입력값으로 3과 4를 주고 결괏값을 돌려받아 보자."]},{"cell_type":"code","metadata":{"id":"uZMEpaqwhX3m"},"source":[">>> a = add(3, 4)\n",">>> print(a)\n","7"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"524lI4GmhZCL"},"source":["이처럼 입력값과 결괏값이 있는 함수의 사용법을 정리하면 다음과 같다.\n","\n","결괏값을 받을 변수 = 함수이름(입력인수1, 입력인수2, ...)"]},{"cell_type":"markdown","metadata":{"id":"JlsSfZbqhZiu"},"source":["**입력값이 없는 함수**\n","\n","입력값이 없는 함수가 존재할까? 당연히 존재한다. 다음을 보자."]},{"cell_type":"code","metadata":{"id":"mY3Ap1_ehcal"},"source":[">>> def say(): \n","...     return 'Hi' \n","... \n",">>>"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"YfoYr33LhgX9"},"source":["say라는 이름의 함수를 만들었다. 그런데 매개변수 부분을 나타내는 함수 이름 뒤의 괄호 안이 비어 있다. 이 함수는 어떻게 사용하는 걸까?\n","\n","다음을 직접 입력해 보자.\n","\n"]},{"cell_type":"code","metadata":{"id":"xbrURF6chiG2"},"source":[">>> a = say()\n",">>> print(a)\n","Hi\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"5gzQnjLBhj-t"},"source":["위 함수를 쓰기 위해서는 say()처럼 괄호 안에 아무 값도 넣지 않아야 한다. 이 함수는 입력값은 없지만 결괏값으로 Hi라는 문자열을 돌려준다. a = say()처럼 작성하면 a에 Hi 문자열이 대입되는 것이다.\n","\n","이처럼 입력값이 없고 결괏값만 있는 함수는 다음과 같이 사용된다.\n","\n","결괏값을 받을 변수 = 함수이름()"]},{"cell_type":"markdown","metadata":{"id":"StYxzAxqhlsa"},"source":["**결괏값이 없는 함수**\n","\n","결괏값이 없는 함수 역시 존재한다. 다음 예를 보자."]},{"cell_type":"code","metadata":{"id":"0VYwBC2chnpG"},"source":[">>> def add(a, b): \n","...     print(\"%d, %d의 합은 %d입니다.\" % (a, b, a+b))\n","... \n",">>>"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"hKrvEq6Zhpna"},"source":["결괏값이 없는 함수는 호출해도 돌려주는 값이 없기 때문에 다음과 같이 사용한다."]},{"cell_type":"code","metadata":{"id":"Z8FWn2Gshq8m"},"source":[">>> add(3, 4)\n","3, 4의 합은 7입니다."],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"U033ie0mhsmQ"},"source":["즉 결괏값이 없는 함수는 다음과 같이 사용한다.\n","\n","함수이름(입력인수1, 입력인수2, ...)\n","\n","결괏값이 진짜 없는지 확인하기 위해 다음 예를 직접 입력해 보자."]},{"cell_type":"code","metadata":{"id":"3B4_ZN3Mht-i"},"source":[">>> a = add(3, 4)\n","3, 4의 합은 7입니다."],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"nmD61sNnhwID"},"source":["아마도 여러분은 ‘3, 4의 합은 7입니다.’라는 문장을 출력해 주었는데 왜 결괏값이 없다는 것인지 의아하게 생각할 것이다. 이 부분이 초보자들이 혼란스러워하는 부분이기도 한데 print문은 함수의 구성 요소 중 하나인 <수행할 문장>에 해당하는 부분일 뿐이다. 결괏값은 당연히 없다. 결괏값은 오직 return 명령어로만 돌려받을 수 있다.\n","\n","이를 확인해 보자. 돌려받을 값을 a 변수에 대입하여 출력해 보면 결괏값이 있는지 없는지 알 수 있다.\n","\n"]},{"cell_type":"code","metadata":{"id":"2SEbyLSAhyHc"},"source":[">>> a = add(3, 4)\n",">>> print(a)\n","None"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"mk7qrjsLhzyz"},"source":["a 값은 None이다. None이란 거짓을 나타내는 자료형이라고 언급한 적이 있다. add 함수처럼 결괏값이 없을 때 a = add(3, 4)처럼 쓰면 함수 add는 반환 값으로 a 변수에 None을 돌려준다. 이것을 가지고 결괏값이 있다고 생각하면 곤란하다."]},{"cell_type":"markdown","metadata":{"id":"9YjuEGAYh073"},"source":["**입력값도 결괏값도 없는 함수**\n","\n","입력값도 결괏값도 없는 함수 역시 존재한다. 다음 예를 보자."]},{"cell_type":"code","metadata":{"id":"ykWRO1tph3Sx"},"source":[">>> def say(): \n","...     print('Hi')\n","... \n",">>>"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Gd_j7wrgh4pS"},"source":["입력 인수를 받는 매개변수도 없고 return문도 없으니 입력값도 결괏값도 없는 함수이다.\n","\n","이 함수를 사용하는 방법은 단 한 가지이다."]},{"cell_type":"code","metadata":{"id":"WtvQmLfoh5_T"},"source":[">>> say()\n","Hi"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"IrJKO3XNh7eG"},"source":["즉 입력값도 결괏값도 없는 함수는 다음과 같이 사용한다.\n","\n","함수이름()"]},{"cell_type":"markdown","metadata":{"id":"MFCUP7WXh80g"},"source":["**매개변수 지정하여 호출하기**\n","\n","함수를 호출할 때 매개변수를 지정할 수도 있다. 다음 예를 보자."]},{"cell_type":"code","metadata":{"id":"TnjLpmqIh_BR"},"source":[">>> def add(a, b):\n","...     return a+b\n","... "],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"lttZIhkdiAL8"},"source":["앞에서 알아본 add 함수이다. 이 함수를 다음과 같이 매개변수를 지정하여 사용할 수 있다."]},{"cell_type":"code","metadata":{"id":"1DfWGEAgiBNm"},"source":[">>> result = add(a=3, b=7)  # a에 3, b에 7을 전달\n",">>> print(result)\n","10"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"NokahVkPiCcM"},"source":["매개변수를 지정하면 다음과 같이 순서에 상관없이 사용할 수 있다는 장점이 있다."]},{"cell_type":"code","metadata":{"id":"4ac00y2hiDq8"},"source":[">>> result = add(b=5, a=3)  # b에 5, a에 3을 전달\n",">>> print(result)\n","8"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"lfg82zrGiEyX"},"source":["**입력값이 몇 개가 될지 모를 때는 어떻게 해야 할까?**\n","\n","입력값이 여러 개일 때 그 입력값을 모두 더해 주는 함수를 생각해 보자. 하지만 몇 개가 입력될지 모를 때는 어떻게 해야 할까? 아마도 난감할 것이다. 파이썬은 이런 문제를 해결하기 위해 다음과 같은 방법을 제공한다."]},{"cell_type":"code","metadata":{"id":"DnH2-ApFiHLm"},"source":["def 함수이름(*매개변수): \n","    <수행할 문장>\n","    ..."],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"VAwbit6diI2p"},"source":["일반적으로 볼 수 있는 함수 형태에서 괄호 안의 매개변수 부분이 *매개변수로 바뀌었다.\n","\n","여러 개의 입력값을 받는 함수 만들기\n","\n","다음 예를 통해 여러 개의 입력값을 모두 더하는 함수를 직접 만들어 보자. 예를 들어 add_many(1, 2)이면 3을, add_many(1,2,3)이면 6을, add_many(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)이면 55를 돌려주는 함수를 만들어 보자."]},{"cell_type":"code","metadata":{"id":"cZwz-MuGiL9v"},"source":[">>> def add_many(*args): \n","...     result = 0 \n","...     for i in args: \n","...         result = result + i \n","...     return result \n","... \n",">>>"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"fRPKDWhgiNYb"},"source":["위에서 만든 add_many 함수는 입력값이 몇 개이든 상관이 없다. *args처럼 매개변수 이름 앞에 *을 붙이면 입력값을 전부 모아서 튜플로 만들어 주기 때문이다. 만약 add_many(1, 2, 3)처럼 이 함수를 쓰면 args는 (1, 2, 3)이 되고, add_many(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)처럼 쓰면 args는 (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)이 된다. 여기에서 *args는 임의로 정한 변수 이름이다. *pey, *python처럼 아무 이름이나 써도 된다.\n","\n","※ args는 매개변수를 뜻하는 영어 단어 arguments의 약자이며 관례적으로 자주 사용한다.\n","\n","실제로 이 함수를 직접 실행해 보자."]},{"cell_type":"code","metadata":{"id":"QLwgaG3biO91"},"source":[">>> result = add_many(1,2,3)\n",">>> print(result)\n","6\n",">>> result = add_many(1,2,3,4,5,6,7,8,9,10)\n",">>> print(result)\n","55"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ulDuktlsiQXO"},"source":["add_many(1,2,3)으로 함수를 호출하면 6을 돌려주고, add_many(1, 2, 3, 4, 5, 6, 7, 8, 9,10)을 대입하면 55를 돌려준다.\n","\n","여러 개의 입력을 처리할 때 def add_many(*args)처럼 함수의 매개변수로 *args만 사용할 수 있는 것은 아니다.\n","\n","다음 예를 보자."]},{"cell_type":"code","metadata":{"id":"cvq-NhxsiTOw"},"source":[">>> def add_mul(choice, *args): \n","...     if choice == \"add\": \n","...         result = 0 \n","...         for i in args: \n","...             result = result + i \n","...     elif choice == \"mul\": \n","...         result = 1 \n","...         for i in args: \n","...             result = result * i \n","...     return result \n","... \n",">>>"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"bl3n8qh7iUig"},"source":["add_mul 함수는 여러 개의 입력값을 의미하는 *args 매개변수 앞에 choice 매개변수가 추가되어 있다.\n","\n","이 함수는 다음과 같이 사용할 수 있다."]},{"cell_type":"code","metadata":{"id":"f27s98pmiV75"},"source":[">>> result = add_mul('add', 1,2,3,4,5)\n",">>> print(result)\n","15\n",">>> result = add_mul('mul', 1,2,3,4,5)\n",">>> print(result)\n","120"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"LzYnYwe5iXFP"},"source":["매개변수 choice에 'add'가 입력된 경우 *args에 입력되는 모든 값을 더해서 15를 돌려주고, 'mul'이 입력된 경우 *args에 입력되는 모든 값을 곱해서 120을 돌려준다."]},{"cell_type":"markdown","metadata":{"id":"hswz0BBAiYzK"},"source":["**키워드 파라미터 kwargs**\n","\n","이번에는 키워드 파라미터에 대해 알아보자. 키워드 파라미터를 사용할 때는 매개변수 앞에 별 두 개(**)를 붙인다. 역시 이것도 예제로 알아보자. 먼저 다음과 같은 함수를 작성한다."]},{"cell_type":"code","metadata":{"id":"CQ_CDXYaibAq"},"source":[">>> def print_kwargs(**kwargs):\n","...     print(kwargs)\n","..."],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"NELrzSViicYl"},"source":["print_kwargs 함수는 매개변수 kwargs를 출력하는 함수이다. 이제 이 함수를 다음과 같이 사용해 보자."]},{"cell_type":"code","metadata":{"id":"D5BfwIZuiczJ"},"source":[">>> print_kwargs(a=1)\n","{'a': 1}\n",">>> print_kwargs(name='foo', age=3)\n","{'age': 3, 'name': 'foo'}"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"k_PjfZJPifpD"},"source":["입력값 a=1 또는 name='foo', age=3이 모두 딕셔너리로 만들어져서 출력된다는 것을 확인할 수 있다. 즉 **kwargs처럼 매개변수 이름 앞에 **을 붙이면 매개변수 kwargs는 딕셔너리가 되고 모든 key=value 형태의 결괏값이 그 딕셔너리에 저장된다.\n","\n","※ 여기에서 kwargs는 keyword arguments의 약자이며 args와 마찬가지로 관례적으로 사용한다."]},{"cell_type":"markdown","metadata":{"id":"bpNS_OWXihNu"},"source":["**함수의 결괏값은 언제나 하나이다**\n","\n","먼저 다음 함수를 만들어 보자."]},{"cell_type":"code","metadata":{"id":"LL8L7fmVijqE"},"source":[">>> def add_and_mul(a,b): \n","...     return a+b, a*b"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"dtBuJGYHilBq"},"source":["※ add_and_mul 함수는 2개의 입력 인수를 받아 더한 값과 곱한 값을 돌려주는 함수이다.\n","\n","이 함수를 다음과 같이 호출하면 어떻게 될까?"]},{"cell_type":"code","metadata":{"id":"blXDMt99imTX"},"source":[">>> result = add_and_mul(3,4)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"aVbgUk8iinZL"},"source":["결괏값은 a+b와 a*b 2개인데 결괏값을 받아들이는 변수는 result 하나만 쓰였으니 오류가 발생하지 않을까? 당연한 의문이다. 하지만 오류는 발생하지 않는다. 그 이유는 함수의 결괏값은 2개가 아니라 언제나 1개라는 데 있다. add_and_mul 함수의 결괏값 a+b와 a*b는 튜플값 하나인 (a+b, a*b)로 돌려준다.\n","\n","따라서 result 변수는 다음과 같은 값을 갖게 된다."]},{"cell_type":"code","metadata":{"id":"h_blb98Viod9"},"source":["result = (7, 12)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"0cdUs2xYiqU6"},"source":["즉 결괏값으로 (7, 12)라는 튜플 값을 갖게 되는 것이다.\n","\n","만약 이 하나의 튜플 값을 2개의 결괏값처럼 받고 싶다면 다음과 같이 함수를 호출하면 된다."]},{"cell_type":"code","metadata":{"id":"AGE-W6tZirpy"},"source":[">>> result1, result2 = add_and_mul(3, 4)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"86Rw4KipitJ7"},"source":["이렇게 호출하면 result1, result2 = (7, 12)가 되어 result1은 7이 되고 result2는 12가 된다.\n","\n","또 다음과 같은 의문이 생길 수도 있다."]},{"cell_type":"code","metadata":{"id":"eSTNKGcQiuX3"},"source":[">>> def add_and_mul(a,b): \n","...     return a+b \n","...     return a*b \n","... \n",">>>"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"MD8MYa-Fiv2r"},"source":["위와 같이 return문을 2번 사용하면 2개의 결괏값을 돌려주지 않을까? 하지만 파이썬에서 위와 같은 함수는 참 어리석은 함수이다.\n","\n","그 이유는 add_and_mul 함수를 호출해 보면 알 수 있다."]},{"cell_type":"code","metadata":{"id":"SHn5fFmoixIE"},"source":[">>> result = add_and_mul(2, 3)\n",">>> print(result)\n","5"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"tHJ1wn7diyXt"},"source":["※ add_and_mul(2, 3)의 결괏값은 5 하나뿐이다. 두 번째 return문인 return a*b는 실행되지 않았다는 뜻이다.\n","\n","이 예에서 볼 수 있듯이 두 번째 return문인 return a*b는 실행되지 않았다. 따라서 이 함수는 다음과 완전히 동일하다."]},{"cell_type":"code","metadata":{"id":"9S-TOZYti0Tn"},"source":[">>> def add_and_mul(a,b): \n","...     return a+b \n","... \n",">>>"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"6UpySU7si1qM"},"source":["즉 함수는 return문을 만나는 순간 결괏값을 돌려준 다음 함수를 빠져나가게 된다."]},{"cell_type":"markdown","metadata":{"id":"jzSNFGTOi3bX"},"source":["[return의 또 다른 쓰임새]\n","\n","특별한 상황일 때 함수를 빠져나가고 싶다면 return을 단독으로 써서 함수를 즉시 빠져나갈 수 있다. 다음 예를 보자."]},{"cell_type":"code","metadata":{"id":"d8seQgL2i5T_"},"source":[">>> def say_nick(nick): \n","...     if nick == \"바보\": \n","...         return \n","...     print(\"나의 별명은 %s 입니다.\" % nick)\n","... \n",">>>"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"HnWjmkjai6jJ"},"source":["위 함수는 '별명'을 입력으로 전달받아 출력하는 함수이다. 이 함수 역시 반환 값(결괏값)은 없다(문자열을 출력한다는 것과 반환 값이 있다는 것은 전혀 다른 말이다. 혼동하지 말자. 함수의 반환 값은 오로지 return문에 의해서만 생성된다).\n","\n","만약에 입력값으로 '바보'라는 값이 들어오면 문자열을 출력하지 않고 함수를 즉시 빠져나간다."]},{"cell_type":"code","metadata":{"id":"PjHgI5SHi7of"},"source":[">>> say_nick('야호')\n","나의 별명은 야호입니다.\n",">>> say_nick('바보')\n",">>>"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"isARGn1fi9Eb"},"source":["이처럼 return으로 함수를 빠져나가는 방법은 실제 프로그래밍에서 자주 사용한다."]},{"cell_type":"markdown","metadata":{"id":"hGJeFG1pi_MG"},"source":["**매개변수에 초깃값 미리 설정하기**\n","이번에는 조금 다른 형태로 함수의 인수를 전달하는 방법에 대해서 알아보자. 매개변수에 초깃값을 미리 설정해 주는 경우이다.\n","\n","※ >>>(프롬프트) 표시가 없으니 IDLE 에디터에서 작성하자."]},{"cell_type":"code","metadata":{"id":"CmQKWTGyjA9V"},"source":["def say_myself(name, old, man=True): \n","    print(\"나의 이름은 %s 입니다.\" % name) \n","    print(\"나이는 %d살입니다.\" % old) \n","    if man: \n","        print(\"남자입니다.\")\n","    else: \n","        print(\"여자입니다.\")"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"qiETI_GPjCWm"},"source":["※ say_myself 함수는 3개의 매개변수를 받아서 마지막 인수인 man이 True이면 \"남자입니다.\", False이면 \"여자입니다.\"를 출력한다.\n","\n","위 함수를 보면 매개변수가 name, old, man=True 이렇게 3개다. 그런데 낯선 것이 나왔다. man=True처럼 매개변수에 미리 값을 넣어 준 것이다. 이것이 바로 함수의 매개변수 초깃값을 설정하는 방법이다. 함수의 매개변수에 들어갈 값이 항상 변하는 것이 아닐 경우에는 이렇게 함수의 초깃값을 미리 설정해 두면 유용하다.\n","\n","say_myself 함수는 다음처럼 사용할 수 있다."]},{"cell_type":"code","metadata":{"id":"vGX-_KmKjDzB"},"source":["say_myself(\"박응용\", 27)\n","say_myself(\"박응용\", 27, True)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"GB76k7ZvjE_e"},"source":["입력값으로 \"박응용\", 27처럼 2개를 주면 name에는 \"박응용\"이 old에는 27이 대입된다. 그리고 man이라는 변수에는 입력값을 주지 않았지만 초깃값 True를 갖게 된다.\n","\n","따라서 위 예에서 함수를 사용한 2가지 방법은 모두 동일한 결과를 출력한다."]},{"cell_type":"code","metadata":{"id":"AHrVKD1wjGMD"},"source":["나의 이름은 박응용입니다.\n","나이는 27살입니다.\n","남자입니다."],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"M_N_J9PbjHWN"},"source":["이제 초깃값이 설정된 부분을 False로 바꿔 보자."]},{"cell_type":"code","metadata":{"id":"MUFHK9mnjIch"},"source":["say_myself(\"박응선\", 27, False)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"UyY5yZdhjJmy"},"source":["man 변수에 False 값이 대입되어 다음과 같은 결과가 출력된다."]},{"cell_type":"code","metadata":{"id":"xvuT61o0jLFx"},"source":["나의 이름은 박응선입니다.\n","나이는 27살입니다.\n","여자입니다."],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ua89wbYbjMd3"},"source":["함수의 매개변수에 초깃값을 설정할 때 주의할 것이 하나 있다. 만약 위에서 본 say_myself 함수를 다음과 같이 만들면 어떻게 될까?\n","\n"]},{"cell_type":"code","metadata":{"id":"ExBg6X0PjN8p"},"source":["def say_myself(name, man=True, old): \n","    print(\"나의 이름은 %s 입니다.\" % name) \n","    print(\"나이는 %d살입니다.\" % old) \n","    if man: \n","        print(\"남자입니다.\") \n","    else: \n","        print(\"여자입니다.\")\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"gVIAcXQpjPf0"},"source":["이전 함수와 바뀐 부분은 초깃값을 설정한 매개변수의 위치이다. 결론을 미리 말하면 이것은 함수를 실행할 때 오류가 발생한다.\n","\n","얼핏 생각하기에 위 함수를 호출하려면 다음과 같이 하면 될 것 같다."]},{"cell_type":"code","metadata":{"id":"OcDG3BGrjRST"},"source":["say_myself(\"박응용\", 27)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"4jVI3HzvjSfF"},"source":["위와 같이 함수를 호출한다면 name 변수에는 \"박응용\"이 들어갈 것이다. 하지만 파이썬 인터프리터는 27을 man 변수와 old 변수 중 어느 곳에 대입해야 할지 알 수 없게 된다.\n","\n","오류 메시지를 보면 다음과 같다."]},{"cell_type":"code","metadata":{"id":"sNTdTUUCjT0Y"},"source":["SyntaxError: non-default argument follows default argument\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"8jNp98UhjVbP"},"source":["위 오류 메시지는 초깃값을 설정해 놓은 매개변수 뒤에 초깃값을 설정해 놓지 않은 매개변수는 사용할 수 없다는 뜻이다. 즉 매개변수로 (name, old, man=True)는 되지만 (name, man=True, old)는 안 된다는 것이다. 초기화시키고 싶은 매개변수를 항상 뒤쪽에 놓는 것을 잊지 말자."]},{"cell_type":"markdown","metadata":{"id":"jD9hQiMqjXFi"},"source":["**함수 안에서 선언한 변수의 효력 범위**\n","\n","함수 안에서 사용할 변수의 이름을 함수 밖에서도 동일하게 사용한다면 어떻게 될까? 이런 궁금증이 생겼던 독자라면 이번에 확실하게 답을 찾을 수 있을 것이다.\n","\n","다음 예를 보자."]},{"cell_type":"code","metadata":{"id":"U6BzocbfjaID"},"source":["# vartest.py\n","a = 1\n","def vartest(a):\n","    a = a +1\n","\n","vartest(a)\n","print(a)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"bS5r3GccjcHG"},"source":["먼저 a라는 변수를 생성하고 1을 대입한다. 다음 입력으로 들어온 값에 1을 더해 주고 결괏값은 돌려주지 않는 vartest 함수를 선언한다. 그리고 vartest 함수에 입력값으로 a를 주었다. 마지막으로 a의 값을 출력하는 print(a)를 입력한다. 과연 결괏값은 무엇이 나올까?\n","\n","당연히 vartest 함수에서 매개변수 a의 값에 1을 더했으니까 2가 출력될 것 같지만 프로그램 소스를 작성해서 실행해 보면 결괏값은 1이 나온다. 그 이유는 함수 안에서 새로 만든 매개변수는 함수 안에서만 사용하는 \"함수만의 변수\"이기 때문이다. 즉 def vartest(a)에서 입력값을 전달받는 매개변수 a는 함수 안에서만 사용하는 변수이지 함수 밖의 변수 a가 아니라는 뜻이다.\n","\n","따라서 vartest 함수는 다음처럼 변수 이름을 hello로 한 vartest 함수와 완전히 동일하다."]},{"cell_type":"code","metadata":{"id":"3K0heug2jd2l"},"source":["def vartest(hello):\n","    hello = hello + 1"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"V73R2HVXje-3"},"source":["즉 함수 안에서 사용하는 매개변수는 함수 밖의 변수 이름과는 전혀 상관이 없다는 뜻이다.\n","\n","다음 예를 보면 더욱 분명하게 이해할 수 있을 것이다."]},{"cell_type":"code","metadata":{"id":"aCNCuzLDjgIS"},"source":["# vartest_error.py\n","def vartest(a):\n","    a = a + 1\n","\n","vartest(3)\n","print(a)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ii5OUFz4jhXs"},"source":["위 프로그램 소스를 에디터로 작성해서 실행하면 어떻게 될까? 오류가 발생할 것이라고 생각한 독자는 모든 것을 이해한 독자이다. vartest(3)을 수행하면 vartest 함수 안에서 a는 4가 되지만 함수를 호출하고 난 뒤에 print(a) 문장은 오류가 발생하게 된다. 그 이유는 print(a)에서 입력받아야 하는 a 변수를 어디에서도 찾을 수가 없기 때문이다. 다시 말하지만 함수 안에서 선언한 매개변수는 함수 안에서만 사용될 뿐 함수 밖에서는 사용되지 않는다. 이것을 이해하는 것은 매우 중요하다."]},{"cell_type":"markdown","metadata":{"id":"FtM3HVsojkhk"},"source":["**함수 안에서 함수 밖의 변수를 변경하는 방법**\n","\n","그렇다면 vartest라는 함수를 사용해서 함수 밖의 변수 a를 1만큼 증가시킬 수 있는 방법은 없을까? 이 질문에는 2가지 해결 방법이 있다."]},{"cell_type":"markdown","metadata":{"id":"cbP4gZ4ijmfJ"},"source":["1. return 사용하기"]},{"cell_type":"code","metadata":{"id":"0oWe9-O9jm1-"},"source":["# vartest_return.py\n","a = 1 \n","def vartest(a): \n","    a = a +1 \n","    return a\n","\n","a = vartest(a) \n","print(a)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"9F_udFTijpMU"},"source":["첫 번째 방법은 return을 사용하는 방법이다. vartest 함수는 입력으로 들어온 값에 1을 더한값을 돌려준다. 따라서 a = vartest(a)라고 대입하면 a가 vartest 함수의 결괏값으로 바뀐다. 여기에서도 물론 vartest 함수 안의 a 매개변수는 함수 밖의 a와는 다른 것이다.\n","\n"]},{"cell_type":"markdown","metadata":{"id":"je7Go9u1jra3"},"source":["**2. global 명령어 사용하기**"]},{"cell_type":"code","metadata":{"id":"R_4KIYeHjtJ4"},"source":["# vartest_global.py\n","a = 1 \n","def vartest(): \n","    global a \n","    a = a+1\n","\n","vartest() \n","print(a)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"YAbKFDbDjvQ4"},"source":["두 번째 방법은 global 명령어를 사용하는 방법이다. 위 예에서 볼 수 있듯이 vartest 함수 안의 global a 문장은 함수 안에서 함수 밖의 a 변수를 직접 사용하겠다는 뜻이다. 하지만 프로그래밍을 할 때 global 명령어는 사용하지 않는 것이 좋다. 왜냐하면 함수는 독립적으로 존재하는 것이 좋기 때문이다. 외부 변수에 종속적인 함수는 그다지 좋은 함수가 아니다. 그러므로 가급적 global 명령어를 사용하는 이 방법은 피하고 첫 번째 방법을 사용하기를 권한다."]},{"cell_type":"markdown","metadata":{"id":"OuMn0UbAjxxm"},"source":["**lambda**\n","\n","lambda는 함수를 생성할 때 사용하는 예약어로 def와 동일한 역할을 한다. 보통 함수를 한줄로 간결하게 만들 때 사용한다. 우리말로는 \"람다\"라고 읽고 def를 사용해야 할 정도로 복잡하지 않거나 def를 사용할 수 없는 곳에 주로 쓰인다.\n","\n","사용법은 다음과 같다.\n","\n","lambda 매개변수1, 매개변수2, ... : 매개변수를 이용한 표현식\n","\n","한번 직접 만들어 보자."]},{"cell_type":"code","metadata":{"id":"iSqpra3vj0Nk"},"source":[">>> add = lambda a, b: a+b\n",">>> result = add(3, 4)\n",">>> print(result)\n","7"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"07n8ejxlj1c8"},"source":["add는 두 개의 인수를 받아 서로 더한 값을 돌려주는 lambda 함수이다. 위 예제는 def를 사용한 다음 함수와 하는 일이 완전히 동일하다."]},{"cell_type":"code","metadata":{"id":"2N4R4V4tj2n8"},"source":[">>> def add(a, b):\n","...     return a+b\n","...\n",">>> result = add(3, 4)\n",">>> print(result)\n","7"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"XIkmEzusj4Dm"},"source":["※ lambda 예약어로 만든 함수는 return 명령어가 없어도 결괏값을 돌려준다."]},{"cell_type":"markdown","metadata":{"id":"XWHq4MpXlQL2"},"source":["input은 입력되는 모든 것을 문자열로 취급한다."]},{"cell_type":"markdown","metadata":{"id":"3qDMpDi-lRkm"},"source":["**프롬프트를 띄워서 사용자 입력 받기**\n","\n","사용자에게 입력받을 때 \"숫자를 입력하세요\"라든지 \"이름을 입력하세요\"라는 안내 문구 또는 질문이 나오도록 하고 싶을 때가 있다. 그럴 때는 input()의 괄호 안에 질문을 입력하여 프롬프트를 띄워주면 된다.\n","\n","input(\"질문 내용\")\n","\n","다음 예를 직접 입력해 보자."]},{"cell_type":"code","metadata":{"id":"DZ9us2MklTc5"},"source":[">>> number = input(\"숫자를 입력하세요: \")\n","숫자를 입력하세요:"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"FjHyVnyYlWan"},"source":["위와 같은 질문을 볼 수 있을 것이다.\n","\n","숫자를 입력하라는 프롬프트에 3을 입력하면 변수 number에 3이 대입된다. print(number)로 출력해서 제대로 입력되었는지 확인해 보자."]},{"cell_type":"code","metadata":{"id":"jejsSghxlXnD"},"source":[">>> number = input(\"숫자를 입력하세요: \")\n","숫자를 입력하세요: 3\n",">>> print(number)\n","3\n",">>>"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"QEul1G-ClZc7"},"source":["**print 자세히 알기**\n","\n","지금껏 print문이 수행해 온 일은 우리가 입력한 자료형을 출력하는 것이었다. print의 사용예는 다음과 같다."]},{"cell_type":"code","metadata":{"id":"xnSJTl_vldlH"},"source":[">>> a = 123\n",">>> print(a)\n","123\n",">>> a = \"Python\"\n",">>> print(a)\n","Python\n",">>> a = [1, 2, 3]\n",">>> print(a)\n","[1, 2, 3]"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"_2klwKX5lfMK"},"source":["이제 print문으로 할 수 있는 일에 대해서 조금 더 자세하게 알아보자."]},{"cell_type":"markdown","metadata":{"id":"g-bLiA_glfqU"},"source":["**큰따옴표(\")로 둘러싸인 문자열은 + 연산과 동일하다**"]},{"cell_type":"code","metadata":{"id":"_IzV4PY7lid-"},"source":[">>> print(\"life\" \"is\" \"too short\") # ①\n","lifeistoo short\n",">>> print(\"life\"+\"is\"+\"too short\") # ②\n","lifeistoo short"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"6cTWzLtylj-M"},"source":["위 예에서 ①과 ②는 완전히 동일한 결괏값을 출력한다. 즉 따옴표로 둘러싸인 문자열을 연속해서 쓰면 + 연산을 한 것과 같다."]},{"cell_type":"markdown","metadata":{"id":"am7nRdDBlkQk"},"source":["**문자열 띄어쓰기는 콤마로 한다**"]},{"cell_type":"code","metadata":{"id":"7GGqK8j8lnvU"},"source":[">>> print(\"life\", \"is\", \"too short\")\n","life is too short"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"GOV40iL-lpCp"},"source":["콤마(,)를 사용하면 문자열 사이에 띄어쓰기를 할 수 있다."]},{"cell_type":"markdown","metadata":{"id":"6SBIKljwlq_J"},"source":["**한 줄에 결괏값 출력하기**\n","\n","03-3에서 for문을 배울 때 만들었던 구구단 프로그램에서 보았듯이 한 줄에 결괏값을 계속 이어서 출력하려면 매개변수 end를 사용해 끝 문자를 지정해야 한다."]},{"cell_type":"code","metadata":{"id":"sva4UnpOls6k"},"source":[">>> for i in range(10):\n","...     print(i, end=' ')\n","...\n","0 1 2 3 4 5 6 7 8 9"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"UVhOAh_ul2jP"},"source":["**파일 생성하기**\n","\n","다음 소스 코드를 에디터로 작성해서 저장한 후 실행해 보자. 프로그램을 실행한 디렉터리에 새로운 파일이 하나 생성된 것을 확인할 수 있을 것이다."]},{"cell_type":"code","metadata":{"id":"pVcZHqV1l5dd"},"source":["파일 생성하기\n","다음 소스 코드를 에디터로 작성해서 저장한 후 실행해 보자. 프로그램을 실행한 디렉터리에 새로운 파일이 하나 생성된 것을 확인할 수 있을 것이다."],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"0ApjaJ4wl7YB"},"source":["파일을 생성하기 위해 우리는 파이썬 내장 함수 open을 사용했다. open 함수는 다음과 같이 \"파일 이름\"과 \"파일 열기 모드\"를 입력값으로 받고 결괏값으로 파일 객체를 돌려준다.\n","\n","파일 객체 = open(파일 이름, 파일 열기 모드)\n","\n","파일 열기 모드에는 다음과 같은 것이 있다.\n","\n","파일열기모드\t설명\n","r\t읽기모드 - 파일을 읽기만 할 때 사용\n","w\t쓰기모드 - 파일에 내용을 쓸 때 사용\n","a\t추가모드 - 파일의 마지막에 새로운 내용을 추가 시킬 때 사용\n","\n","파일을 쓰기 모드로 열면 해당 파일이 이미 존재할 경우 원래 있던 내용이 모두 사라지고, 해당 파일이 존재하지 않으면 새로운 파일이 생성된다. 위 예에서는 디렉터리에 파일이 없는 상태에서 새파일.txt를 쓰기 모드인 'w'로 열었기 때문에 새파일.txt라는 이름의 새로운 파일이 현재 디렉터리에 생성되는 것이다."]},{"cell_type":"markdown","metadata":{"id":"wRor39mbmADR"},"source":["만약 새파일.txt 파일을 C:/doit 디렉터리에 생성하고 싶다면 다음과 같이 작성해야 한다."]},{"cell_type":"code","metadata":{"id":"1PnLj5lcmBmb"},"source":["f = open(\"C:/doit/새파일.txt\", 'w')\n","f.close()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"1j6VOzhqmDNN"},"source":["위 예에서 f.close()는 열려 있는 파일 객체를 닫아 주는 역할을 한다. 사실 이 문장은 생략해도 된다. 프로그램을 종료할 때 파이썬 프로그램이 열려 있는 파일의 객체를 자동으로 닫아주기 때문이다. 하지만 close()를 사용해서 열려 있는 파일을 직접 닫아 주는 것이 좋다. 쓰기모드로 열었던 파일을 닫지 않고 다시 사용하려고 하면 오류가 발생하기 때문이다."]},{"cell_type":"markdown","metadata":{"id":"mcKkC1MhmEey"},"source":["**파일을 쓰기 모드로 열어 출력값 적기**\n","\n","위 예에서는 파일을 쓰기 모드로 열기만 했지 정작 아무것도 쓰지는 않았다. 이번에는 에디터를 열고 프로그램의 출력값을 파일에 직접 써 보자."]},{"cell_type":"code","metadata":{"id":"Bgf7XSk-mIEt"},"source":["# writedata.py\n","f = open(\"C:/doit/새파일.txt\", 'w')\n","for i in range(1, 11):\n","    data = \"%d번째 줄입니다.\\n\" % i\n","    f.write(data)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"uQv5NbWfmJ9M"},"source":["f.close()위 프로그램을 다음 프로그램과 비교해 보자.\n"]},{"cell_type":"code","metadata":{"id":"gSMfzNiRmLTg"},"source":["for i in range(1, 11):\n","    data = \"%d번째 줄입니다.\\n\" % i\n","    print(data)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"zKRx3QfCmNDV"},"source":["두 프로그램의 다른 점은 data를 출력하는 방법이다. 두 번째 방법은 우리가 계속 사용해 왔던 모니터 화면에 출력하는 방법이고, 첫 번째 방법은 모니터 화면 대신 파일에 결괏값을 적는 방법이다. 두 방법의 차이점은 print 대신 파일 객체 f의 write 함수를 사용한 것 말고는 없으니 바로 눈에 들어올 것이다.\n","\n","이제 명령 프롬프트 창에서 첫 번째 예제를 실행해 보자."]},{"cell_type":"code","metadata":{"id":"fwvdXcwFmOYv"},"source":["C:\\Users> cd C:\\doit\n","C:\\doit>python writedata.py\n","C:\\doit>"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Qh5zbY8WmPwz"},"source":["이 프로그램을 실행한 C:/doit 디렉터리를 살펴보면 새파일.txt 파일이 생성되었음을 확인할수 있다. 새파일.txt 파일에는 어떤 내용이 담겨 있는지 확인해 보자."]},{"cell_type":"markdown","metadata":{"id":"bV4jEKCxmVTY"},"source":["**프로그램의 외부에 저장된 파일을 읽는 여러 가지 방법**\n","\n","파이썬에는 외부 파일을 읽어 들여 프로그램에서 사용할 수 있는 여러 가지 방법이 있다. 이번에는 그 방법을 자세히 알아보자."]},{"cell_type":"markdown","metadata":{"id":"W69oRPnsmZ4k"},"source":["**readline() 함수 이용하기**\n","\n","첫 번째 방법은 readline 함수를 사용하는 방법이다. 다음 예를 보자."]},{"cell_type":"code","metadata":{"id":"GLy-YfFsmcZ-"},"source":["# readline_test.py\n","f = open(\"C:/doit/새파일.txt\", 'r')\n","line = f.readline()\n","print(line)\n","f.close()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"LnUozQWWmdzz"},"source":["위 예는 f.open(\"새파일.txt\", 'r')로 파일을 읽기 모드로 연 후 readline()을 사용해서 파일의 첫 번째 줄을 읽어 출력하는 경우이다. 앞에서 만든 새파일.txt를 수정하거나 지우지 않았다면 위 프로그램을 실행했을 때 새파일.txt의 가장 첫 번째 줄이 화면에 출력될 것이다."]},{"cell_type":"code","metadata":{"id":"CQa0_3xKmeHS"},"source":["1번째 줄입니다."],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"8E3zHj3qmfTv"},"source":["만약 모든 줄을 읽어서 화면에 출력하고 싶다면 다음과 같이 작성하면 된다."]},{"cell_type":"code","metadata":{"id":"6RYxAMPjmhyY"},"source":["# readline_all.py\n","f = open(\"C:/doit/새파일.txt\", 'r')\n","while True:\n","    line = f.readline()\n","    if not line: break\n","    print(line)\n","f.close()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"lcdFYIkVmsFq"},"source":[""]},{"cell_type":"markdown","metadata":{"id":"6qsStQtGmi7M"},"source":["즉 while True: 무한 루프 안에서 f.readline()을 사용해 파일을 계속해서 한 줄씩 읽어 들인다. 만약 더 이상 읽을 줄이 없으면 break를 수행한다(readline()은 더 이상 읽을 줄이 없을 경우 빈 문자열('')을 리턴한다).\n","\n","앞의 프로그램을 다음 프로그램과 비교해 보자."]},{"cell_type":"code","metadata":{"id":"vjawV5Xwmks-"},"source":["while 1:\n","    data = input()\n","    if not data: break\n","    print(data)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"P7M823OCmmLf"},"source":["위 예는 사용자의 입력을 받아서 그 내용을 출력하는 경우이다. 파일을 읽어서 출력하는 예제와 비교해 보자. 입력을 받는 방식만 다르다는 것을 바로 알 수 있을 것이다. 두 번째 예는 키보드를 사용한 입력 방법이고, 첫 번째 예는 파일을 사용한 입력 방법이다."]},{"cell_type":"markdown","metadata":{"id":"oPlxG4G7mnXQ"},"source":["**readlines 함수 사용하기**\n","\n","두 번째 방법은 readlines 함수를 사용하는 방법이다. 다음 예를 보자."]},{"cell_type":"code","metadata":{"id":"Y1mTRUpQmqJV"},"source":["f = open(\"C:/doit/새파일.txt\", 'r')\n","lines = f.readlines()\n","for line in lines:\n","    print(line)\n","f.close()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"MnzSucTqmtN7"},"source":["readlines 함수는 파일의 모든 줄을 읽어서 각각의 줄을 요소로 갖는 리스트로 돌려준다. 따라서 위 예에서 lines는 리스트 [\"1 번째 줄입니다.\", \"2 번째 줄입니다.\", ..., \"10 번째 줄입니다.\"]가 된다. f.readlines()에서 f.readline()과는 달리 s가 하나 더 붙어 있음에 유의하자."]},{"cell_type":"markdown","metadata":{"id":"nrodWnNRmvWU"},"source":["**read 함수 사용하기**\n","\n","세 번째 방법은 read 함수를 사용하는 방법이다. 다음 예를 보자."]},{"cell_type":"code","metadata":{"id":"h5w-KrLemxg2"},"source":["f = open(\"C:/doit/새파일.txt\", 'r')\n","data = f.read()\n","print(data)\n","f.close()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"25AiPGZMmzM1"},"source":["f.read()는 파일의 내용 전체를 문자열로 돌려준다. 따라서 위 예의 data는 파일의 전체 내용이다."]},{"cell_type":"markdown","metadata":{"id":"G89cbTYom0gq"},"source":["**파일에 새로운 내용 추가하기**\n","\n","쓰기 모드('w')로 파일을 열 때 이미 존재하는 파일을 열면 그 파일의 내용이 모두 사라지게 된다. 하지만 원래 있던 값을 유지하면서 단지 새로운 값만 추가해야 할 경우도 있다. 이런 경우에는 파일을 추가 모드('a')로 열면 된다. 에디터를 켜고 다음 소스 코드를 작성해 보자."]},{"cell_type":"code","metadata":{"id":"Wh5qzPLkm3Gn"},"source":["# adddata.py\n","f = open(\"C:/doit/새파일.txt\",'a')\n","for i in range(11, 20):\n","    data = \"%d번째 줄입니다.\\n\" % i\n","    f.write(data)\n","f.close()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"l9mucdiLm4SQ"},"source":["위 예는 새파일.txt 파일을 추가 모드('a')로 열고 write를 사용해서 결괏값을 기존 파일에 추가해 적는 예이다. 여기에서 추가 모드로 파일을 열었기 때문에 새파일.txt 파일이 원래 가지고 있던 내용 바로 다음부터 결괏값을 적기 시작한다.\n","\n","다음과 같이 작성한 코드를 실행해 보자."]},{"cell_type":"code","metadata":{"id":"marGYZipm5r3"},"source":["C:\\Users> cd C:\\doit\n","C:\\doit>python adddata.py\n","C:\\doit>"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"2JDabDe6m7eL"},"source":["새파일.txt 파일을 확인해 보면 원래 있던 내용 뒤에 새로운 내용이 추가되었음을 볼 수 있다."]},{"cell_type":"markdown","metadata":{"id":"VJaxFcrFm-xL"},"source":["**with문과 함께 사용하기**\n","\n","지금까지 살펴본 예제를 보면 항상 다음과 같은 방식으로 파일을 열고 닫아 왔다."]},{"cell_type":"code","metadata":{"id":"Jgzf2SgknBw6"},"source":["f = open(\"foo.txt\", 'w')\n","f.write(\"Life is too short, you need python\")\n","f.close()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"RaH4N_C3nDO-"},"source":["파일을 열면 위와 같이 항상 close해 주는 것이 좋다. 하지만 이렇게 파일을 열고 닫는 것을 자동으로 처리할 수 있다면 편리하지 않을까? 파이썬의 with문이 바로 이런 역할을 해준다. 다음 예는 with문을 사용해서 위 예제를 다시 작성한 모습이다."]},{"cell_type":"code","metadata":{"id":"1Scgha3wnEgW"},"source":["with open(\"foo.txt\", \"w\") as f:\n","    f.write(\"Life is too short, you need python\")"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"uN02TQzgnGKG"},"source":["위와 같이 with문을 사용하면 with 블록을 벗어나는 순간 열린 파일 객체 f가 자동으로 close되어 편리하다."]},{"cell_type":"markdown","metadata":{"id":"0MRnBfR3nHj5"},"source":["[sys 모듈로 매개변수 주기]\n","\n","명령 프롬프트(DOS)를 사용해 본 독자라면 다음과 같은 명령어를 사용해 봤을 것이다."]},{"cell_type":"code","metadata":{"id":"8x686ShJnJHB"},"source":["C:\\> type a.txt"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Zj-I15uznLKx"},"source":["위 type 명령어는 바로 뒤에 적힌 파일 이름을 인수로 받아 그 내용을 출력해 주는 명령 프롬프트 명령어이다. 대부분의 명령 프롬프트 명령어는 다음과 같이 명령행(명령 프롬프트 창)에서 매개변수를 직접 주어 프로그램을 실행하는 방식을 따른다. 이러한 기능을 파이썬 프로그램에도 적용할 수가 있다.\n","\n","명령 프롬프트 명령어 [인수1 인수2 ...]\n","\n","파이썬에서는 sys 모듈을 사용하여 매개변수를 직접 줄 수있다. sys 모듈을 사용하려면 아래 예의 import sys처럼 import 명령어를 사용해야 한다.\n","\n","※ 모듈을 사용하고 만드는 방법에 대해서는 05장에서 자세히 다룰 것이다."]},{"cell_type":"code","metadata":{"id":"DNziH0sbnM0v"},"source":["#sys1.py\n","import sys\n","\n","args = sys.argv[1:]\n","for i in args:\n","    print(i)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"_Q_DWlUTnOnk"},"source":["위 예는 입력받은 인수를 for문을 사용해 차례대로 하나씩 출력하는 예이다. sys 모듈의 argv는 명령 창에서 입력한 인수를 의미한다. 즉 다음과 같이 입력했다면 argv[0]은 파일 이름 sys1.py가 되고 argv[1]부터는 뒤에 따라오는 인수가 차례로 argv의 요소가 된다."]},{"cell_type":"markdown","metadata":{"id":"cR7MPdhinYNB"},"source":["이 프로그램을 C:\\doit 디렉터리에 저장한 후 매개변수를 함께 주어 실행하면 다음과 같은 결괏값을 얻을 수 있다."]},{"cell_type":"code","metadata":{"id":"JZ-zZTqonZl7"},"source":["C:\\doit>python sys1.py aaa bbb ccc\n","aaa\n","bbb\n","ccc"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"LL8Q_m9anbPo"},"source":["위 예를 사용해서 간단한 스크립트를 하나 만들어 보자."]},{"cell_type":"code","metadata":{"id":"dVK_4yOxngrY"},"source":["#sys2.py\n","import sys\n","args = sys.argv[1:]\n","for i in args:\n","    print(i.upper(), end=' ')"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"zDL-qC0uniPW"},"source":["자열 관련 함수인 upper()를 사용하여 명령 행에 입력된 소문자를 대문자로 바꾸어 주는 간단한 프로그램이다. 명령프롬프트 창에서 다음과 같이 입력해 보자.\n","\n","※ sys2.py 파일이 C:\\doit 디렉터리 안에 있어야만 한다."]},{"cell_type":"code","metadata":{"id":"oAVPXMeWnj2P"},"source":["C:\\doit>python sys2.py life is too short, you need python"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"4ie8DT1eno0B"},"source":["결과는 다음과 같다."]},{"cell_type":"code","metadata":{"id":"Iq4MW5qenqXi"},"source":["LIFE IS TOO SHORT, YOU NEED PYTHON"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ADR8uI9Fn0T5"},"source":["**Q1**\n","\n","주어진 자연수가 홀수인지 짝수인지 판별해 주는 함수(is_odd)를 작성해 보자."]},{"cell_type":"markdown","metadata":{"id":"kKmkJ92en2tl"},"source":["**Q2**\n","\n","입력으로 들어오는 모든 수의 평균 값을 계산해 주는 함수를 작성해 보자. (단 입력으로 들어오는 수의 개수는 정해져 있지 않다.)\n","\n","※ 평균 값을 구할 때 len 함수를 사용해 보자."]},{"cell_type":"markdown","metadata":{"id":"e_044FOXn5Bk"},"source":["**Q3**\n","\n","다음은 두 개의 숫자를 입력받아 더하여 돌려주는 프로그램이다."]},{"cell_type":"code","metadata":{"id":"fvHa49hvn7Zh"},"source":["input1 = input(\"첫번째 숫자를 입력하세요:\")\n","input2 = input(\"두번째 숫자를 입력하세요:\")\n","\n","total = input1 + input2\n","print(\"두 수의 합은 %s 입니다\" % total)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"yRxyUlrzn8kM"},"source":["이 프로그램을 수행해 보자."]},{"cell_type":"code","metadata":{"id":"MxyrBGhRn9oO"},"source":["첫번째 숫자를 입력하세요:3\n","두번째 숫자를 입력하세요:6\n","두 수의 합은 36 입니다"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ZHPWvY4Cn_GP"},"source":["3과 6을 입력했을 때 9가 아닌 36이라는 결괏값을 돌려주었다. 이 프로그램의 오류를 수정해 보자.\n","\n","※ int 함수를 사용해 보자."]},{"cell_type":"markdown","metadata":{"id":"Umrn9sz5oBpy"},"source":["**Q4**\n","\n","다음 중 출력 결과가 다른 것 한 개를 골라 보자.\n","\n","1.print(\"you\" \"need\" \"python\")\n","2.print(\"you\"+\"need\"+\"python\")\n","3.print(\"you\", \"need\", \"python\")\n","4.print(\"\".join([\"you\", \"need\", \"python\"]))"]},{"cell_type":"markdown","metadata":{"id":"uRuLPckNoHbn"},"source":["**Q5**\n","\n","다음은 \"test.txt\"라는 파일에 \"Life is too short\" 문자열을 저장한 후 다시 그 파일을 읽어서 출력하는 프로그램이다."]},{"cell_type":"code","metadata":{"id":"g79MUZzyoJjw"},"source":["f1 = open(\"test.txt\", 'w')\n","f1.write(\"Life is too short\")\n","\n","f2 = open(\"test.txt\", 'r')\n","print(f2.read())"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"XJGjK9x_oKrE"},"source":["이 프로그램은 우리가 예상한 \"Life is too short\"라는 문장을 출력하지 않는다. 우리가 예상한 값을 출력할 수 있도록 프로그램을 수정해 보자.\n","\n"]},{"cell_type":"markdown","metadata":{"id":"KrhSDkfjoMiN"},"source":["**Q6**\n","\n","사용자의 입력을 파일(test.txt)에 저장하는 프로그램을 작성해 보자. (단 프로그램을 다시 실행하더라도 기존에 작성한 내용을 유지하고 새로 입력한 내용을 추가해야 한다.)"]},{"cell_type":"markdown","metadata":{"id":"iyT2ORpKoPfi"},"source":["**Q7**\n","\n","다음과 같은 내용을 지닌 파일 test.txt가 있다. 이 파일의 내용 중 \"java\"라는 문자열을 \"python\"으로 바꾸어서 저장해 보자."]},{"cell_type":"code","metadata":{"id":"yxj05Uz7oRkl"},"source":["Life is too short\n","you need java"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"h2in75rSoS9_"},"source":["※ replace 함수를 사용해 보자."]},{"cell_type":"markdown","metadata":{"id":"KywlXZ4johEp"},"source":["**클래스는 왜 필요한가?**\n","\n","프로그래머들이 가장 많이 사용하는 프로그래밍 언어 중 하나인 C 언어에는 클래스가 없다. 이 말은 굳이 클래스가 없어도 프로그램을 충분히 만들 수 있다는 뜻이다. 파이썬으로 잘 만든 프로그램을 살펴보아도 클래스를 사용하지 않고 작성한 것들이 상당히 많다. 클래스는 지금까지 공부한 함수나 자료형처럼 프로그램 작성을 위해 꼭 필요한 요소는 아니다.\n","\n","하지만 프로그램을 작성할 때 클래스를 적재적소에 사용하면 프로그래머가 얻을 수 있는 이익은 상당하다. 예제를 통해 한번 생각해 보자.\n","\n","계산기를 사용해 보았을 것이다. 계산기에 숫자 3을 입력하고 + 기호를 입력한 후 4를 입력하면 결괏값으로 7을 보여 준다. 다시 한 번 + 기호를 입력한 후 3을 입력하면 기존 결괏값 7에 3을 더해 10을 보여 준다. 즉 계산기는 이전에 계산한 결괏값을 항상 메모리 어딘가에 저장하고 있어야 한다."]},{"cell_type":"markdown","metadata":{"id":"XRBX8xYKon2A"},"source":["이런 내용을 우리가 앞에서 익힌 함수를 이용해 구현해 보자. 계산기의 \"더하기\" 기능을 구현한 파이썬 코드는 다음과 같다."]},{"cell_type":"code","metadata":{"id":"iUXTRoz_opd1"},"source":["result = 0\n","\n","def add(num):\n","    global result\n","    result += num\n","    return result\n","\n","print(add(3))\n","print(add(4))"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Ww_eEXKqorXY"},"source":["※ add 함수는 매개변수 num에 받은 값을 이전에 계산한 결괏값에 더한 후 돌려주는 함수이다.\n","\n","이전에 계산한 결괏값을 유지하기 위해서 result 전역 변수(global)를 사용했다. 프로그램을 실행하면 예상한 대로 다음과 같은 결괏값이 출력된다."]},{"cell_type":"code","metadata":{"id":"rya0Y0bQosoE"},"source":["3 \n","7"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"4IofWBeOotyF"},"source":["그런데 만일 한 프로그램에서 2대의 계산기가 필요한 상황이 발생하면 어떻게 해야 할까? 각 계산기는 각각의 결괏값을 유지해야 하기 때문에 위와 같이 add 함수 하나만으로는 결괏값을 따로 유지할 수 없다.\n","\n","이런 상황을 해결하려면 다음과 같이 함수를 각각 따로 만들어야 한다."]},{"cell_type":"code","metadata":{"id":"BdbJRWj_ovCi"},"source":["result1 = 0\n","result2 = 0\n","\n","def add1(num):\n","    global result1\n","    result1 += num\n","    return result1\n","\n","def add2(num):\n","    global result2\n","    result2 += num\n","    return result2\n","\n","print(add1(3))\n","print(add1(4))\n","print(add2(3))\n","print(add2(7))"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"bdXeML3jowy5"},"source":["똑같은 일을 하는 add1과 add2 함수를 만들었고 각 함수에서 계산한 결괏값을 유지하면서 저장하는 전역 변수 result1, result2가 필요하게 되었다.\n","\n","결괏값은 다음과 같이 의도한 대로 출력된다."]},{"cell_type":"code","metadata":{"id":"C3hAP1q0oyEZ"},"source":["3\n","7\n","3\n","10"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"frhkX8kYozXn"},"source":["계산기 1의 결괏값이 계산기 2에 아무 영향을 끼치지 않음을 확인할 수 있다. 하지만 계산기가 3개, 5개, 10개로 점점 더 많이 필요해진다면 어떻게 해야 할까? 그때마다 전역 변수와 함수를 추가할 것인가? 여기에 빼기나 곱하기 등의 기능을 추가해야 한다면 상황은 점점 더 어려워질 것이다.\n","\n","아직 클래스에 대해 배우지 않았지만, 위와 같은 경우에 클래스를 사용하면 다음과 같이 간단하게 해결할 수 있다.\n","\n","※ 다음 예시 클래스를 아직은 이해하지 못해도 좋다. 곧 자세하게 배울 것이다. 여기에서는 클래스 개념만 이해하면 된다."]},{"cell_type":"code","metadata":{"id":"tZqagHIKo0wB"},"source":["class Calculator:\n","    def __init__(self):\n","        self.result = 0\n","\n","    def add(self, num):\n","        self.result += num\n","        return self.result\n","\n","cal1 = Calculator()\n","cal2 = Calculator()\n","\n","print(cal1.add(3))\n","print(cal1.add(4))\n","print(cal2.add(3))\n","print(cal2.add(7))"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"XqEtOSlBo2PN"},"source":["프로그램을 실행하면 함수 2개를 사용했을 때와 동일한 결과가 출력된다."]},{"cell_type":"code","metadata":{"id":"ENan31BBo3Zk"},"source":["3\n","7\n","3\n","10"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Xv6JZh4ao4iV"},"source":["Calculator 클래스로 만든 별개의 계산기 cal1, cal2(파이썬에서는 이것을 객체라고 부른다)가 각각의 역할을 수행한다. 그리고 계산기(cal1, cal2)의 결괏값 역시 다른 계산기의 결괏값과 상관없이 독립적인 값을 유지한다. 클래스를 사용하면 계산기 대수가 늘어나더라도 객체를 생성만 하면 되기 때문에 함수를 사용하는 경우와 달리 매우 간단해진다. 만약 빼기 기능을 더하려면 Calculator 클래스에 다음과 같은 빼기 기능 함수를 추가해 주면 된다."]},{"cell_type":"code","metadata":{"id":"D-ccDUpTo5wr"},"source":["def sub(self, num):\n","        self.result -= num\n","        return self.result"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"nM3uI9Eco6_r"},"source":["클래스의 이점은 단순히 이것만이 아니다. 하지만 이것 하나만으로도 \"도대체 왜 클래스가 필요한 것일까?\"라는 근본적인 물음에 대한 해답이 되었을 것이다."]},{"cell_type":"markdown","metadata":{"id":"QcztlrqZo8LU"},"source":["**클래스와 객체**\n","\n","과자를 만드는 과자 틀과 그것을 사용해 만든 과자이다.\n","\n","과자 틀 → 클래스 (class)\n","과자 틀에 의해서 만들어진 과자 → 객체 (object)\n","\n","여기에서 설명할 클래스는 과자 틀과 비슷하다. 클래스(class)란 똑같은 무엇인가를 계속해서 만들어 낼 수 있는 설계 도면이고(과자 틀), 객체(object)란 클래스로 만든 피조물(과자 틀을 사용해 만든 과자)을 뜻한다.\n","\n","클래스로 만든 객체에는 중요한 특징이 있다. 바로 객체마다 고유한 성격을 가진다는 것이다. 과자 틀로 만든 과자에 구멍을 뚫거나 조금 베어 먹더라도 다른 과자에는 아무 영향이 없는 것과 마찬가지로 동일한 클래스로 만든 객체들은 서로 전혀 영향을 주지 않는다.\n","\n","다음은 파이썬 클래스의 가장 간단한 예이다."]},{"cell_type":"code","metadata":{"id":"-YOClG-OpE_e"},"source":[">>> class Cookie:\n",">>>    pass"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"GwkBBpcdpGb8"},"source":["위의 클래스는 아무 기능도 갖고 있지 않은 껍질뿐인 클래스이다. 하지만 이렇게 껍질뿐인 클래스도 객체를 생성하는 기능이 있다. \"과자 틀\"로 \"과자\"를 만드는 것처럼 말이다.\n","\n","객체는 클래스로 만들며 1개의 클래스는 무수히 많은 객체를 만들어 낼 수 있다. 위에서 만든 Cookie 클래스의 객체를 만드는 방법은 다음과 같다."]},{"cell_type":"code","metadata":{"id":"YFTtWPaLpH98"},"source":[">>> a = Cookie()\n",">>> b = Cookie()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ZRwmNJB-pJh1"},"source":["Cookie()의 결괏값을 돌려받은 a와 b가 바로 객체이다. 마치 함수를 사용해서 그 결괏값을 돌려받는 모습과 비슷하다."]},{"cell_type":"markdown","metadata":{"id":"muriZLe9pMRV"},"source":["**[객체와 인스턴스의 차이]**\n","\n","클래스로 만든 객체를 인스턴스라고도 한다. 그렇다면 객체와 인스턴스의 차이는 무엇일까? 이렇게 생각해 보자. a = Cookie() 이렇게 만든 a는 객체이다. 그리고 a 객체는 Cookie의 인스턴스이다. 즉 인스턴스라는 말은 특정 객체(a)가 어떤 클래스(Cookie)의 객체인지를 관계 위주로 설명할 때 사용한다. \"a는 인스턴스\"보다는 \"a는 객체\"라는 표현이 어울리며 \"a는 Cookie의 객체\"보다는 \"a는 Cookie의 인스턴스\"라는 표현이 훨씬 잘 어울린다."]},{"cell_type":"markdown","metadata":{"id":"StekdGUqpOyq"},"source":["**사칙연산 클래스 만들기**\n","\n","\"백견(見)이 불여 일타(打)\"라고 했다. 클래스를 직접 만들며 배워 보자.\n","\n","여기에서는 사칙연산을 쉽게 해주는 클래스를 만들어 볼 것이다. 사칙연산은 더하기, 빼기, 나누기, 곱하기를 말한다."]},{"cell_type":"markdown","metadata":{"id":"ZIJEr_ekpUKw"},"source":["**클래스를 어떻게 만들지 먼저 구상하기**\n","\n","클래스는 무작정 만드는 것보다 클래스로 만든 객체를 중심으로 어떤 식으로 동작하게 할것인지 미리 구상을 한 후에 생각한 것들을 하나씩 해결하면서 완성해 나가는 것이 좋다.\n","\n","사칙연산을 가능하게 하는 FourCal 클래스가 다음처럼 동작한다고 가정해 보자.\n","\n"]},{"cell_type":"markdown","metadata":{"id":"JKI4PAUBpy5x"},"source":["먼저 a = FourCal()를 입력해서 a라는 객체를 만든다."]},{"cell_type":"code","metadata":{"id":"rUtCMKutpzY9"},"source":[">>> a = FourCal()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"JbhRC-qOp0yJ"},"source":["그런 다음 a.setdata(4, 2)처럼 입력해서 숫자 4와 2를 a에 지정해 주고"]},{"cell_type":"code","metadata":{"id":"FyOSE2k1p2Ko"},"source":[">>> a.setdata(4, 2)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"buenOZlTp3RT"},"source":["a.add()를 수행하면 두 수를 합한 결과(4 + 2)를 돌려주고"]},{"cell_type":"code","metadata":{"id":"iOD8fKj2p4qS"},"source":[">>> print(a.add())\n","6"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"258IRYZWp5k5"},"source":["a.mul()을 수행하면 두 수를 곱한 결과(4 * 2)를 돌려주고"]},{"cell_type":"code","metadata":{"id":"GgpnjoAbp64a"},"source":[">>> print(a.mul())\n","8"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"cvnjK7JYp8UX"},"source":["a.sub()를 수행하면 두 수를 뺀 결과(4 - 2)를 돌려주고"]},{"cell_type":"code","metadata":{"id":"v5TpBHsUp-Hv"},"source":[">>> print(a.sub())\n","2"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"R4k9-W4Lp_Ly"},"source":["a.div()를 수행하면 두 수를 나눈 결과(4 / 2)를 돌려준다."]},{"cell_type":"code","metadata":{"id":"TqT7h-YrqAaK"},"source":[">>> print(a.div())\n","2"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"GfmOnjYmqBQC"},"source":["이렇게 동작하는 FourCal 클래스를 만드는 것이 바로 우리의 목표이다."]},{"cell_type":"markdown","metadata":{"id":"X97ZVgL8qCcq"},"source":["**클래스 구조 만들기**\n","\n","자, 그러면 지금부터 앞에서 구상한 것처럼 동작하는 클래스를 만들어 보자. 제일 먼저 할 일은 a = FourCal()처럼 객체를 만들 수 있게 하는 것이다. 일단은 아무 기능이 없어도 되기 때문에 매우 간단하게 만들 수 있다. 다음을 따라 해 보자."]},{"cell_type":"code","metadata":{"id":"YURyrmz1qGot"},"source":[">>> class FourCal:\n","...     pass\n","... \n",">>>"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"99ZmMM39qIaH"},"source":["우선 대화형 인터프리터에서 pass란 문장만을 포함한 FourCal 클래스를 만든다. 현재 상태에서 FourCal 클래스는 아무 변수나 함수도 포함하지 않지만 우리가 원하는 객체 a를 만들 수 있는 기능은 가지고 있다. 확인해 보자.\n","\n","※ pass는 아무것도 수행하지 않는 문법으로 임시로 코드를 작성할 때 주로 사용한다."]},{"cell_type":"code","metadata":{"id":"YIZ3B0AKqJsg"},"source":[">>> a = FourCal()\n",">>> type(a)\n","<class '__main__.FourCal'>"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"-StxGysRqLSP"},"source":["위와 같이 a = FourCal()로 a 객체를 먼저 만들고 그다음에 type(a)로 a 객체가 어떤 타입인지 알아보았다. 역시 객체 a가 FourCal 클래스의 객체임을 알 수 있다.\n","\n","※ type 함수는 파이썬이 자체로 가지고 있는 내장 함수로 객체 타입을 출력한다."]},{"cell_type":"markdown","metadata":{"id":"ScKT1JaOqNEQ"},"source":["**객체에 숫자 지정할 수 있게 만들기**\n","\n","하지만 생성된 객체 a는 아직 아무런 기능도 하지 못한다. 이제 더하기, 나누기, 곱하기, 빼기등의 기능을 하는 객체를 만들어야 한다. 그런데 이러한 기능을 갖춘 객체를 만들려면 우선 a 객체에 사칙연산을 할 때 사용할 2개의 숫자를 먼저 알려주어야 한다. 다음과 같이 연산을 수행할 대상(4, 2)을 객체에 지정할 수 있게 만들어 보자."]},{"cell_type":"code","metadata":{"id":"h2ZbEVe2qStI"},"source":[">>> a.setdata(4, 2)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"OUPNeNHKqTKn"},"source":["위 문장을 수행하려면 다음과 같이 소스 코드를 작성해야 한다."]},{"cell_type":"code","metadata":{"id":"DwSU7GrFqUOw"},"source":[">>> class FourCal:\n","...     def setdata(self, first, second):\n","...         self.first = first\n","...         self.second = second\n","...\n",">>>"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"EXAqBppNqW1d"},"source":["앞에서 만든 FourCal 클래스에서 pass 문장을 삭제하고 그 대신 setdata 함수를 만들었다. 클래스 안에 구현된 함수는 다른 말로 메서드(Method)라고 부른다. 앞으로 클래스 내부의 함수는 항상 메서드라고 표현할 테니 메서드라는 용어를 기억해 두자.\n","\n","일반적인 함수를 만들 때 다음과 같이 작성한다."]},{"cell_type":"code","metadata":{"id":"9-lmG-O8qYbr"},"source":["def 함수명(매개변수):\n","    수행할 문장\n","    ..."],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Vzb2EqHdqaHo"},"source":["메서드도 클래스에 포함되어 있다는 점만 제외하면 일반 함수와 다를 것이 없다.\n","\n","setdata 메서드를 다시 보면 다음과 같다."]},{"cell_type":"code","metadata":{"id":"goGMvKpLqbX4"},"source":["def setdata(self, first, second):   # ① 메서드의 매개변수\n","    self.first = first              # ② 메서드의 수행문\n","    self.second = second            # ② 메서드의 수행문"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"OobMAtfaqc_A"},"source":["**① setdata 메서드의 매개변수**\n","\n","setdata 메서드는 매개변수로 self, first, second 3개 입력값을 받는다. 그런데 일반 함수와는 달리 메서드의 첫 번째 매개변수 self는 특별한 의미를 가진다.\n","\n","다음과 같이 a 객체를 만들고 a 객체를 통해 setdata 메서드를 호출해 보자."]},{"cell_type":"code","metadata":{"id":"N_0KE23oqeQl"},"source":[">>> a = FourCal()\n",">>> a.setdata(4, 2)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"iN3eu0TUqhz-"},"source":["※ 객체를 통해 클래스의 메서드를 호출하려면 a.setdata(4, 2)와 같이 도트(.) 연산자를 사용해야 한다.\n","\n","그런데 뭔가 좀 이상하지 않은가? setdata 메서드에는 self, first, second 총 3개의 매개변수가 필요한데 실제로는 a.setdata(4, 2)처럼 2개 값만 전달했다. 왜 그럴까? 그 이유는 a.setdata(4, 2)처럼 호출하면 setdata 메서드의 첫 번째 매개변수 self에는 setdata메서드를 호출한 객체 a가 자동으로 전달되기 때문이다."]},{"cell_type":"markdown","metadata":{"id":"vjTB5rYTqpke"},"source":["파이썬 메서드의 첫 번째 매개변수 이름은 관례적으로 self를 사용한다. 객체를 호출할 때 호출한 객체 자신이 전달되기 때문에 self를 사용한 것이다. 물론 self말고 다른 이름을 사용해도 상관없다.\n","\n","※ 메서드의 첫 번째 매개변수 self를 명시적으로 구현하는 것은 파이썬만의 독특한 특징이다. 예를 들어 자바 같은 언어는 첫 번째 매개변수 self가 필요없다."]},{"cell_type":"markdown","metadata":{"id":"yBNSV_nyqszu"},"source":["**[메서드의 또 다른 호출 방법]**\n","\n","잘 사용하지는 않지만 다음과 같이 클래스를 통해 메서드를 호출하는 것도 가능하다."]},{"cell_type":"code","metadata":{"id":"P1J7Cn9gqu1u"},"source":[">>> a = FourCal()\n",">>> FourCal.setdata(a, 4, 2)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"wKGqdImoqwGU"},"source":["위와 같이 클래스 이름.메서드 형태로 호출할 때는 객체 a를 첫 번째 매개변수 self에 꼭 전달해 주어야 한다. 반면에 다음처럼 객체.메서드 형태로 호출할 때는 self를 반드시 생략해서 호출해야 한다."]},{"cell_type":"code","metadata":{"id":"oZFugw4fqwqU"},"source":[">>> a = FourCal()\n",">>> a.setdata(4, 2)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ub0OkxyQqx0t"},"source":["**② setdata 메서드의 수행문**\n","\n","이제 setdata 메서드의 수행문에 대해 알아보자."]},{"cell_type":"code","metadata":{"id":"MuVFgC62q0KK"},"source":["def setdata(self, first, second):   # ① 메서드의 매개변수\n","    self.first = first              # ② 메서드의 수행문\n","    self.second = second            # ② 메서드의 수행문"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"hAnBMRM9q1lH"},"source":["a.setdata(4, 2)처럼 호출하면 setdata 메서드의 매개변수 first, second에는 각각 값 4와 2가 전달되어 setdata 메서드의 수행문은 다음과 같이 해석된다."]},{"cell_type":"code","metadata":{"id":"PjlWDpxpq3ah"},"source":["self.first = 4\n","self.second = 2"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"DHpg9c6Eq4wO"},"source":["self는 전달된 객체 a이므로 다시 다음과 같이 해석된다."]},{"cell_type":"code","metadata":{"id":"HOCe5Jjnq559"},"source":["a.first = 4\n","a.second = 2"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"IXmAgdLEq7pA"},"source":["a.first = 4 문장이 수행되면 a 객체에 객체변수 first가 생성되고 값 4가 저장된다. 마찬가지로 a.second = 2 문장이 수행되면 a 객체에 객체변수 second가 생성되고 값 2가 저장된다.\n","\n","※ 객체에 생성되는 객체만의 변수를 객체변수라고 부른다.\n","\n","다음과 같이 확인해 보자."]},{"cell_type":"code","metadata":{"id":"MYJG0ubjq9Uq"},"source":[">>> a = FourCal()\n",">>> a.setdata(4, 2)\n",">>> print(a.first)\n","4\n",">>> print(a.second)\n","2"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"x-4rWUUPq-nN"},"source":["a 객체에 객체변수 first와 second가 생성되었음을 확인할 수 있다.\n","\n","이번에는 다음과 같이 a, b 객체를 만들어 보자."]},{"cell_type":"code","metadata":{"id":"rNA76ZQorAx2"},"source":[">>> a = FourCal()\n",">>> b = FourCal()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"NU4eRJlTrCTw"},"source":["그리고 a 객체의 객체변수 first를 다음과 같이 생성한다."]},{"cell_type":"code","metadata":{"id":"u0Uoy4HPrD16"},"source":[">>> a.setdata(4, 2)\n",">>> print(a.first)\n","4"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"BWPtsY3IrFC3"},"source":["이번에는 b 객체의 객체변수 first를 다음과 같이 생성한다."]},{"cell_type":"code","metadata":{"id":"QKYInBWfrGGc"},"source":[">>> b.setdata(3, 7)\n",">>> print(b.first)\n","3"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"eq5tRwxErHX6"},"source":["자, 이제 여러분에게 아주 중요한 질문을 한 가지 하겠다. 위와 같이 진행하면 b 객체의 객체변수 first에는 값 3이 저장된다는 것을 확인할 수 있었다. 그렇다면 a 객체의 first는 3으로 변할까? 아니면 기존 값 4를 유지할까? 다음과 같이 그 결과를 확인해 보자."]},{"cell_type":"code","metadata":{"id":"j0P07YVErIqO"},"source":[">>> print(a.first)\n","4"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"k7R6PPu2rKRU"},"source":["a 객체의 first 값은 b 객체의 first 값에 영향받지 않고 원래 값을 유지하고 있음을 확인할 수 있다. 이 예제를 통해 여러분에게 강조하고 싶은 점이 바로 이것이다. 클래스로 만든 객체의 객체변수는 다른 객체의 객체변수에 상관없이 독립적인 값을 유지한다.\n","\n","id 함수를 사용하면 객체변수가 독립적인 값을 유지한다는 점을 좀 더 명확하게 증명해 보일 수 있다. 다시 다음과 같이 따라 해 보자.\n","\n","※ id 함수는 객체의 주소를 돌려주는 파이썬 내장 함수이다."]},{"cell_type":"code","metadata":{"id":"F3PwzLRkrL5H"},"source":[">>> a = FourCal()\n",">>> b = FourCal()\n",">>> a.setdata(4, 2)\n",">>> b.setdata(3, 7)\n",">>> id(a.first)   # a의 first 주소값을 확인\n","1839194944\n",">>> id(b.first)   # b의 first 주소값을 확인\n","1839194928"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"WvOAZe4srNP9"},"source":["a 객체의 first 주소 값과 b 객체의 first 주소 값이 서로 다르므로 각각 다른 곳에 그 값이 저장된다는 것을 알 수 있다. 객체변수는 그 객체의 고유 값을 저장할 수 있는 공간이다. 객체 변수는 다른 객체들 영향받지 않고 독립적으로 그 값을 유지한다는 점을 꼭 기억하자. 클래스에서는 이 부분을 이해하는 것이 가장 중요하다.\n","\n","다음은 현재까지 완성된 FourCal 클래스이다."]},{"cell_type":"code","metadata":{"id":"-5akB49TrOkW"},"source":[">>> class FourCal:\n","...     def setdata(self, first, second):\n","...         self.first = first\n","...         self.second = second\n","...\n",">>>"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"OYoH-TK1rQDB"},"source":["지금까지 살펴본 내용이 바로 위 4줄을 설명하기 위한 것이었다. 위에서 설명한 것들이 이해가 되지 않는다면 다시 한 번 읽어 보기 바란다. 이 부분을 이해하지 못하면 다음으로 넘어갈수 없기 때문이다."]},{"cell_type":"markdown","metadata":{"id":"_6xmqQ5yrRWt"},"source":["**더하기 기능 만들기**\n","\n","자! 그럼 2개의 숫자 값을 설정해 주었으니 2개의 숫자를 더하는 기능을 방금 만든 클래스에 추가해 보자. 우리는 다음과 같이 더하기 기능을 갖춘 클래스를 만들어야 한다."]},{"cell_type":"code","metadata":{"id":"nSnZKMv9rU3p"},"source":[">>> a = FourCal()\n",">>> a.setdata(4, 2)\n",">>> print(a.add())\n","6"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"nN6HIIOsrWeK"},"source":["이 연산이 가능하도록 다음과 같이 FourCal 클래스를 만들어 보자."]},{"cell_type":"code","metadata":{"id":"LqTHGm0HrXpT"},"source":[">>> class FourCal:\n","...     def setdata(self, first, second):\n","...         self.first = first\n","...         self.second = second\n","...     def add(self):\n","...         result = self.first + self.second\n","...         return result\n","...\n",">>>"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ONjTJaZ4rZPK"},"source":["새롭게 추가된 것은 add 메서드이다. 이제 클래스를 사용해 보자."]},{"cell_type":"code","metadata":{"id":"gZQitBN4raj0"},"source":[">>> a = FourCal()\n",">>> a.setdata(4, 2)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"5e50dErerb-G"},"source":["위와 같이 호출하면 앞에서 살펴보았듯이 a객체의 first, second 객체변수에는 각각 값 4와 2가 저장될 것이다.\n","\n","이제 add 메서드를 호출해 보자."]},{"cell_type":"code","metadata":{"id":"O3Ce8QTxrdyA"},"source":[">>> print(a.add())\n",">>> 6"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"XEPW5tn4rfcE"},"source":["a.add()라고 호출하면 add 메서드가 호출되어 값 6이 출력될 것이다. 어떤 과정을 거쳐 값 6이 출력되는지 add 메서드를 따로 떼어 내서 자세히 살펴보자."]},{"cell_type":"code","metadata":{"id":"9sb34ELErgpn"},"source":["def add(self):\n","    result = self.first + self.second\n","    return result"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"19J0qLV-rh79"},"source":["add 메서드의 매개변수는 self이고 반환 값은 result이다. 반환 값인 result를 계산하는 부분은 다음과 같다."]},{"cell_type":"code","metadata":{"id":"z7qS3gwWrjC3"},"source":["result = self.first + self.second"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"FQrHEQikrkPG"},"source":["a.add()와 같이 a 객체에 의해 add 메서드가 수행되면 add 메서드의 self에는 객체 a가 자동으로 입력되므로 위 내용은 다음과 같이 해석한다."]},{"cell_type":"code","metadata":{"id":"8csCm940rlpb"},"source":["result = a.first + a.second"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"TShwnR9YrnjY"},"source":["위 내용은 a.add() 메서드 호출 전에 a.setdata(4, 2) 가 먼저 호출되어 a.first = 4, a.second = 2 라고 이미 설정되었기 때문에 다시 다음과 같이 해석한다."]},{"cell_type":"code","metadata":{"id":"TXL2Y4t2rowB"},"source":["result = 4 + 2"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"V_vUQT9wrqar"},"source":["따라서 다음과 같이 a.add()를 호출하면 6을 돌려준다."]},{"cell_type":"code","metadata":{"id":"6lETv1pzrrxg"},"source":[">>> print(a.add())\n","6"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"GUouanMartgl"},"source":["여기까지 모두 이해한 독자라면 클래스에 대해 80% 이상을 안 것이다. 파이썬의 클래스는 그다지 어렵지 않다."]},{"cell_type":"markdown","metadata":{"id":"huh4Je6nru0O"},"source":["**곱하기, 빼기, 나누기 기능 만들기*\n","\n","이번에는 곱하기, 빼기, 나누기 등을 할 수 있게 프로그램을 만들어 보자."]},{"cell_type":"code","metadata":{"id":"0Lu98LdBrxlB"},"source":[">>> class FourCal:\n","...     def setdata(self, first, second):\n","...         self.first = first\n","...         self.second = second\n","...     def add(self):\n","...         result = self.first + self.second\n","...         return result\n","...     def mul(self):\n","...         result = self.first * self.second\n","...         return result\n","...     def sub(self):\n","...         result = self.first - self.second\n","...         return result\n","...     def div(self):\n","...         result = self.first / self.second\n","...         return result\n","...\n",">>>"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"cICLgWStrzA9"},"source":["mul, sub, div 모두 add 메서드에서 배운 것과 동일한 방법이니 따로 설명하지는 않겠다.\n","\n","정말로 모든 것이 제대로 동작하는지 확인해 보자."]},{"cell_type":"code","metadata":{"id":"ba4_8f5kr0p7"},"source":[">>> a = FourCal()\n",">>> b = FourCal()\n",">>> a.setdata(4, 2)\n",">>> b.setdata(3, 8)\n",">>> a.add()\n","6\n",">>> a.mul()\n","8\n",">>> a.sub()\n","2\n",">>> a.div()\n","2\n",">>> b.add()\n","11\n",">>> b.mul()\n","24\n",">>> b.sub()\n","-5\n",">>> b.div()\n","0.375"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"l4HC_zpQr2zL"},"source":["여기까지 우리가 목표로 한 사칙연산 기능을 가진 클래스를 만들어 보았다.\n"]},{"cell_type":"markdown","metadata":{"id":"i8JhSdL5r5A5"},"source":["**생성자 (Constructor)**\n","\n","이번에는 우리가 만든 FourCal 클래스를 다음과 같이 사용해 보자."]},{"cell_type":"code","metadata":{"id":"tB82XyU2sAsX"},"source":[">>> a = FourCal()\n",">>> a.add()\n","Traceback (most recent call last):\n","  File \"<stdin>\", line 1, in <module>\n","  File \"<stdin>\", line 6, in add\n","AttributeError: 'FourCal' object has no attribute 'first'"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"kQjsVcInsCRh"},"source":["FourCal 클래스의 인스턴스 a에 setdata 메서드를 수행하지 않고 add 메서드를 수행하면 \"AttributeError: 'FourCal' object has no attribute 'first'\" 오류가 발생한다. setdata 메서드를 수행해야 객체 a의 객체변수 first와 second가 생성되기 때문이다.\n","\n","이렇게 객체에 초깃값을 설정해야 할 필요가 있을 때는 setdata와 같은 메서드를 호출하여 초깃값을 설정하기보다는 생성자를 구현하는 것이 안전한 방법이다. 생성자(Constructor)란 객체가 생성될 때 자동으로 호출되는 메서드를 의미한다.\n","\n","파이썬 메서드 이름으로 __init__를 사용하면 이 메서드는 생성자가 된다. 다음과 같이 FourCal 클래스에 생성자를 추가해 보자.\n","\n","※ __init__ 메서드의 init 앞뒤로 붙은 __는 언더스코어(_) 두 개를 붙여 쓴 것이다."]},{"cell_type":"code","metadata":{"id":"IDypuJrUsDQG"},"source":[">>> class FourCal:\n","...     def __init__(self, first, second):\n","...         self.first = first\n","...         self.second = second\n","...     def setdata(self, first, second):\n","...         self.first = first\n","...         self.second = second\n","...     def add(self):\n","...         result = self.first + self.second\n","...         return result\n","...     def mul(self):\n","...         result = self.first * self.second\n","...         return result\n","...     def sub(self):\n","...         result = self.first - self.second\n","...         return result\n","...     def div(self):\n","...         result = self.first / self.second\n","...         return result\n","...\n",">>>"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"MiDzjQeGsFcc"},"source":["새롭게 추가된 생성자 __init__ 메서드만 따로 떼어 내서 살펴보자."]},{"cell_type":"code","metadata":{"id":"Yjuec7tSsG0G"},"source":["def __init__(self, first, second):\n","    self.first = first\n","    self.second = second"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"KCLeI5fmsIYw"},"source":["__init__ 메서드는 setdata 메서드와 이름만 다르고 모든 게 동일하다. 단 메서드 이름을 __init__으로 했기 때문에 생성자로 인식되어 객체가 생성되는 시점에 자동으로 호출되는 차이가 있다.\n","\n","이제 다음처럼 예제를 수행해 보자."]},{"cell_type":"code","metadata":{"id":"XMNWl7_8sJqx"},"source":[">>> a = FourCal()\n","Traceback (most recent call last):\n","  File \"<stdin>\", line 1, in <module>\n","TypeError: __init__() missing 2 required positional arguments: 'first' and 'second'"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"WIfvOm7asLih"},"source":["a = FourCal()을 수행할 때 생성자 __init__이 호출되어 위와 같은 오류가 발생했다. 오류가 발생한 이유는 생성자의 매개변수 first와 second에 해당하는 값이 전달되지 않았기 때문이다.\n","\n","위 오류를 해결하려면 다음처럼 first와 second에 해당되는 값을 전달하여 객체를 생성해야 한다."]},{"cell_type":"code","metadata":{"id":"TMfCOW2BsMua"},"source":[">>> a = FourCal(4, 2)\n",">>> "],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"rhRj8E9GsPmp"},"source":["위와 같이 수행하면 __init__ 메서드의 매개변수에는 각각 오른쪽과 같은 값이 대입된다.\n","\n","매개변수\t값\n","self\t생성되는 객체\n","first\t4\n","second\t2\n","\n","※ __init__ 메서드도 다른 메서드와 마찬가지로 첫 번째 매개변수 self에 생성되는 객체가 자동으로 전달된다는 점을 기억하자.\n","\n","따라서 __init__ 메서드가 호출되면 setdata 메서드를 호출했을 때와 마찬가지로 first와 second라는 객체변수가 생성될 것이다.\n","\n","다음과 같이 객체변수의 값을 확인해 보자."]},{"cell_type":"code","metadata":{"id":"g_6hUxtwsTPx"},"source":[">>> a = FourCal(4, 2)\n",">>> print(a.first)\n","4\n",">>> print(a.second)\n","2"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"LpK-QxupsUS7"},"source":["add나 div 등의 메서드도 잘 동작하는지 확인해 보자."]},{"cell_type":"code","metadata":{"id":"aiaBDeJ8sV7W"},"source":[">>> a = FourCal(4, 2)\n",">>> a.add()\n","6\n",">>> a.div()\n","2.0"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"UgSnzdy8sYF0"},"source":["이상 없이 잘 동작하는 것을 확인할 수 있다.\n","\n"]},{"cell_type":"markdown","metadata":{"id":"jK4nwH5JsaAr"},"source":["**클래스의 상속**\n","\n","상속(Inheritance)이란 \"물려받다\"라는 뜻으로, \"재산을 상속받다\"라고 할 때의 상속과 같은 의미이다. 클래스에도 이 개념을 적용할 수 있다. 어떤 클래스를 만들 때 다른 클래스의 기능을 물려받을 수 있게 만드는 것이다. 이번에는 상속 개념을 사용하여 우리가 만든 FourCal 클래스에 ab (a의 b제곱)을 구할 수 있는 기능을 추가해 보자.\n","\n","앞에서 FourCal 클래스는 이미 만들어 놓았으므로 FourCal 클래스를 상속하는 MoreFourCal 클래스는 다음과 같이 간단하게 만들 수 있다."]},{"cell_type":"code","metadata":{"id":"RX4LxTWCscIi"},"source":[">>> class MoreFourCal(FourCal):\n","...     pass\n","... \n",">>>"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"hOs3AdM2sdb8"},"source":["클래스를 상속하기 위해서는 다음처럼 클래스 이름 뒤 괄호 안에 상속할 클래스 이름을 넣어주면 된다.\n","\n","class 클래스 이름(상속할 클래스 이름)\n","\n","MoreFourCal 클래스는 FourCal 클래스를 상속했으므로 FourCal 클래스의 모든 기능을 사용할 수 있어야 한다.\n","\n","다음과 같이 확인해 보자."]},{"cell_type":"code","metadata":{"id":"KIgrtNwGseuW"},"source":[">>> a = MoreFourCal(4, 2)\n",">>> a.add()\n","6\n",">>> a.mul()\n","8\n",">>> a.sub()\n","2\n",">>> a.div()\n","2"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"3F7yRL4_sfO4"},"source":["상속받은 FourCal 클래스의 기능을 모두 사용할 수 있음을 확인할 수 있다."]},{"cell_type":"markdown","metadata":{"id":"XHJbRR9dsgcs"},"source":["**왜 상속을 해야 할까?**\n","\n","보통 상속은 기존 클래스를 변경하지 않고 기능을 추가하거나 기존 기능을 변경하려고 할 때 사용한다.\n","\n","\"클래스에 기능을 추가하고 싶으면 기존 클래스를 수정하면 되는데 왜 굳이 상속을 받아서 처리해야 하지?\" 라는 의문이 들 수도 있다. 하지만 기존 클래스가 라이브러리 형태로 제공되거나 수정이 허용되지 않는 상황이라면 상속을 사용해야 한다."]},{"cell_type":"markdown","metadata":{"id":"pPYum-JMskee"},"source":["이제 원래 목적인 a의 b제곱(ab)을 계산하는 MoreFourCal 클래스를 만들어 보자."]},{"cell_type":"code","metadata":{"id":"LAdsrow9sltK"},"source":[">>> class MoreFourCal(FourCal):\n","...     def pow(self):\n","...         result = self.first ** self.second\n","...         return result\n","...\n",">>>"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"UbKgRqilsm9f"},"source":["pass 문장은 삭제하고 위와 같이 두 수의 거듭제곱을 구할 수 있는 pow 메서드를 추가해 주었다. 그리고 다음과 같이 pow 메서드를 수행해 보자."]},{"cell_type":"code","metadata":{"id":"a6RClaoDsn_d"},"source":[">>> a = MoreFourCal(4, 2)\n",">>> a.pow()\n","16"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"zZ9kkMbnspgb"},"source":["MoreFourCal 클래스로 만든 a 객체에 값 4와 2를 설정한 후 pow 메서드를 호출하면 4의 2제곱 (42)인 16을 돌려주는 것을 확인할 수 있다.\n","\n","상속은 MoreFourCal 클래스처럼 기존 클래스(FourCal)는 그대로 놔둔 채 클래스의 기능을 확장시킬 때 주로 사용한다."]},{"cell_type":"markdown","metadata":{"id":"PMl1p4nQsqqD"},"source":["**메서드 오버라이딩**\n","\n","이번에는 FourCal 클래스를 다음과 같이 실행해 보자."]},{"cell_type":"code","metadata":{"id":"pTB8D9h9stE6"},"source":[">>> a = FourCal(4, 0)\n",">>> a.div()\n","Traceback (most recent call last):\n","  File \"<stdin>\", line 1, in <module>\n","    result = self.first / self.second\n","ZeroDivisionError: division by zero"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"hIGgnpLvsuss"},"source":["FourCal 클래스의 객체 a에 4와 0 값을 설정하고 div 메서드를 호출하면 4를 0으로 나누려고 하기 때문에 위와 같은 ZeroDivisionError 오류가 발생한다. 하지만 0으로 나눌 때 오류가 아닌 0을 돌려주도록 만들고 싶다면 어떻게 해야 할까?\n","\n","다음과 같이 FourCal 클래스를 상속하는 SafeFourCal 클래스를 만들어 보자."]},{"cell_type":"code","metadata":{"id":"esC0dfF4swTs"},"source":[">>> class SafeFourCal(FourCal):\n","...     def div(self):\n","...         if self.second == 0:  # 나누는 값이 0인 경우 0을 리턴하도록 수정\n","...             return 0\n","...         else:\n","...             return self.first / self.second\n","...\n",">>>"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"IQ05zdBXsx_-"},"source":["SafeFourCal 클래스는 FourCal 클래스에 있는 div 메서드를 동일한 이름으로 다시 작성하였다. 이렇게 부모 클래스(상속한 클래스)에 있는 메서드를 동일한 이름으로 다시 만드는 것을 메서드 오버라이딩(Overriding, 덮어쓰기)이라고 한다. 이렇게 메서드를 오버라이딩하면 부모클래스의 메서드 대신 오버라이딩한 메서드가 호출된다.\n","\n","SafeFourCal 클래스에 오버라이딩한 div 메서드는 나누는 값이 0인 경우에는 0을 돌려주도록 수정했다. 이제 다시 위에서 수행한 예제를 FourCal 클래스 대신 SafeFourCal 클래스를 사용하여 수행해 보자."]},{"cell_type":"code","metadata":{"id":"7HZd3s09szIX"},"source":[">>> a = SafeFourCal(4, 0)\n",">>> a.div()\n","0"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"u0g2UuRdszvj"},"source":["FourCal 클래스와는 달리 ZeroDivisionError가 발생하지 않고 의도한 대로 0을 돌려주는 것을 확인할 수 있을 것이다."]},{"cell_type":"markdown","metadata":{"id":"vbSSwIl1s2Qn"},"source":["**클래스 변수**\n","\n","객체변수는 다른 객체들에 영향받지 않고 독립적으로 그 값을 유지한다는 점을 이미 알아보았다. 이번에는 객체변수와는 성격이 다른 클래스 변수에 대해 알아보자.\n","\n","다음 클래스를 작성해 보자."]},{"cell_type":"code","metadata":{"id":"vVEdyNcXs4mq"},"source":[">>> class Family:\n","...     lastname = \"김\"\n","..."],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"1UMoXGYWs5tY"},"source":["Family 클래스에 선언한 lastname이 바로 클래스 변수이다. 클래스 변수는 클래스 안에 함수를 선언하는 것과 마찬가지로 클래스 안에 변수를 선언하여 생성한다.\n","\n","이제 Family 클래스를 다음과 같이 사용해 보자."]},{"cell_type":"code","metadata":{"id":"ZPBYKM10s7k_"},"source":[">>> print(Family.lastname)\n","김"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"cVH2rFwcs8_I"},"source":["클래스 변수는 위 예와 같이 클래스이름.클래스 변수로 사용할 수 있다.\n","\n","또는 다음과 같이 Family 클래스로 만든 객체를 통해서도 클래스 변수를 사용할 수 있다."]},{"cell_type":"code","metadata":{"id":"M-3BTG0Vs-yr"},"source":[">>> a = Family()\n",">>> b = Family()\n",">>> print(a.lastname)\n","김\n",">>> print(b.lastname)\n","김"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"XzMkLbjUtANW"},"source":["만약 Family 클래스의 lastname을 다음과 같이 \"박\"이라는 문자열로 바꾸면 어떻게 될까?"]},{"cell_type":"code","metadata":{"id":"1IbiqtGltBKu"},"source":[">>> Family.lastname = \"박\""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"1x5eW0F2tCJq"},"source":["다음과 같이 확인해 보자."]},{"cell_type":"code","metadata":{"id":"IDwA3u-1tDbX"},"source":[">>> print(a.lastname)\n","박\n",">>> print(b.lastname)\n","박"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"VkpOd1GytEom"},"source":["클래스 변수 값을 변경했더니 클래스로 만든 객체의 lastname 값도 모두 변경된다는 것을 확인할 수 있다. 즉 클래스 변수는 클래스로 만든 모든 객체에 공유된다는 특징이 있다.\n","\n","id 함수를 사용하면 클래스 변수가 공유된다는 사실을 증명할 수 있다."]},{"cell_type":"code","metadata":{"id":"eHjptB2ntGK5"},"source":[">>> id(Family.lastname)\n","4480159136\n",">>> id(a.lastname)\n","4480159136\n",">>> id(b.lastname)\n","4480159136"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"tnCmD4SqtIw_"},"source":["id 값이 모두 같으므로 Family.lastname, a.lastname, b.lastname은 모두 같은 메모리를 가리키고 있다.\n","\n","클래스 변수를 가장 늦게 설명하는 이유는 클래스에서 클래스 변수보다는 객체변수가 훨씬 중요하기 때문이다. 실무 프로그래밍을 할 때도 클래스 변수보다는 객체변수를 사용하는 비율이 훨씬 높다.\n","\n"]},{"cell_type":"markdown","metadata":{"id":"9ITWz8sitdJ9"},"source":["**모듈 만들기**\n","\n","모듈에 대해 자세히 살펴보기 전에 간단한 모듈을 한번 만들어 보자."]},{"cell_type":"code","metadata":{"id":"VLlPyspIthX5"},"source":["# mod1.py\n","def add(a, b):\n","    return a + b\n","\n","def sub(a, b): \n","    return a-b"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"w8pAITTwtize"},"source":["위와 같이 add와 sub 함수만 있는 파일 mod1.py를 만들고 C:\\doit 디렉터리에 저장하자. 이 mod1.py 파일이 바로 모듈이다. 지금까지 에디터로 만들어 온 파일과 다르지 않다.\n","\n","※ 파이썬 확장자 .py로 만든 파이썬 파일은 모두 모듈이다."]},{"cell_type":"markdown","metadata":{"id":"a0copXBytlYa"},"source":["**모듈 불러오기**\n","\n","우리가 만든 mod1.py 파일, 즉 모듈을 파이썬에서 불러와 사용하려면 어떻게 해야 할까?\n","\n","먼저 다음과 같이 명령 프롬프트 창을 열고 mod1.py를 저장한 디렉터리(이 책에서는 C:\\doit)로 이동한 다음 대화형 인터프리터를 실행한다.\n","\n","※ 대화형 인터프리터를 실행할 때 나타나는 버전 정보 등의 메시지는 생략했다."]},{"cell_type":"code","metadata":{"id":"g0Z5vjBVtnwI"},"source":["C:\\Users\\pahkey>cd C:\\doit\n","C:\\doit>dir\n","...\n","2014-09-23 오후 01:53 49 mod1.py\n","...\n","C:\\doit>python\n",">>> "],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"pi8rK1Z6tpEh"},"source":["반드시 mod1.py를 저장한 C:\\doit 디렉터리로 이동한 다음 예제를 진행해야 한다. 그래야만 대화형 인터프리터에서 mod1.py를 읽을 수 있다.\n","\n","이제 다음과 같이 따라 해 보자."]},{"cell_type":"code","metadata":{"id":"_ur74oXLtqmY"},"source":[">>> import mod1\n",">>> print(mod1.add(3, 4))\n","7\n",">>> print(mod1.sub(4, 2))\n","2"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"iMta3Dq3tsqG"},"source":["mod1.py를 불러오기 위해 import mod1이라고 입력하였다. 실수로 import mod1.py로 입력하지 않도록 주의하자. import는 이미 만들어 놓은 파이썬 모듈을 사용할 수 있게 해주는 명령어이다. mod1.py 파일에 있는 add 함수를 사용하기 위해서는 위 예와 같이 mod1.add처럼 모듈 이름 뒤에 \".\"(도트 연산자)를 붙이고 함수 이름을 쓰면 된다.\n","\n","※ import는 현재 디렉터리에 있는 파일이나 파이썬 라이브러리가 저장된 디렉터리에 있는 모듈만 불러올 수 있다. 파이썬 라이브러리는 파이썬을 설치할 때 자동으로 설치되는 파이썬 모듈을 말한다.\n","\n","import의 사용 방법은 다음과 같다."]},{"cell_type":"code","metadata":{"id":"TzvSAb_htt4C"},"source":["import 모듈이름"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"8qIhkiFxtvOp"},"source":["여기에서 모듈 이름은 mod1.py에서 .py 확장자를 제거한 mod1만을 가리킨다.\n","\n","때로는 mod1.add, mod1.sub처럼 쓰지 않고 add, sub처럼 모듈 이름 없이 함수 이름만 쓰고 싶은 경우도 있을 것이다. 이럴 때는 \"from 모듈 이름 import 모듈 함수\"를 사용하면 된다.\n","\n","from 모듈이름 import 모듈함수\n","\n","위 형식을 사용하면 위와 같이 모듈 이름을 붙이지 않고 바로 해당 모듈의 함수를 쓸 수 있다.\n","\n","다음과 같이 따라 해 보자."]},{"cell_type":"code","metadata":{"id":"fVKGQYkrtwug"},"source":[">>> from mod1 import add\n",">>> add(3, 4)\n","7\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"1oUBqJlDtyjL"},"source":["그런데 위와 같이 하면 mod1.py 파일의 add 함수만 사용할 수 있다. add 함수와 sub 함수를 둘 다 사용하고 싶다면 어떻게 해야 할까?\n","\n","2가지 방법이 있다."]},{"cell_type":"code","metadata":{"id":"bnJ-sXrhtz7O"},"source":["from mod1 import add, sub"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"7nsAWC4st1DT"},"source":["첫 번째 방법은 위와 같이 from 모듈 이름 import 모듈 함수1, 모듈 함수2처럼 사용하는 것이다. 콤마로 구분하여 필요한 함수를 불러올 수 있다."]},{"cell_type":"code","metadata":{"id":"ufvZLpUHt4zk"},"source":["from mod1 import *"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"VOgDWMmFt6g9"},"source":["두 번째 방법은 위와 같이 * 문자를 사용하는 방법이다. 07장에서 배울 정규 표현식에서 * 문자는 \"모든 것\"이라는 뜻인데 파이썬에서도 마찬가지 의미로 사용한다. 따라서 from mod1 import *는 mod1.py의 모든 함수를 불러서 사용하겠다는 뜻이다.\n","\n","mod1.py 파일에는 함수가 2개밖에 없기 때문에 위 2가지 방법은 동일하게 적용된다."]},{"cell_type":"markdown","metadata":{"id":"7zplh-Vrt65P"},"source":["**if __name__ == \"__main__\": 의 의미**\n","\n","이번에는 mod1.py 파일을 다음과 같이 변경해 보자."]},{"cell_type":"code","metadata":{"id":"aGJUga6buCuG"},"source":["# mod1.py \n","def add(a, b): \n","    return a+b\n","\n","def sub(a, b): \n","    return a-b\n","\n","print(add(1, 4))\n","print(sub(4, 2))"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"TZ5nPf9JuEN3"},"source":["add(1, 4)와 sub(4, 2)의 결과를 출력하는 다음 문장을 추가하였다."]},{"cell_type":"code","metadata":{"id":"wawJx060uFXc"},"source":["print(add(1, 4))\n","print(sub(4, 2))"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"WjKnfArRuHSi"},"source":["위에서 작성한 mod1.py 파일은 다음과 같이 실행할 수 있다."]},{"cell_type":"code","metadata":{"id":"wDPGiQNLuIsP"},"source":["C:\\doit>python mod1.py\n","5\n","2"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"OZHohE4juJx-"},"source":["그런데 이 mod1.py 파일의 add와 sub 함수를 사용하기 위해 mod1 모듈을 import할 때는 좀 이상한 문제가 생긴다. 명령 프롬프트 창에서 다음을 따라 해 보자."]},{"cell_type":"code","metadata":{"id":"ZlWJKMIcuLNx"},"source":["C:\\Users\\pahkey> cd C:\\doit\n","C:\\doit> python\n","Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n",">>> import mod1\n","5\n","2"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"OqFX3VmnuMzb"},"source":["엉뚱하게도 import mod1을 수행하는 순간 mod1.py가 실행이 되어 결괏값을 출력한다. 우리는 단지 mod1.py 파일의 add와 sub 함수만 사용하려고 했는데 말이다.\n","\n","이러한 문제를 방지하려면 mod1.py 파일을 다음처럼 변경해야 한다."]},{"cell_type":"code","metadata":{"id":"DBTyP5K5uOK_"},"source":["# mod1.py \n","def add(a, b): \n","    return a+b\n","\n","def sub(a, b): \n","    return a-b\n","\n","if __name__ == \"__main__\":\n","    print(add(1, 4))\n","    print(sub(4, 2))"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"SiEelyLsuPc_"},"source":["if __name__ == \"__main__\"을 사용하면 C:\\doit>python mod1.py처럼 직접 이 파일을 실행했을 때는 __name__ == \"__main__\"이 참이 되어 if문 다음 문장이 수행된다. 반대로 대화형 인터프리터나 다른 파일에서 이 모듈을 불러서 사용할 때는 __name__ == \"__main__\"이 거짓이 되어 if문 다음 문장이 수행되지 않는다.\n","\n","위와 같이 수정한 후 다시 대화형 인터프리터를 열고 실행해 보자."]},{"cell_type":"code","metadata":{"id":"VXeujDYfuRWA"},"source":[">>> import mod1\n",">>>"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"xaPskseFuSyd"},"source":["아무 결괏값도 출력되지 않는 것을 확인할 수 있다."]},{"cell_type":"markdown","metadata":{"id":"bag-0TbjuTRc"},"source":["__name__ 변수란?\n","\n","파이썬의 __name__ 변수는 파이썬이 내부적으로 사용하는 특별한 변수 이름이다. 만약 C:\\doit>python mod1.py처럼 직접 mod1.py 파일을 실행할 경우 mod1.py의 __name__ 변수에는 __main__ 값이 저장된다. 하지만 파이썬 셸이나 다른 파이썬 모듈에서 mod1을 import 할 경우에는 mod1.py의 __name__ 변수에는 mod1.py의 모듈 이름 값 mod1이 저장된다."]},{"cell_type":"markdown","metadata":{"id":"FKVTZsukuXCz"},"source":["**클래스나 변수 등을 포함한 모듈**\n","\n","지금까지 살펴본 모듈은 함수만 포함했지만 클래스나 변수 등을 포함할 수도 있다. 다음 프로그램을 작성해 보자."]},{"cell_type":"code","metadata":{"id":"U_Y6Ap8fuaU0"},"source":["# mod2.py \n","PI = 3.141592\n","\n","class Math: \n","    def solv(self, r): \n","        return PI * (r ** 2) \n","\n","def add(a, b): \n","    return a+b \n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"djcqtHq3u8Fk"},"source":["이 파일은 원의 넓이를 계산하는 Math 클래스와 두 값을 더하는 add 함수 그리고 원주율 값에 해당되는 PI 변수처럼 클래스, 함수, 변수 등을 모두 포함하고 있다.\n","\n","파일 이름을 mod2.py로 하고 C:\\doit 디렉터리에 저장하자. 대화형 인터프리터를 열고 다음과 같이 따라 해 보자."]},{"cell_type":"code","metadata":{"id":"FAdrmRquu9mU"},"source":["C:\\Users\\pahkey> cd C:\\doit\n","C:\\doit> python\n","Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n",">>> import mod2\n",">>> print(mod2.PI)\n","3.141592"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"crsKJWJiu-z9"},"source":["위 예에서 볼 수 있듯이 mod2.PI처럼 입력해서 mod2.py 파일에 있는 PI 변수 값을 사용할 수 있다."]},{"cell_type":"code","metadata":{"id":"QIheGn7FvAi3"},"source":["위 예에서 볼 수 있듯이 mod2.PI처럼 입력해서 mod2.py 파일에 있는 PI 변수 값을 사용할 수 있다."],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"DSLAb8PsvCLb"},"source":["위 예는 mod2.py에 있는 Math 클래스를 사용하는 방법을 보여 준다. 위 예처럼 모듈 안에 있는 클래스를 사용하려면 \".\"(도트 연산자)로 클래스 이름 앞에 모듈 이름을 먼저 입력해야 한다."]},{"cell_type":"code","metadata":{"id":"5fx1geBivDcP"},"source":[">>> print(mod2.add(mod2.PI, 4.4))\n","7.541592"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"r_BEjXk7vE1W"},"source":["mod2.py에 있는 add 함수 역시 당연히 사용할 수 있다."]},{"cell_type":"markdown","metadata":{"id":"RtqMWApkvGH6"},"source":["**다른 파일에서 모듈 불러오기**\n","\n","지금까지는 만들어 놓은 모듈 파일을 사용하기 위해 대화형 인터프리터만 사용했다. 이번에는 다른 파이썬 파일에서 이전에 만들어 놓은 모듈을 불러와서 사용하는 방법에 대해 알아보자. 여기에서는 조금 전에 만든 모듈인 mod2.py 파일을 다른 파이썬 파일에서 불러와 사용할 것이다.\n","\n","먼저 에디터로 C:\\doit\\modtest.py 파일을 다음과 같이 작성한다."]},{"cell_type":"code","metadata":{"id":"kUNCfZ0fvIw0"},"source":["# modtest.py\n","import mod2\n","result = mod2.add(3, 4)\n","print(result)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"G9IieNagvRcc"},"source":["[모듈을 불러오는 또 다른 방법]\n","\n","우리는 지금껏 명령 프롬프트 창을 열고 모듈이 있는 디렉터리로 이동한 다음에 모듈을 사용할 수 있었다. 이번에는 모듈을 저장한 디렉터리로 이동하지 않고 모듈을 불러와서 사용하는 방법에 대해 알아보자.\n","\n","먼저 다음과 같이 이전에 만든 mod2.py 파일을 C:\\doit\\mymod로 이동시킨다."]},{"cell_type":"code","metadata":{"id":"UmVCkKnBvVO2"},"source":["C:\\Users\\pahkey>cd C:\\doit\n","C:\\doit>mkdir mymod\n","C:\\doit>move mod2.py mymod\n","        1개 파일을 이동했습니다."],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"vRBMjqQavYbV"},"source":["그리고 다음 예를 따라 해 보자."]},{"cell_type":"markdown","metadata":{"id":"07hkp7jEvY_-"},"source":["**1. sys.path.append(모듈을 저장한 디렉터리) 사용하기**\n","\n","먼저 sys 모듈을 불러온다."]},{"cell_type":"code","metadata":{"id":"T19GSt-tvbXW"},"source":["C:\\doit>python\n",">>> import sys"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"gl2trgRYvcn8"},"source":["sys 모듈은 파이썬을 설치할 때 함께 설치되는 라이브러리 모듈이다. sys에 대해서는 뒤에서 자세하게 다룰 것이다. 이 sys 모듈을 사용하면 파이썬 라이브러리가 설치되어 있는 디렉터리를 확인할 수 있다.\n","\n","다음과 같이 입력해 보자."]},{"cell_type":"code","metadata":{"id":"2pWwwImVvd6R"},"source":[">>> sys.path\n","['', 'C:\\\\Windows\\\\SYSTEM32\\\\python37.zip', 'c:\\\\Python37\\\\DLLs', \n","'c:\\\\Python37\\\\lib', 'c:\\\\Python37', 'c:\\\\Python37\\\\lib\\\\site-packages']"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Pp5vUSchvgT9"},"source":["sys.path는 파이썬 라이브러리가 설치되어 있는 디렉터리를 보여 준다. 만약 파이썬 모듈이 위 디렉터리에 들어 있다면 모듈이 저장된 디렉터리로 이동할 필요 없이 바로 불러서 사용할 수 있다. 그렇다면 sys.path에 C:\\doit\\mymod 디렉터리를 추가하면 아무 곳에서나 불러 사용할 수 있지 않을까?\n","\n","※ 명령 프롬프트 창에서는 /, \\든 상관없지만, 소스 코드 안에서는 반드시 / 또는 \\\\ 기호를 사용해야 한다.\n","\n","당연하다. sys.path의 결괏값이 리스트이므로 우리는 다음과 같이 할 수 있다."]},{"cell_type":"code","metadata":{"id":"TnGyJmbwvhCa"},"source":[">>> sys.path.append(\"C:/doit/mymod\")\n",">>> sys.path\n","['', 'C:\\\\Windows\\\\SYSTEM32\\\\python37.zip', 'c:\\\\Python37\\\\DLLs', \n","'c:\\\\Python37\\\\lib', 'c:\\\\Python37', 'c:\\\\Python37\\\\lib\\\\site-packages', \n","'C:/doit/mymod']\n",">>>"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"cGZkNmbsvjmS"},"source":["sys.path.append를 사용해서 C:/doit/mymod라는 디렉터리를 sys.path에 추가한 후 다시 sys.path를 보면 가장 마지막 요소에 C:/doit/mymod라고 추가된 것을 확인할 수 있다.\n","\n","자, 실제로 모듈을 불러와서 사용할 수 있는지 확인해 보자."]},{"cell_type":"code","metadata":{"id":"pj4jmmidvlKi"},"source":[">>> import mod2\n",">>> print(mod2.add(3,4))\n","7"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"GOhl09lsvmUn"},"source":["이상 없이 불러와서 사용할 수 있다."]},{"cell_type":"markdown","metadata":{"id":"9A3Wf-Luvnj5"},"source":["**2. PYTHONPATH 환경 변수 사용하기**\n","\n","모듈을 불러와서 사용하는 또 다른 방법으로는 PYTHONPATH 환경 변수를 사용하는 방법이 있다.\n","\n","다음과 같이 따라 해 보자."]},{"cell_type":"code","metadata":{"id":"fe7FfXA_vqGC"},"source":["C:\\doit>set PYTHONPATH=C:\\doit\\mymod\n","C:\\doit>python\n",">>> import mod2\n",">>> print(mod2.add(3,4))\n","7"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"mRnIe_9nvrp1"},"source":["set 명령어를 사용해 PYTHONPATH 환경 변수에 mod2.py 파일이 있는 C:\\doit\\mymod 디렉터리를 설정한다. 그러면 디렉터리 이동이나 별도의 모듈 추가 작업 없이 mod2 모듈을 불러와서 사용할 수 있다."]},{"cell_type":"markdown","metadata":{"id":"7DTwMiecv1sM"},"source":["**패키지란 무엇인가?**\n","패키지(Packages)는 도트(.)를 사용하여 파이썬 모듈을 계층적(디렉터리 구조)으로 관리할 수 있게 해준다. 예를 들어 모듈 이름이 A.B인 경우에 A는 패키지 이름이 되고 B는 A 패키지의 B모듈이 된다.\n","\n","파이썬 패키지는 디렉터리와 파이썬 모듈로 이루어지며 구조는 다음과 같다.\n","\n","가상의 game 패키지 예"]},{"cell_type":"code","metadata":{"id":"DCg9-sv-v4EI"},"source":["game/\n","    __init__.py\n","    sound/\n","        __init__.py\n","        echo.py\n","        wav.py\n","    graphic/\n","        __init__.py\n","        screen.py\n","        render.py\n","    play/\n","        __init__.py\n","        run.py\n","        test.py"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"rQJgMKBXv6FG"},"source":["game, sound, graphic, play는 디렉터리 이름이고 확장자가 .py인 파일은 파이썬 모듈이다. game 디렉터리가 이 패키지의 루트 디렉터리이고 sound, graphic, play는 서브 디렉터리이다.\n","\n","※ __init__.py 파일은 조금 특이한 용도로 사용하는데 뒤에서 자세하게 다룰 것이다.\n","\n","간단한 파이썬 프로그램이 아니라면 이렇게 패키지 구조로 파이썬 프로그램을 만드는 것이 공동 작업이나 유지 보수 등 여러 면에서 유리하다. 또한 패키지 구조로 모듈을 만들면 다른 모듈과 이름이 겹치더라도 더 안전하게 사용할 수 있다."]},{"cell_type":"markdown","metadata":{"id":"u9YG1B31v8o2"},"source":["**패키지 만들기**\n","이제 위 예와 비슷한 game 패키지를 직접 만들어 보며 패키지에 대해서 알아보자.\n","\n","**패키지 기본 구성 요소 준비하기**\n","\n","1. C:/doit 디렉터리 밑에 game 및 기타 서브 디렉터리를 생성하고 .py 파일들을 다음과 같이 만들어 보자(만약 C:/doit 디렉터리가 없다면 먼저 생성하고 진행하자)."]},{"cell_type":"code","metadata":{"id":"OM2Y3euhwCNj"},"source":["C:/doit/game/__init__.py\n","C:/doit/game/sound/__init__.py\n","C:/doit/game/sound/echo.py\n","C:/doit/game/graphic/__init__.py\n","C:/doit/game/graphic/render.py"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"j7g3kBRlwEol"},"source":["2. 각 디렉터리에 __init__.py 파일을 만들어 놓기만 하고 내용은 일단 비워 둔다."]},{"cell_type":"markdown","metadata":{"id":"jUTw3UdTwFAV"},"source":["3. echo.py 파일은 다음과 같이 만든다."]},{"cell_type":"code","metadata":{"id":"fyLINFRwwGxc"},"source":["# echo.py\n","def echo_test():\n","    print (\"echo\")"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"CM7_kHzmwIq4"},"source":["4. render.py 파일은 다음과 같이 만든다."]},{"cell_type":"code","metadata":{"id":"Z1rmlkLjwKDu"},"source":["# render.py\n","def render_test():\n","    print (\"render\")"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"DPFN1F7twNBy"},"source":["5. 다음 예제를 수행하기 전에 우리가 만든 game 패키지를 참조할 수 있도록 명령 프롬프트 창에서 set 명령어로 PYTHONPATH 환경 변수에 C:/doit 디렉터리를 추가한다. 그리고 파이썬 인터프리터(Interactive shell)를 실행한다."]},{"cell_type":"code","metadata":{"id":"RMLfbBvnwOlR"},"source":["C:\\> set PYTHONPATH=C:/doit\n","C:\\> python\n","Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n",">>> "],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"0-UYG7HTwQKF"},"source":["여기까지 준비가 되었다면 다음을 따라 해 보자."]},{"cell_type":"markdown","metadata":{"id":"Yoc7JzpFwRVq"},"source":["**패키지 안의 함수 실행하기**"]},{"cell_type":"markdown","metadata":{"id":"q4Mj18MzwTlp"},"source":["자, 이제 패키지를 사용하여 echo.py 파일의 echo_test 함수를 실행해 보자. 패키지 안의 함수를 실행하는 방법은 다음 3가지가 있다. 다음 예제는 import 예제이므로 하나의 예제를 실행하고 나서 다음 예제를 실행할 때에는 반드시 인터프리터를 종료하고 다시 실행해야 한다. 인터프리터를 다시 시작하지 않을 경우 이전에 import한 것들이 메모리에 남아 있어 엉뚱한 결과가 나올 수 있다(윈도우의 경우 인터프리터 종료는 Ctrl+Z).\n","\n","첫 번째는 echo 모듈을 import하여 실행하는 방법으로, 다음과 같이 실행한다."]},{"cell_type":"code","metadata":{"id":"FJ-i3ZuRwU7B"},"source":[">>> import game.sound.echo\n",">>> game.sound.echo.echo_test()\n","echo"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"HsLiqimOwWXm"},"source":["두 번째는 echo 모듈이 있는 디렉터리까지를 from ... import하여 실행하는 방법이다."]},{"cell_type":"code","metadata":{"id":"iTeeANISwXn1"},"source":[">>> from game.sound import echo\n",">>> echo.echo_test()\n","echo"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"YY_tb0dGwY2c"},"source":["세 번째는 echo 모듈의 echo_test 함수를 직접 import하여 실행하는 방법이다."]},{"cell_type":"code","metadata":{"id":"pxz2DV1gwaFs"},"source":[">>> from game.sound.echo import echo_test\n",">>> echo_test()\n","echo"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"dAH_RJxvwbUg"},"source":["하지만 다음과 같이 echo_test 함수를 사용하는 것은 불가능하다."]},{"cell_type":"code","metadata":{"id":"liBay2pewcrg"},"source":[">>> import game\n",">>> game.sound.echo.echo_test()\n","Traceback (most recent call last):\n","    File \"<stdin>\", line 1, in <module>\n","AttributeError: 'module' object has no attribute 'sound'"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"1g_jRmpQweGB"},"source":["import game을 수행하면 game 디렉터리의 모듈 또는 game 디렉터리의 __init__.py에 정의한 것만 참조할 수 있다.\n","\n","또 다음처럼 echo_test 함수를 사용하는 것도 불가능하다."]},{"cell_type":"code","metadata":{"id":"i7JOmAbSwfrl"},"source":[">>> import game.sound.echo.echo_test\n","Traceback (most recent call last):\n","    File \"<stdin>\", line 1, in <module>\n","ImportError: No module named echo_test"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"2ssQ1N0rwhCg"},"source":["도트 연산자(.)를 사용해서 import a.b.c처럼 import할 때 가장 마지막 항목인 c는 반드시 모듈 또는 패키지여야만 한다."]},{"cell_type":"markdown","metadata":{"id":"5MXsEU3WwkIL"},"source":["**__init__.py 의 용도**\n","\n","__init__.py 파일은 해당 디렉터리가 패키지의 일부임을 알려주는 역할을 한다. 만약 game, sound, graphic 등 패키지에 포함된 디렉터리에 __init__.py 파일이 없다면 패키지로 인식되지 않는다.\n","\n","※ python3.3 버전부터는 __init__.py 파일이 없어도 패키지로 인식한다(PEP 420). 하지만 하위 버전 호환을 위해 __init__.py 파일을 생성하는 것이 안전한 방법이다.\n","\n","다음을 따라 해 보자."]},{"cell_type":"code","metadata":{"id":"isWDEUxCyFjD"},"source":[">>> from game.sound import *\n",">>> echo.echo_test()\n","Traceback (most recent call last):\n","    File \"<stdin>\", line 1, in <module>\n","NameError: name 'echo' is not defined"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"_fbnhbt2yGu4"},"source":["뭔가 이상하지 않은가? 분명 game.sound 패키지에서 모든 것(*)을 import하였으므로 echo 모듈을 사용할 수 있어야 할 것 같은데 echo라는 이름이 정의되지 않았다는 이름 오류(NameError)가 발생했다.\n","\n","이렇게 특정 디렉터리의 모듈을 *를 사용하여 import할 때에는 다음과 같이 해당 디렉터리의 __init__.py 파일에 __all__ 변수를 설정하고 import할 수 있는 모듈을 정의해 주어야 한다."]},{"cell_type":"code","metadata":{"id":"hfFQHPhCyIG2"},"source":["# C:/doit/game/sound/__init__.py\n","__all__ = ['echo']"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"mRdimypByJhZ"},"source":["여기에서 __all__이 의미하는 것은 sound 디렉터리에서 * 기호를 사용하여 import할 경우 이곳에 정의된 echo 모듈만 import된다는 의미이다.\n","\n","※ 착각하기 쉬운데 from game.sound.echo import * 는 __all__과 상관없이 무조건 import된다. 이렇게 __all__과 상관없이 무조건 import되는 경우는 from a.b.c import * 에서 from의 마지막 항목인 c가 모듈인 경우이다.\n","\n","위와 같이 __init__.py 파일을 변경한 후 위 예제를 수행하면 원하던 결과가 출력되는 것을 확인할 수 있다."]},{"cell_type":"code","metadata":{"id":"iHT-omIqyLF9"},"source":[">>> from game.sound import *\n",">>> echo.echo_test()\n","echo"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"IrLLXrWPyMcl"},"source":["**relative 패키지**\n","\n","만약 graphic 디렉터리의 render.py 모듈이 sound 디렉터리의 echo.py 모듈을 사용하고 싶다면 어떻게 해야 할까? 다음과 같이 render.py를 수정하면 가능하다."]},{"cell_type":"code","metadata":{"id":"mS5WLQzkyPHn"},"source":["# render.py\n","from game.sound.echo import echo_test\n","def render_test():\n","    print (\"render\")\n","    echo_test()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"r51qT4oyyQek"},"source":["from game.sound.echo import echo_test 문장을 추가하여 echo_test 함수를 사용할 수 있도록 수정했다.\n","\n","이렇게 수정한 후 다음과 같이 수행해 보자."]},{"cell_type":"code","metadata":{"id":"vLRS3MQryRs6"},"source":[">>> from game.graphic.render import render_test\n",">>> render_test()\n","render\n","echo"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"7gQ-tw3ByS8d"},"source":["이상 없이 잘 수행된다.\n","\n","위 예제처럼 from game.sound.echo import echo_test를 입력해 전체 경로를 사용하여 import할 수도 있지만 다음과 같이 relative하게 import하는 것도 가능하다."]},{"cell_type":"code","metadata":{"id":"fzUv0uixyUxl"},"source":["# render.py\n","from ..sound.echo import echo_test\n","\n","def render_test():\n","    print (\"render\")\n","    echo_test()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"61QlQfDkyWJh"},"source":["from game.sound.echo import echo_test가 from ..sound.echo import echo_test로 변경되었다. 여기에서 ..은 부모 디렉터리를 의미한다. graphic과 sound 디렉터리는 동일한 깊이(depth)이므로 부모 디렉터리(..)를 사용하여 위와 같은 import가 가능한 것이다.\n","\n","relative한 접근자에는 다음과 같은 것이 있다.\n","\n",".. – 부모 디렉터리\n",". – 현재 디렉터리\n","\n","..과 같은 relative한 접근자는 render.py처럼 모듈 안에서만 사용해야 한다. 파이썬 인터프리터에서 relative한 접근자를 사용하면 \"SystemError: cannot perform relative import\" 오류가 발생한다."]},{"cell_type":"markdown","metadata":{"id":"PgBh3DJNylE-"},"source":["***오류는 어떤 때 발생하는가?***\n","\n","오류를 처리하는 방법을 알기 전에 어떤 상황에서 오류가 발생하는지 한번 알아보자. 오타를 입력했을 때 발생하는 구문 오류 같은 것이 아닌 실제 프로그램에서 자주 발생하는 오류를 중심으로 살펴본다.\n","\n","먼저 디렉터리 안에 없는 파일을 열려고 시도했을 때 발생하는 오류이다."]},{"cell_type":"code","metadata":{"id":"5_RKCwsVyoe_"},"source":[">>> f = open(\"나없는파일\", 'r')\n","Traceback (most recent call last):\n","  File \"<stdin>\", line 1, in <module>\n","FileNotFoundError: [Errno 2] No such file or directory: '나없는파일'"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"e7A9Tgu3yp_9"},"source":["위 예에서 볼 수 있듯이 없는 파일을 열려고 시도하면 FileNotFoundError 오류가 발생한다.\n","\n","이번에는 0으로 다른 숫자를 나누는 경우를 생각해 보자. 이 역시 자주 발생하는 오류이다."]},{"cell_type":"code","metadata":{"id":"_vVSsxgXyrVh"},"source":[">>> 4 / 0\n","Traceback (most recent call last):\n","  File \"<stdin>\", line 1, in <module>\n","ZeroDivisionError: division by zero"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"SgPRk_lLys4a"},"source":["4를 0으로 나누려니까 ZeroDivisionError 오류가 발생한다.\n","\n","마지막으로 한 가지 예를 더 들어 보자. 다음 오류는 정말 빈번하게 일어난다."]},{"cell_type":"code","metadata":{"id":"fvxsviUUyuKv"},"source":[">>> a = [1,2,3]\n",">>> a[4]\n","Traceback (most recent call last):\n","  File \"<stdin>\", line 1, in <module>\n","IndexError: list index out of range"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"KIOHXhy4yv-R"},"source":["a는 리스트 [1, 2, 3]인데 a[4]는 a 리스트에서 얻을 수 없는 값이다. 따라서 IndexError 오류가 발생한다. 파이썬은 이런 오류가 발생하면 프로그램을 중단하고 오류 메시지를 보여 준다."]},{"cell_type":"markdown","metadata":{"id":"6cfB7VwsyxYZ"},"source":["**오류 예외 처리 기법**\n","\n","자, 이제 유연한 프로그래밍을 위한 오류 처리 기법에 대해 살펴보자.\n","\n","**try, except문**\n","다음은 오류 처리를 위한 try, except문의 기본 구조이다."]},{"cell_type":"code","metadata":{"id":"utSkwI84y2yK"},"source":["try:\n","    ...\n","except [발생 오류[as 오류 메시지 변수]]:\n","    ..."],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"sqceKwc_y_zy"},"source":["try 블록 수행 중 오류가 발생하면 except 블록이 수행된다. 하지만 try 블록에서 오류가 발생하지 않는다면 except 블록은 수행되지 않는다.\n","\n","except 구문을 자세히 살펴보자.\n","\n","except [발생 오류 [as 오류 메시지 변수]]:\n","\n","위 구문을 보면 [ ] 기호를 사용하는데, 이 기호는 괄호 안의 내용을 생략할 수 있다는 관례 표기법이다. 즉 except 구문은 다음 3가지 방법으로 사용할 수 있다."]},{"cell_type":"markdown","metadata":{"id":"cpm9iB_vzART"},"source":["**1. try, except만 쓰는 방법**"]},{"cell_type":"code","metadata":{"id":"Fs35yN9S0Gi5"},"source":["try:\n","    ...\n","except:\n","    ..."],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"CsOlBulK0H-j"},"source":["이 경우는 오류 종류에 상관없이 오류가 발생하면 except 블록을 수행한다."]},{"cell_type":"markdown","metadata":{"id":"54e7E-J60Kd3"},"source":["**2. 발생 오류만 포함한 except문**"]},{"cell_type":"code","metadata":{"id":"SucRn-MR0NDB"},"source":["try:\n","    ...\n","except 발생 오류:\n","    ..."],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"AYVktkDy0PIF"},"source":["이 경우는 오류가 발생했을 때 except문에 미리 정해 놓은 오류 이름과 일치할 때만 except 블록을 수행한다는 뜻이다."]},{"cell_type":"markdown","metadata":{"id":"6pNArgSX0S1J"},"source":["**3. 발생 오류와 오류 메시지 변수까지 포함한 except문**"]},{"cell_type":"code","metadata":{"id":"lRu0WwpG0U7g"},"source":["try:\n","    ...\n","except 발생 오류 as 오류 메시지 변수:\n","    ..."],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"HzEqOBbR0Wh6"},"source":["이 경우는 두 번째 경우에서 오류 메시지의 내용까지 알고 싶을 때 사용하는 방법이다.\n","\n","이 방법의 예를 들어 보면 다음과 같다."]},{"cell_type":"code","metadata":{"id":"6eibLHGT0X65"},"source":["try:\n","    4 / 0\n","except ZeroDivisionError as e:\n","    print(e)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"8Hx_J1jL0ZPs"},"source":["위처럼 4를 0으로 나누려고 하면 ZeroDivisionError가 발생하여 except 블록이 실행되고 변수 e에 담기는 오류 메시지를 다음과 같이 출력한다.\n","\n","결과값: division by zero"]},{"cell_type":"markdown","metadata":{"id":"MlV0Mem60cGs"},"source":["**try .. finally**\n","\n","try문에는 finally절을 사용할 수 있다. finally절은 try문 수행 도중 예외 발생 여부에 상관없이 항상 수행된다. 보통 finally절은 사용한 리소스를 close해야 할 때에 많이 사용한다.\n","\n","다음 예를 보자."]},{"cell_type":"code","metadata":{"id":"fv-R7LT20fGV"},"source":["f = open('foo.txt', 'w')\n","try:\n","    # 무언가를 수행한다.\n","finally:\n","    f.close()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"yUsCnkNp0ggA"},"source":["foo.txt 파일을 쓰기 모드로 연 후에 try문을 수행한 후 예외 발생 여부와 상관없이 finally절에서 f.close()로 열린 파일을 닫을 수 있다."]},{"cell_type":"markdown","metadata":{"id":"ZlBD-aBz0hv7"},"source":["**여러개의 오류처리하기**\n","\n","try문 안에서 여러 개의 오류를 처리하기 위해 다음 구문을 사용한다."]},{"cell_type":"code","metadata":{"id":"fcyxPlwV0kVh"},"source":["try:\n","    ...\n","except 발생 오류1:\n","   ... \n","except 발생 오류2:\n","   ..."],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"fNLDfllp0lm_"},"source":["즉 0으로 나누는 오류와 인덱싱 오류를 다음과 같이 처리할 수 있다."]},{"cell_type":"code","metadata":{"id":"hlJ8aiPD0m6T"},"source":["try:\n","    a = [1,2]\n","    print(a[3])\n","    4/0\n","except ZeroDivisionError:\n","    print(\"0으로 나눌 수 없습니다.\")\n","except IndexError:\n","    print(\"인덱싱 할 수 없습니다.\")"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ELnU61xS0oTI"},"source":["a는 2개의 요솟값을 가지고 있기 때문에 a[3]는 IndexError를 발생시키므로 \"인덱싱할 수 없습니다.\"라는 문자열이 출력될 것이다. 인덱싱 오류가 먼저 발생했으므로 4/0으로 발생되는 ZeroDivisionError 오류는 발생하지 않았다.\n","\n","앞에서 알아본 것과 마찬가지로 오류 메시지도 다음과 같이 가져올 수 있다."]},{"cell_type":"code","metadata":{"id":"lDaKkqnn0qcz"},"source":["try:\n","    a = [1,2]\n","    print(a[3])\n","    4/0\n","except ZeroDivisionError as e:\n","    print(e)\n","except IndexError as e:\n","    print(e)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"-SMKQoNM0rvT"},"source":["프로그램을 실행하면 \"list index out of range\" 오류 메시지가 출력될 것이다.\n","\n","다음과 같이 ZerroDivisionError와 IndexError를 함께 처리할 수도 있다."]},{"cell_type":"code","metadata":{"id":"3NacFbnT0tEH"},"source":["try:\n","    a = [1,2]\n","    print(a[3])\n","    4/0\n","except (ZeroDivisionError, IndexError) as e:\n","    print(e)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"xpUzEfx90uYA"},"source":["2개 이상의 오류를 동일하게 처리하기 위해서는 위와 같이 괄호를 사용하여 함께 묶어 처리하면 된다."]},{"cell_type":"markdown","metadata":{"id":"hLSZ07Ed0vof"},"source":["**오류 회피하기**\n","\n","프로그래밍을 하다 보면 특정 오류가 발생할 경우 그냥 통과시켜야 할 때가 있다. 다음 예를 보자."]},{"cell_type":"code","metadata":{"id":"sLUPqjc10yA4"},"source":["try:\n","    f = open(\"나없는파일\", 'r')\n","except FileNotFoundError:\n","    pass"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"aSZMliqm0zh0"},"source":["try문 안에서 FileNotFoundError가 발생할 경우에 pass를 사용하여 오류를 그냥 회피하도록 작성한 예제이다."]},{"cell_type":"markdown","metadata":{"id":"OL6IZiN000o4"},"source":["**오류 일부러 발생시키기**\n","\n","이상하게 들리겠지만 프로그래밍을 하다 보면 종종 오류를 일부러 발생시켜야 할 경우도 생긴다. 파이썬은 raise 명령어를 사용해 오류를 강제로 발생시킬 수 있다.\n","\n","예를 들어 Bird 클래스를 상속받는 자식 클래스는 반드시 fly라는 함수를 구현하도록 만들고 싶은 경우(강제로 그렇게 하고 싶은 경우)가 있을 수 있다. 다음 예를 보자."]},{"cell_type":"code","metadata":{"id":"oxHcWB0P0531"},"source":["class Bird:\n","    def fly(self):\n","        raise NotImplementedError"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Mwth29zU071X"},"source":["위 예제는 Bird 클래스를 상속받는 자식 클래스는 반드시 fly 함수를 구현해야 한다는 의지를 보여 준다. 만약 자식 클래스가 fly 함수를 구현하지 않은 상태로 fly 함수를 호출한다면 어떻게 될까?\n","\n","※ NotImplementedError는 파이썬 내장 오류로, 꼭 작성해야 하는 부분이 구현되지 않았을 경우 일부러 오류를 일으키기 위해 사용한다."]},{"cell_type":"code","metadata":{"id":"lZ8AFNbv09Pz"},"source":["class Eagle(Bird):\n","    pass\n","\n","eagle = Eagle()\n","eagle.fly()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"SbsPDOAm0_OB"},"source":["Eagle 클래스는 Bird 클래스를 상속받는다. 그런데 Eagle 클래스에서 fly 함수를 구현하지 않았기 때문에 Bird 클래스의 fly 함수가 호출된다. 그리고 raise문에 의해 NotImplemented Error가 발생할 것이다.\n","\n","※ 상속받는 클래스에서 함수를 재구현하는 것을 메서드 오버라이딩이라고 부른다."]},{"cell_type":"code","metadata":{"id":"w0Y0ncyi1AmQ"},"source":["Traceback (most recent call last):\n","  File \"...\", line 33, in <module>\n","    eagle.fly()\n","  File \"...\", line 26, in fly\n","    raise NotImplementedError\n","NotImplementedError"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"I02B-WGj1B7s"},"source":["NotImplementedError가 발생되지 않게 하려면 다음과 같이 Eagle 클래스에 fly 함수를 반드시 구현해야 한다."]},{"cell_type":"code","metadata":{"id":"MyAIQPxo1D2N"},"source":["class Eagle(Bird):\n","    def fly(self):\n","        print(\"very fast\")\n","\n","eagle = Eagle()\n","eagle.fly()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"B5nql3pV1F0_"},"source":["위 예처럼 fly 함수를 구현한 후 프로그램을 실행하면 오류 없이 다음 문장이 출력된다."]},{"cell_type":"code","metadata":{"id":"2geSJ-iT1HDA"},"source":["very fast"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"lk8H2hxj1IbL"},"source":["**예외 만들기**\n","\n","프로그램 수행 도중 특수한 경우에만 예외 처리를 하기 위해서 종종 예외를 만들어서 사용한다. 직접 예외를 만들어 보자. 예외는 다음과 같이 파이썬 내장 클래스인 Exception 클래스를 상속하여 만들 수 있다."]},{"cell_type":"code","metadata":{"id":"0OhXFFXX1LMu"},"source":["class MyError(Exception):\n","    pass"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"EdIudtAY1MZu"},"source":["그리고 별명을 출력해 주는 함수를 다음과 같이 작성한다."]},{"cell_type":"code","metadata":{"id":"zXUfxvw31NlY"},"source":["def say_nick(nick):\n","    if nick == '바보':\n","        raise MyError()\n","    print(nick)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"9Qoi0L0k1O6S"},"source":["그리고 다음과 같이 say_nick 함수를 호출해 보자."]},{"cell_type":"code","metadata":{"id":"D9LYaVau1QMi"},"source":["say_nick(\"천사\")\n","say_nick(\"바보\")"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"eHucAmOU1RkK"},"source":["저장한 뒤 프로그램을 실행해 보면 다음과 같이 \"천사\"가 한 번 출력된 후 MyError가 발생한다."]},{"cell_type":"code","metadata":{"id":"qM2mTAr51TF4"},"source":["천사\n","Traceback (most recent call last):\n","  File \"...\", line 11, in <module>\n","    say_nick(\"바보\")\n","  File \"...\", line 7, in say_nick\n","    raise MyError()\n","__main__.MyError"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"2Sc6QzNX1Us6"},"source":["이번에는 예외 처리 기법을 사용하여 MyError 발생을 예외 처리해 보자."]},{"cell_type":"code","metadata":{"id":"vWn287QM1WGU"},"source":["try:\n","    say_nick(\"천사\")\n","    say_nick(\"바보\")\n","except MyError:\n","    print(\"허용되지 않는 별명입니다.\")"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"rzDt9BVZ1XfR"},"source":["프로그램을 실행하면 다음과 같이 출력된다."]},{"cell_type":"code","metadata":{"id":"xEKJT0d01Yxj"},"source":["천사\n","허용되지 않는 별명입니다."],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"HqTnAtDa1aKf"},"source":["만약 오류 메시지를 사용하고 싶다면 다음처럼 예외 처리를 하면 된다."]},{"cell_type":"code","metadata":{"id":"Hp75Ou581beP"},"source":["try:\n","    say_nick(\"천사\")\n","    say_nick(\"바보\")\n","except MyError as e:\n","    print(e)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"1EKAI_4v1c24"},"source":["하지만 프로그램을 실행해 보면 print(e)로 오류 메시지가 출력되지 않는 것을 확인할 수 있다. 오류 메시지를 출력했을 때 오류 메시지가 보이게 하려면 오류 클래스에 다음과 같은 __str__ 메서드를 구현해야 한다. __str__ 메서드는 print(e)처럼 오류 메시지를 print문으로 출력할 경우에 호출되는 메서드이다."]},{"cell_type":"code","metadata":{"id":"2ZfBYJXe1egC"},"source":["class MyError(Exception):\n","    def __str__(self):\n","        return \"허용되지 않는 별명입니다.\""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"NVB4ILFo1gJP"},"source":["프로그램을 다시 실행해 보면 \"허용되지 않는 별명입니다.\"라는 오류메시지가 출력되는 것을 확인할 수 있다."]},{"cell_type":"markdown","metadata":{"id":"DOW9ClQC1p_e"},"source":["**abs**\n","\n","abs(x)는 어떤 숫자를 입력받았을 때, 그 숫자의 절댓값을 돌려주는 함수이다."]},{"cell_type":"code","metadata":{"id":"LkBH5O241tY2"},"source":[">>> abs(3)\n","3\n",">>> abs(-3)\n","3\n",">>> abs(-1.2)\n","1.2"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"f7ovb58L1u-c"},"source":["**all**\n","\n","all(x)는 반복 가능한(iterable) 자료형 x를 입력 인수로 받으며 이 x의 요소가 모두 참이면 True, 거짓이 하나라도 있으면 False를 돌려준다.\n","\n","※ 반복 가능한 자료형이란 for문으로 그 값을 출력할 수 있는 것을 의미한다. 리스트, 튜플, 문자열, 딕셔너리, 집합 등이 있다.\n","\n","다음 예를 보자."]},{"cell_type":"code","metadata":{"id":"E5yoDHvb1y2K"},"source":[">>> all([1, 2, 3])\n","True"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"t4qyeeA-10Z4"},"source":["리스트 자료형 [1, 2, 3]은 모든 요소가 참이므로 True를 돌려준다."]},{"cell_type":"code","metadata":{"id":"8IkuND9y11FN"},"source":[">>> all([1, 2, 3, 0])\n","False"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"wkzjSs3o12mJ"},"source":["리스트 자료형 [1, 2, 3, 0] 중에서 요소 0은 거짓이므로 False를 돌려준다."]},{"cell_type":"code","metadata":{"id":"0CRjv0rH15ON"},"source":[">>> all([])\n","True"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"WQKgFq-m17P2"},"source":["만약 all의 입력 인수가 빈 값인 경우에는 True를 리턴한다.\n","\n","※ 자료형의 참과 거짓에 대해 잘 기억나지 않는다면 02-7을 다시 한 번 읽어 보자."]},{"cell_type":"markdown","metadata":{"id":"9S23kq3B17z4"},"source":["**any**\n","\n","any(x)는 반복 가능한(iterable) 자료형 x를 입력 인수로 받으며 이 x의 요소 중 하나라도 참이 있으면 True를 돌려주고, x가 모두 거짓일 때에만 False를 돌려준다. all(x)의 반대이다.\n","\n","다음 예를 보자."]},{"cell_type":"code","metadata":{"id":"E5P5c7rw1-gf"},"source":[">>> any([1, 2, 3, 0])\n","True"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"IjCvH3vf1_4h"},"source":["리스트 자료형 [1, 2, 3, 0] 중에서 1, 2, 3이 참이므로 True를 돌려준다."]},{"cell_type":"code","metadata":{"id":"8tYGVDMn2BW2"},"source":[">>> any([0, \"\"])\n","False"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Pe99tK-o2Cab"},"source":["리스트 자료형 [0, \"\"]의 요소 0과 \"\"은 모두 거짓이므로 False를 돌려준다."]},{"cell_type":"code","metadata":{"id":"lYJcs5x22Dn3"},"source":[">>> any([])\n","False"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"LrGayS0H2EyW"},"source":["만약 any의 입력 인수가 빈 값인 경우에는 False를 리턴한다."]},{"cell_type":"markdown","metadata":{"id":"E4g_rDdA2F8D"},"source":["**chr**\n","\n","chr(i)는 아스키(ASCII) 코드 값을 입력받아 그 코드에 해당하는 문자를 출력하는 함수이다.\n","\n","※ 아스키 코드란 0에서 127 사이의 숫자를 각각 하나의 문자 또는 기호에 대응시켜 놓은 것이다."]},{"cell_type":"code","metadata":{"id":"Ra5XCGon2I-7"},"source":[">>> chr(97)\n","'a'\n",">>> chr(48)\n","'0'"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"vgb56ffz2KQL"},"source":["**dir**\n","\n","dir은 객체가 자체적으로 가지고 있는 변수나 함수를 보여 준다. 다음 예는 리스트와 딕셔너리 객체 관련 함수(메서드)를 보여 주는 예이다. 우리가 02장에서 살펴본 자료형 관련 함수를 만나 볼 수 있다."]},{"cell_type":"code","metadata":{"id":"TKSZa0aB2MNJ"},"source":[">>> dir([1, 2, 3])\n","['append', 'count', 'extend', 'index', 'insert', 'pop',...]\n",">>> dir({'1':'a'})\n","['clear', 'copy', 'get', 'has_key', 'items', 'keys',...]"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"_ZFYP_em2Na4"},"source":["**divmod**\n","\n","divmod(a, b)는 2개의 숫자를 입력으로 받는다. 그리고 a를 b로 나눈 몫과 나머지를 튜플 형태로 돌려주는 함수이다."]},{"cell_type":"code","metadata":{"id":"dIw5RiEZ2PyK"},"source":[">>> divmod(7, 3)\n","(2, 1)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"OuchZeb82QtQ"},"source":["몫을 구하는 연산자 //와 나머지를 구하는 연산자 %를 각각 사용한 결과와 비교해 보자."]},{"cell_type":"code","metadata":{"id":"4N4I1tml2Sbx"},"source":[">>> 7 // 3\n","2\n",">>> 7 % 3\n","1"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"DZUbNe8a2Urw"},"source":["**enumerate**\n","\n","enumerate는 \"열거하다\"라는 뜻이다. 이 함수는 순서가 있는 자료형(리스트, 튜플, 문자열)을 입력으로 받아 인덱스 값을 포함하는 enumerate 객체를 돌려준다.\n","\n","※ 보통 enumerate 함수는 다음 예제처럼 for문과 함께 자주 사용한다.\n","\n","잘 이해되지 않으면 다음 예를 보자."]},{"cell_type":"code","metadata":{"id":"mYctz5Ky2Wh6"},"source":[">>> for i, name in enumerate(['body', 'foo', 'bar']):\n","...     print(i, name)\n","...\n","0 body\n","1 foo\n","2 bar"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"834SQsF12ZGE"},"source":["순서 값과 함께 body, foo, bar가 순서대로 출력되었다. 즉 위 예제와 같이 enumerate를 for문과 함께 사용하면 자료형의 현재 순서(index)와 그 값을 쉽게 알 수 있다.\n","\n","for문처럼 반복되는 구간에서 객체가 현재 어느 위치에 있는지 알려 주는 인덱스 값이 필요할때 enumerate 함수를 사용하면 매우 유용하다."]},{"cell_type":"markdown","metadata":{"id":"II3m8aJV2aGT"},"source":["**eval**\n","\n","eval(expression )은 실행 가능한 문자열(1+2, 'hi' + 'a' 같은 것)을 입력으로 받아 문자열을 실행한 결괏값을 돌려주는 함수이다."]},{"cell_type":"code","metadata":{"id":"V6s_hWlt2dhw"},"source":[">>> eval('1+2')\n","3\n",">>> eval(\"'hi' + 'a'\")\n","'hia'\n",">>> eval('divmod(4, 3)')\n","(1, 1)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"s1iLnj_p2e38"},"source":["보통 eval은 입력받은 문자열로 파이썬 함수나 클래스를 동적으로 실행하고 싶을 때 사용한다."]},{"cell_type":"markdown","metadata":{"id":"wRF6jl_b2fSW"},"source":["**filter**\n","\n","filter란 무엇인가를 걸러낸다는 뜻으로 filter 함수도 동일한 의미를 가진다.\n","\n","filter 함수는 첫 번째 인수로 함수 이름을, 두 번째 인수로 그 함수에 차례로 들어갈 반복 가능한 자료형을 받는다. 그리고 두 번째 인수인 반복 가능한 자료형 요소가 첫 번째 인수인 함수에 입력되었을 때 반환 값이 참인 것만 묶어서(걸러 내서) 돌려준다.\n","\n","다음 예를 보자."]},{"cell_type":"code","metadata":{"id":"B4Ib_2A52h-x"},"source":["#positive.py \n","def positive(l): \n","    result = [] \n","    for i in l: \n","        if i > 0: \n","            result.append(i) \n","    return result\n","\n","print(positive([1,-3,2,0,-5,6]))"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"WXvbDp142jmu"},"source":["결과값: [1, 2, 6]\n","\n","즉 위에서 만든 positive 함수는 리스트를 입력값으로 받아 각각의 요소를 판별해서 양수 값만 돌려주는 함수이다.\n","\n","filter 함수를 사용하면 위 내용을 다음과 같이 간단하게 작성할 수 있다."]},{"cell_type":"code","metadata":{"id":"gPnUFdWX2kzq"},"source":["#filter1.py\n","def positive(x):\n","    return x > 0\n","\n","print(list(filter(positive, [1, -3, 2, 0, -5, 6])))"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"9O5p_xKL2l_s"},"source":["결과값: [1, 2, 6]\n","\n","여기에서는 두 번째 인수인 리스트의 요소들이 첫 번째 인수인 positive 함수에 입력되었을때 반환 값이 참인 것만 묶어서 돌려준다. 앞의 예에서는 1, 2, 6만 양수여서 x > 0 문장이 참이되므로 [1, 2, 6]이라는 결괏값을 돌려주게 된 것이다.\n","\n","앞의 함수는 lambda를 사용하면 더욱 간편하게 코드를 작성할 수 있다."]},{"cell_type":"code","metadata":{"id":"0RLXwUyt2nX0"},"source":[">>> list(filter(lambda x: x > 0, [1, -3, 2, 0, -5, 6]))\n","[1, 2, 6]"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"bGSXjdxq2o1f"},"source":["**hex**\n","\n","hex(x)는 정수 값을 입력받아 16진수(hexadecimal)로 변환하여 돌려주는 함수이다."]},{"cell_type":"code","metadata":{"id":"6MTNgS4R2sIa"},"source":[">>> hex(234)\n","'0xea'\n",">>> hex(3)\n","'0x3'"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"caxVRMh92tLw"},"source":["**id**\n","\n","id(object)는 객체를 입력받아 객체의 고유 주소 값(레퍼런스)을 돌려주는 함수이다."]},{"cell_type":"code","metadata":{"id":"8bbk_ish2uPH"},"source":[">>> a = 3\n",">>> id(3)\n","135072304\n",">>> id(a)\n","135072304\n",">>> b = a\n",">>> id(b)\n","135072304"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"GPSd0bmz2ziF"},"source":["위 예의 3, a, b는 고유 주소 값이 모두 135072304이다. 즉 3, a, b가 모두 같은 객체를 가리키고 있다.\n","\n","만약 id(4)라고 입력하면 4는 3, a, b와 다른 객체이므로 당연히 다른 고유 주소 값이 출력된다."]},{"cell_type":"code","metadata":{"id":"ivW8clXL21EX"},"source":[">>> id(4)\n","135072292"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"vcUfWAdS22zh"},"source":["**input**\n","\n","input([prompt])은 사용자 입력을 받는 함수이다. 매개변수로 문자열을 주면 다음 세 번째 예에서 볼 수 있듯이 그 문자열은 프롬프트가 된다.\n","\n","※ [ ] 기호는 괄호 안의 내용을 생략할 수 있다는 관례 표기법임을 기억하자."]},{"cell_type":"code","metadata":{"id":"EAv_Qz9Z26nX"},"source":[">>> a = input()\n","hi\n",">>> a\n","'hi'\n",">>> b = input(\"Enter: \")\n","Enter: hi"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"dgGtS1zd29P2"},"source":["위에서 입력받은 문자열을 확인해 보면 다음과 같다."]},{"cell_type":"code","metadata":{"id":"5uwEfBQR2_JA"},"source":[">>> b\n","'hi'"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"q_IlX5bR2_t1"},"source":["**int**\n","\n","int(x)는 문자열 형태의 숫자나 소수점이 있는 숫자 등을 정수 형태로 돌려주는 함수로, 정수를 입력으로 받으면 그대로 돌려준다."]},{"cell_type":"code","metadata":{"id":"_KxB2aUO3Dv4"},"source":[">>> int('3')\n","3\n",">>> int(3.4)\n","3"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"1RIoU6K24qBY"},"source":["int(x, radix)는 radix 진수로 표현된 문자열 x를 10진수로 변환하여 돌려준다.\n","\n","2진수로 표현된 11의 10진수 값은 다음과 같이 구한다."]},{"cell_type":"code","metadata":{"id":"GMHYbIF04rIn"},"source":[">>> int('11', 2)\n","3"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"FYUA_1C54tIF"},"source":["16진수로 표현된 1A의 10진수 값은 다음과 같이 구한다."]},{"cell_type":"code","metadata":{"id":"7NDdI0zC4ubo"},"source":[">>> int('1A', 16)\n","26"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"JSDIaeia4wvF"},"source":["**isinstance**\n","\n","isinstance(object, class )는 첫 번째 인수로 인스턴스, 두 번째 인수로 클래스 이름을 받는다. 입력으로 받은 인스턴스가 그 클래스의 인스턴스인지를 판단하여 참이면 True, 거짓이면 False를 돌려준다."]},{"cell_type":"code","metadata":{"id":"0D8EvsQl4zNG"},"source":[">>> class Person: pass\n","...\n",">>> a = Person()\n",">>> isinstance(a, Person)\n","True"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"0jnPLD_T408n"},"source":["위 예는 a가 Person 클래스가 만든 인스턴스임을 확인시켜 준다."]},{"cell_type":"code","metadata":{"id":"p9Uji7tX42Id"},"source":[">>> b = 3\n",">>> isinstance(b, Person)\n","False"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"KpG_MnZ743u9"},"source":["b는 Person 클래스가 만든 인스턴스가 아니므로 False를 돌려준다."]},{"cell_type":"markdown","metadata":{"id":"IMph2TqK48QA"},"source":["**len**\n","\n","len(s)은 입력값 s의 길이(요소의 전체 개수)를 돌려주는 함수이다."]},{"cell_type":"code","metadata":{"id":"_afGruaI49xL"},"source":[">>> len(\"python\")\n","6\n",">>> len([1,2,3])\n","3\n",">>> len((1, 'a'))\n","2"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"6sPQdgXp4_rK"},"source":["**list**\n","\n","list(s)는 반복 가능한 자료형 s를 입력받아 리스트로 만들어 돌려주는 함수이다."]},{"cell_type":"code","metadata":{"id":"Pa2Ju6gu5CGr"},"source":[">>> list(\"python\")\n","['p', 'y', 't', 'h', 'o', 'n']\n",">>> list((1,2,3))\n","[1, 2, 3]"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"7MQWn5Xh5Dfn"},"source":["list 함수에 리스트를 입력으로 주면 똑같은 리스트를 복사하여 돌려준다."]},{"cell_type":"code","metadata":{"id":"_JWXkr3o5E90"},"source":[">>> a = [1, 2, 3]\n",">>> b = list(a)\n",">>> b\n","[1, 2, 3]"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"81VI11L75GVv"},"source":["**map**\n","\n","map(f, iterable)은 함수(f)와 반복 가능한(iterable) 자료형을 입력으로 받는다. map은 입력받은 자료형의 각 요소를 함수 f가 수행한 결과를 묶어서 돌려주는 함수이다.\n","\n","다음 예를 보자."]},{"cell_type":"code","metadata":{"id":"VUI5jp4U5I5h"},"source":["# two_times.py\n","def two_times(numberList):\n","    result = [ ]\n","    for number in numberList:\n","        result.append(number*2)\n","    return result\n","\n","result = two_times([1, 2, 3, 4])\n","print(result)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"5fxF-c3M5KZC"},"source":["two_times 함수는 리스트 요소를 입력받아 각 요소에 2를 곱한 결괏값을 돌려준다. 실행 결과는 다음과 같다.\n","\n","결과값: [2, 4, 6, 8]\n","\n","위 예제는 map 함수를 사용하면 다음처럼 바꿀 수 있다."]},{"cell_type":"code","metadata":{"id":"QMe0DeqP5LuR"},"source":[">>> def two_times(x): \n","...     return x*2\n","...\n",">>> list(map(two_times, [1, 2, 3, 4]))\n","[2, 4, 6, 8]"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"NU3g6F3-5NFe"},"source":["이제 앞 예제를 해석해 보자. 먼저 리스트의 첫 번째 요소인 1이 two_times 함수의 입력값으로 들어가고 1 * 2의 과정을 거쳐서 2가 된다. 다음으로 리스트의 두 번째 요소인 2가 2 * 2 의 과정을 거쳐 4가 된다. 따라서 결괏값 리스트는 이제 [2, 4]가 된다. 총 4개의 요솟값이 모두 수행되면 마지막으로 [2, 4, 6, 8]을 돌려준다. 이것이 map 함수가 하는 일이다.\n","\n","※ 위 예에서 map의 결과를 리스트로 보여 주기위해 list 함수를 사용하여 출력하였다.\n","\n","앞의 예는 lambda를 사용하면 다음처럼 간략하게 만들 수 있다."]},{"cell_type":"code","metadata":{"id":"dzGivMsr5OXK"},"source":[">>> list(map(lambda a: a*2, [1, 2, 3, 4]))\n","[2, 4, 6, 8]"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"HeBOQTix5Pwk"},"source":["**max**\n","\n","max(iterable)는 인수로 반복 가능한 자료형을 입력받아 그 최댓값을 돌려주는 함수이다."]},{"cell_type":"code","metadata":{"id":"sK3hSCQD5VOE"},"source":[">>> max([1, 2, 3])\n","3\n",">>> max(\"python\")\n","'y'"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ssaVcY-I5SMp"},"source":["**min**\n","\n","min(iterable)은 max 함수와 반대로, 인수로 반복 가능한 자료형을 입력받아 그 최솟값을 돌려주는 함수이다."]},{"cell_type":"code","metadata":{"id":"Ht5-AifP5WY9"},"source":[">>> min([1, 2, 3])\n","1\n",">>> min(\"python\")\n","'h'"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"hsaMEb1j5b3A"},"source":["**oct**\n","\n","oct(x)는 정수 형태의 숫자를 8진수 문자열로 바꾸어 돌려주는 함수이다."]},{"cell_type":"code","metadata":{"id":"FHGu30NK5d58"},"source":[">>> oct(34)\n","'0o42'\n",">>> oct(12345)\n","'0o30071'"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"0FYlF7qQ5f3d"},"source":["**open**\n","\n","open(filename, [mode])은 \"파일 이름\"과 \"읽기 방법\"을 입력받아 파일 객체를 돌려주는 함수이다. 읽기 방법(mode)을 생략하면 기본값인 읽기 전용 모드(r)로 파일 객체를 만들어 돌려준다.\n","\n","mode\t           설명\n","w\t        쓰기모드로 파일 열기\n","r\t        읽기모드로 파일 열기\n","a\t        추가모드로 파일 열기\n","b\t        바이너리모드로 파일 열기\n","\n","b는 w, r, a와 함께 사용한다."]},{"cell_type":"code","metadata":{"id":"VTcNScfF5zFZ"},"source":[">>> f = open(\"binary_file\", \"rb\")"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"tiNIWQKh50fJ"},"source":["위 예의 rb는 \"바이너리 읽기 모드\"를 의미한다.\n","\n","다음 예의 fread와 fread2는 동일한 방법이다."]},{"cell_type":"code","metadata":{"id":"sl48J4vz510P"},"source":[">>> fread = open(\"read_mode.txt\", 'r')\n",">>> fread2 = open(\"read_mode.txt\")"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"pluqrBgv53DQ"},"source":["즉 모드 부분을 생략하면 기본값으로 읽기 모드 r를 갖게 된다.\n","\n","다음은 추가 모드(a)로 파일을 여는 예이다."]},{"cell_type":"code","metadata":{"id":"LGu0F97H54XF"},"source":[">>> fappend = open(\"append_mode.txt\", 'a')"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"PaAf9SiV55tw"},"source":["**ord**\n","\n","ord(c)는 문자의 아스키 코드 값을 돌려주는 함수이다.\n","\n","※ ord 함수는 chr 함수와 반대이다."]},{"cell_type":"code","metadata":{"id":"k0lK7JQ1585a"},"source":[">>> ord('a')\n","97\n",">>> ord('0')\n","48"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"a9jGe-Jc5-WM"},"source":["**pow**\n","\n","pow(x, y)는 x의 y 제곱한 결괏값을 돌려주는 함수이다."]},{"cell_type":"code","metadata":{"id":"k-GlEaCp5_x5"},"source":[">>> pow(2, 4)\n","16\n",">>> pow(3, 3)\n","27"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"rEcROaGC6A5Z"},"source":["**range**\n","\n","range([start,] stop [,step] )는 for문과 함께 자주 사용하는 함수이다. 이 함수는 입력받은 숫자에 해당하는 범위 값을 반복 가능한 객체로 만들어 돌려준다."]},{"cell_type":"markdown","metadata":{"id":"QZ9S8Luf6Enr"},"source":["**인수가 하나일 경우**\n","\n","시작 숫자를 지정해 주지 않으면 range 함수는 0부터 시작한다."]},{"cell_type":"code","metadata":{"id":"PlUsO6nf6GYA"},"source":[">>> list(range(5))\n","[0, 1, 2, 3, 4]"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Ju4Bi2M26HtY"},"source":["**인수가 2개일 경우**\n","\n","입력으로 주어지는 2개의 인수는 시작 숫자와 끝 숫자를 나타낸다. 단 끝 숫자는 해당 범위에 포함되지 않는다는 것에 주의하자."]},{"cell_type":"code","metadata":{"id":"GXAu_kB16NLG"},"source":[">>> list(range(5, 10))\n","[5, 6, 7, 8, 9]"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"9Y5J8jo66O2H"},"source":["**인수가 3개일 경우**\n","\n","세 번째 인수는 숫자 사이의 거리를 말한다."]},{"cell_type":"code","metadata":{"id":"Et6DfJce6RZL"},"source":[">>> list(range(1, 10, 2))\n","[1, 3, 5, 7, 9]\n",">>> list(range(0, -10, -1))\n","[0, -1, -2, -3, -4, -5, -6, -7, -8, -9]"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"DCU8__3w6Sjn"},"source":["**round**\n","\n","round(number[, ndigits]) 함수는 숫자를 입력받아 반올림해 주는 함수이다.\n","\n","※ [, ndigits]는 ndigits가 있을 수도 있고 없을 수도 있다는 의미이다."]},{"cell_type":"code","metadata":{"id":"-35Z-mML6UGm"},"source":[">>> round(4.6)\n","5\n",">>> round(4.2)\n","4"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"wSRAWxjK6T4z"},"source":["다음과 같이 실수 5.678을 소수점 2자리까지만 반올림하여 표시할 수 있다."]},{"cell_type":"code","metadata":{"id":"5Tiwxwfi6ZeF"},"source":[">>> round(5.678, 2)\n","5.68"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"YiYr9SfU6arO"},"source":["round 함수의 두 번째 매개변수는 반올림하여 표시하고 싶은 소수점의 자릿수(ndigits)이다."]},{"cell_type":"markdown","metadata":{"id":"mZNLGcnq6cAv"},"source":["**sorted**\n","\n","sorted(iterable) 함수는 입력값을 정렬한 후 그 결과를 리스트로 돌려주는 함수이다."]},{"cell_type":"code","metadata":{"id":"WAnmyyAy6e4W"},"source":[">>> sorted([3, 1, 2])\n","[1, 2, 3]\n",">>> sorted(['a', 'c', 'b'])\n","['a', 'b', 'c']\n",">>> sorted(\"zero\")\n","['e', 'o', 'r', 'z']\n",">>> sorted((3, 2, 1))\n","[1, 2, 3]"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"-aI53Z7S6hJv"},"source":["리스트 자료형에도 sort 함수가 있다. 하지만 리스트 자료형의 sort 함수는 리스트 객체 그 자체를 정렬만 할 뿐 정렬된 결과를 돌려주지는 않는다."]},{"cell_type":"markdown","metadata":{"id":"4-5vGSUN6kHK"},"source":["**str**\n","\n","str(object)은 문자열 형태로 객체를 변환하여 돌려주는 함수이다."]},{"cell_type":"code","metadata":{"id":"Cz8jKrnE6ll7"},"source":[">>> str(3)\n","'3'\n",">>> str('hi')\n","'hi'\n",">>> str('hi'.upper())\n","'HI'"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"-URyNcTk6rma"},"source":["**sum**\n","\n","sum(iterable) 은 입력받은 리스트나 튜플의 모든 요소의 합을 돌려주는 함수이다."]},{"cell_type":"code","metadata":{"id":"xa-oKlcX6uNs"},"source":[">>> sum([1,2,3])\n","6\n",">>> sum((4,5,6))\n","15"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"EfGyeDxl6wIZ"},"source":["**tuple**\n","\n","tuple(iterable)은 반복 가능한 자료형을 입력받아 튜플 형태로 바꾸어 돌려주는 함수이다. 만약 튜플이 입력으로 들어오면 그대로 돌려준다."]},{"cell_type":"code","metadata":{"id":"oyQ6FB926xnc"},"source":[">>> tuple(\"abc\")\n","('a', 'b', 'c')\n",">>> tuple([1, 2, 3])\n","(1, 2, 3)\n",">>> tuple((1, 2, 3))\n","(1, 2, 3)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"V9GIZnGP6z_I"},"source":["**type**\n","\n","type(object)은 입력값의 자료형이 무엇인지 알려 주는 함수이다."]},{"cell_type":"code","metadata":{"id":"o4-Nn7Yx61j_"},"source":[">>> type(\"abc\")\n","<class 'str'>\n",">>> type([ ])\n","<class 'list'>\n",">>> type(open(\"test\", 'w'))\n","<class '_io.TextIOWrapper'>"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"4v7X5mGD63DN"},"source":["**zip**\n","\n","zip(*iterable)은 동일한 개수로 이루어진 자료형을 묶어 주는 역할을 하는 함수이다.\n","\n","※ 여기서 사용한 *iterable은 반복 가능(iterable)한 자료형 여러 개를 입력할 수 있다는 의미이다.\n","\n","잘 이해되지 않는다면 다음 예제를 살펴보자."]},{"cell_type":"code","metadata":{"id":"wq5uvU7464NU"},"source":[">>> list(zip([1, 2, 3], [4, 5, 6]))\n","[(1, 4), (2, 5), (3, 6)]\n",">>> list(zip([1, 2, 3], [4, 5, 6], [7, 8, 9]))\n","[(1, 4, 7), (2, 5, 8), (3, 6, 9)]\n",">>> list(zip(\"abc\", \"def\"))\n","[('a', 'd'), ('b', 'e'), ('c', 'f')]"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"gYJXgtMv7DmR"},"source":["**sys**\n","\n","sys 모듈은 파이썬 인터프리터가 제공하는 변수와 함수를 직접 제어할 수 있게 해주는 모듈이다.\n","\n","**명령 행에서 인수 전달하기 - sys.argv**"]},{"cell_type":"code","metadata":{"id":"7BbQJA2N7Hr-"},"source":["C:/User/home>python test.py abc pey guido"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ttiYQjLt7IMa"},"source":["명령 프롬프트 창에서 위 예처럼 test.py 뒤에 또 다른 값을 함께 넣어 주면 sys.argv 리스트에 그 값이 추가된다.\n","\n","예제를 따라 하며 확인해 보자. 우선 다음과 같은 파이썬 프로그램을 작성하자. argv_test.py 파일은 C:/doit/Mymod 디렉터리에 저장했다고 가정한다(만약 C:/doit/Mymod 디렉터리가 없다면 먼저 생성하고 진행하자)."]},{"cell_type":"code","metadata":{"id":"hhjlQje47JhP"},"source":["# argv_test.py\n","import sys\n","print(sys.argv)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"JUSjK-hX7Ow8"},"source":["명령 프롬프트 창에서 Mymod 디렉터리로 들어간 뒤 다음과 같이 실행해 보자."]},{"cell_type":"code","metadata":{"id":"nI7phECO7Qa9"},"source":["C:/doit/Mymod>python argv_test.py you need python\n","['argv_test.py', 'you', 'need', 'python']"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"vAUv_OLh7R1L"},"source":["python 명령어 뒤의 모든 것들이 공백을 기준으로 나뉘어서 sys.argv 리스트의 요소가 된다.\n","\n","※ 명령 프롬프트 창에서는 /, \\든 상관없지만, 소스코드 안에서는 반드시 / 또는 \\\\ 기호를 사용해야 한다."]},{"cell_type":"markdown","metadata":{"id":"JSTVsTm97Wtq"},"source":["**강제로 스크립트 종료하기 - sys.exit**"]},{"cell_type":"code","metadata":{"id":"V2eU5IML7ZEY"},"source":[">>> sys.exit()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"u0ldaie07bli"},"source":["sys.exit는 Ctrl+Z나 Ctrl+D를 눌러서 대화형 인터프리터를 종료하는 것과 같은 기능을 한다. 프로그램 파일 안에서 사용하면 프로그램을 중단시킨다.\n","\n","**자신이 만든 모듈 불러와 사용하기 - sys.path**\n","\n","sys.path는 파이썬 모듈들이 저장되어 있는 위치를 나타낸다. 즉 이 위치에 있는 파이썬 모듈은 경로에 상관없이 어디에서나 불러올 수 있다.\n","\n","다음은 그 실행 결과이다."]},{"cell_type":"code","metadata":{"id":"qPk-lX0d7d_2"},"source":[">>> import sys\n",">>> sys.path\n","['', 'C:\\\\Windows\\\\SYSTEM32\\\\python37.zip', 'c:\\\\Python37\\\\DLLs', \n","'c:\\\\Python37\\\\lib', 'c:\\\\Python37', 'c:\\\\Python37\\\\lib\\\\site-packages']\n",">>>"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"oVjJaASb7gIS"},"source":["위 예에서 ''는 현재 디렉터리를 말한다."]},{"cell_type":"code","metadata":{"id":"VQ7y_6rV7iX6"},"source":["# path_append.py\n","import sys\n","sys.path.append(\"C:/doit/mymod\")"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"x7zl8a427ka8"},"source":["위와 같이 파이썬 프로그램 파일에서 sys.path.append를 사용해 경로 이름을 추가할 수 있다. 이렇게 하고 난 후에는 C:/doit/Mymod 디렉터리에 있는 파이썬 모듈을 불러와서 사용할 수 있다."]},{"cell_type":"markdown","metadata":{"id":"_YWJNheEQC6-"},"source":["**pickle**\n","\n","pickle은 객체의 형태를 그대로 유지하면서 파일에 저장하고 불러올 수 있게 하는 모듈이다. 다음 예는 pickle 모듈의 dump 함수를 사용하여 딕셔너리 객체인 data를 그대로 파일에 저장하는 방법을 보여 준다."]},{"cell_type":"code","metadata":{"id":"cMM_8uzaQHVH"},"source":[">>> import pickle\n",">>> f = open(\"test.txt\", 'wb')\n",">>> data = {1: 'python', 2: 'you need'}\n",">>> pickle.dump(data, f)\n",">>> f.close()\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"crF1YbPyQKX6"},"source":["다음은 pickle.dump로 저장한 파일을 pickle.load를 사용해서 원래 있던 딕셔너리 객체(data) 상태 그대로 불러오는 예이다."]},{"cell_type":"code","metadata":{"id":"c2GvCoVVQL6q"},"source":[">>> import pickle\n",">>> f = open(\"test.txt\", 'rb')\n",">>> data = pickle.load(f)\n",">>> print(data)\n","{2:'you need', 1:'python'}"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"61t3AfueQNSP"},"source":["위 예에서는 딕셔너리 객체를 사용했지만 어떤 자료형이든저장하고 불러올 수 있다."]},{"cell_type":"markdown","metadata":{"id":"lqhvyPJnQhwB"},"source":["**os**\n","OS 모듈은 환경 변수나 디렉터리, 파일 등의 OS 자원을 제어할 수 있게 해주는 모듈이다.\n","\n","**내 시스템의 환경 변수값을 알고 싶을 때 - os.environ**\n","\n","시스템은 제각기 다른 환경 변수 값을 가지고 있는데, os.environ은 현재 시스템의 환경 변수 값을 보여 준다. 다음을 따라 해 보자."]},{"cell_type":"code","metadata":{"id":"7mCSv4ELQkr2"},"source":[">>> import os\n",">>> os.environ\n","environ({'PROGRAMFILES': 'C:\\\\Program Files', 'APPDATA': … 생략 …})\n",">>>"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"zMbormtFQmcS"},"source":["위 결괏값은 필자의 시스템 정보이다. os.environ은 환경 변수에 대한 정보를 딕셔너리 객체로 돌려준다. 자세히 보면 여러 가지 유용한 정보를 찾을 수 있다.\n","\n","돌려받은 객체가 딕셔너리이기 때문에 다음과 같이 호출할 수 있다. 다음은 필자 시스템의 PATH 환경 변수 내용이다."]},{"cell_type":"code","metadata":{"id":"rl0XH7ILQpiX"},"source":[">>> os.environ['PATH']\n","'C:\\\\ProgramData\\\\Oracle\\\\Java\\\\javapath;...생략...'"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"imNe5PIQQ3PX"},"source":["**디렉터리 위치 변경하기 - os.chdir**\n","\n","os.chdir를 사용하면 다음과 같이 현재 디렉터리 위치를 변경할 수 있다."]},{"cell_type":"code","metadata":{"id":"KRGryO3VQ8fQ"},"source":[">>> os.chdir(\"C:\\WINDOWS\")"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ieKYUEyVQ-c7"},"source":["**디렉터리 위치 돌려받기 - os.getcwd**\n","\n","os.getcwd는 현재 자신의 디렉터리 위치를 돌려준다."]},{"cell_type":"code","metadata":{"id":"W4Lnqh3ORAun"},"source":[">>> os.getcwd()\n","'C:\\WINDOWS'"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"8cCO9EWSRCpC"},"source":["**시스템 명령어 호출하기 - os.system**\n","\n","시스템 자체의 프로그램이나 기타 명령어를 파이썬에서 호출할 수도 있다. os.system(\"명령어\")처럼 사용한다. 다음은 현재 디렉터리에서 시스템 명령어 dir을 실행하는 예이다."]},{"cell_type":"code","metadata":{"id":"sX0AiYGNRFD5"},"source":[">>> os.system(\"dir\")"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"GtDvmRsvRGe1"},"source":["**실행한 시스템 명령어의 결괏값 돌려받기 - os.popen**\n","\n","os.popen은 시스템 명령어를 실행한 결괏값을 읽기 모드 형태의 파일 객체로 돌려준다."]},{"cell_type":"code","metadata":{"id":"JmyP9DeaRIjq"},"source":[">>> f = os.popen(\"dir\")"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"6M-gZriMRJ4B"},"source":["읽어 들인 파일 객체의 내용을 보기 위해서는 다음과 같이 하면 된다."]},{"cell_type":"code","metadata":{"id":"Q3a44Q9LRKhB"},"source":[">>> print(f.read())"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"r2hksbwnRMx-"},"source":["**기타 유용한 os 관련 함수**\n","\n","      함수\t                          설명\n","os.mkdir(디렉터리)\t        디렉터리를 생성한다.\n","\n","os.rmdir(디렉터리)\t  디렉터리를 삭제한다.단, 디렉터리가 비어있어야             삭제가 가능하다.\n","\n","os.unlink(파일)\t                    파일을 지운다.\n","os.rename(src, dst)\t    src라는 이름의 파일을 dst라는 이름으로 바꾼다."]},{"cell_type":"markdown","metadata":{"id":"HPKU-CxsRv7X"},"source":["**shutil**\n","shutil은 파일을 복사해 주는 파이썬 모듈이다.\n","\n","다음 예시는 src라는 이름의 파일을 dst로 복사한다. 만약 dst가 디렉터리 이름이라면 src라는 파일 이름으로 dst 디렉터리에 복사하고 동일한 파일 이름이 있을 경우에는 덮어쓴다."]},{"cell_type":"code","metadata":{"id":"xI6CEczJRyJK"},"source":[">>> import shutil\n",">>> shutil.copy(\"src.txt\", \"dst.txt\")"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"pELcGGp4RzwV"},"source":["위 예를 실행해 보면 src.txt 파일과 동일한 내용의 파일이 dst.txt로 복사되는 것을 확인할 수 있다."]},{"cell_type":"markdown","metadata":{"id":"r8W_ZmcKR1aA"},"source":["**glob**\n","가끔 파일을 읽고 쓰는 기능이 있는 프로그램을 만들다 보면 특정 디렉터리에 있는 파일 이름 모두를 알아야 할 때가 있다. 이럴 때 사용하는 모듈이 바로 glob이다.\n","\n","**디렉터리에 있는 파일들을 리스트로 만들기 - glob(pathname)**\n","\n","glob 모듈은 디렉터리 안의 파일들을 읽어서 돌려준다. *, ? 등 메타 문자를 써서 원하는 파일만 읽어 들일 수도 있다.\n","\n","다음은 C:/doit 디렉터리에 있는 파일 중 이름이 mark로 시작하는 파일을 모두 찾아서 읽어들이는 예이다."]},{"cell_type":"code","metadata":{"id":"LZ_m-jprR_Nf"},"source":[">>> import glob\n",">>> glob.glob(\"c:/doit/mark*\")\n","['c:/doit\\\\marks1.py', 'c:/doit\\\\marks2.py', 'c:/doit\\\\marks3.py']\n",">>>"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"EMiLgsNfSDy3"},"source":["**tempfile**\n","\n","파일을 임시로 만들어서 사용할 때 유용한 모듈이 바로 tempfile이다. tempfile.mkstemp()는 중복되지 않는 임시 파일의 이름을 무작위로 만들어서 돌려준다."]},{"cell_type":"code","metadata":{"id":"PBhfaih2SG83"},"source":[">>> import tempfile\n",">>> filename = tempfile.mkstemp()\n",">>> filename\n","'C:\\WINDOWS\\TEMP\\~-275151-0'"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"MfQN2HW-SJX8"},"source":["tempfile.TemporaryFile()은 임시 저장 공간으로 사용할 파일 객체를 돌려준다. 이 파일은 기본적으로 바이너리 쓰기 모드(wb)를 갖는다. f.close()가 호출되면 이 파일 객체는 자동으로 사라진다."]},{"cell_type":"code","metadata":{"id":"4gDf8HHISLmm"},"source":[">>> import tempfile\n",">>> f = tempfile.TemporaryFile()\n",">>> f.close()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"XQ1a8PA-SZo0"},"source":["**time**\n","시간과 관련된 time 모듈에는 함수가 굉장히 많다. 그중 가장 유용한 몇 가지만 알아보자.\n","\n","**time.time**\n","\n","time.time()은 UTC(Universal Time Coordinated 협정 세계 표준시)를 사용하여 현재 시간을 실수 형태로 돌려주는 함수이다. 1970년 1월 1일 0시 0분 0초를 기준으로 지난 시간을 초 단위로 돌려준다."]},{"cell_type":"code","metadata":{"id":"2CEAzddTSest"},"source":[">>> import time\n",">>> time.time()\n","988458015.73417199"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Wt60vwPeSgpT"},"source":["**time.localtime**\n","\n","time.localtime은 time.time()이 돌려준 실수 값을 사용해서 연도, 월, 일, 시, 분, 초, ... 의 형태로 바꾸어 주는 함수이다."]},{"cell_type":"code","metadata":{"id":"q_I1jVcFSjJI"},"source":[">>> time.localtime(time.time())\n","time.struct_time(tm_year=2013, tm_mon=5, tm_mday=21, tm_hour=16,\n","    tm_min=48, tm_sec=42, tm_wday=1, tm_yday=141, tm_isdst=0)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"BJHSI_A9Slg2"},"source":["**time.asctime**\n","\n","위 time.localtime에 의해서 반환된 튜플 형태의 값을 인수로 받아서 날짜와 시간을 알아보기 쉬운 형태로 돌려주는 함수이다."]},{"cell_type":"code","metadata":{"id":"Au-WSLS5SqEE"},"source":["time.asctime\n","\n","위 time.localtime에 의해서 반환된 튜플 형태의 값을 인수로 받아서 날짜와 시간을 알아보기 쉬운 형태로 돌려주는 함수이다."],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"1iPA_y0lSsY6"},"source":["**time.ctime**\n","\n","time.asctime(time.localtime(time.time()))은 time.ctime()을 사용해 간편하게 표시할 수 있다. asctime과 다른 점은 ctime은 항상 현재 시간만을 돌려준다는 점이다."]},{"cell_type":"code","metadata":{"id":"b2r6rXu4Svpc"},"source":[">>> time.ctime()\n","'Sat Apr 28 20:56:31 2001'"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"EQNUg_UaSzO3"},"source":["**time.strftime**"]},{"cell_type":"code","metadata":{"id":"-VNmQL4GT4tK"},"source":["time.strftime('출력할 형식 포맷 코드', time.localtime(time.time()))"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"I4Xh86cCT7Lw"},"source":["strftime 함수는 시간에 관계된 것을 세밀하게 표현하는 여러 가지 포맷 코드를 제공한다.\n","\n","시간에 관계된 것을 표현하는 포맷 코드"]},{"cell_type":"markdown","metadata":{"id":"snXJciWpZcvI"},"source":["시간에 관계된 것을 표현하는 포맷 코드\n","\n","포맷코드\t      설명\t                                   예\n","%a\t         요일 줄임말         \t                       Mon\n","%A\t            요일\t                                  Monday\n","%b\t          달 줄임말\t                                 Jan\n","%B\t             달\t                                   January\n","%c\t       날짜와 시간을 출력함\t                  06/01/01 17:22:21\n","%d\t            날(day)\t                               [01,31]\n","%H\t   시간(hour)-24시간 출력 형태\t                   [00,23]\n","%I\t   시간(hour)-12시간 출력 형태\t                   [01,12]\n","%j\t     1년 중 누적 날짜\t                            [001,366]\n","%m\t            달\t                                   [01,12]\n","%M\t            분\t                                   [01,59]\n","%p\t         AM or PM                \t                   AM\n","%S\t            초\t                                   [00,59]\n","%U\t 1년 중 누적 주-일요일을 시작으로\t                 [00,53]\n","%w\t      숫자로 된 요일\t                          [0(일요일),6]\n","%W\t1년 중 누적 주-월요일을 시작으로\t                [00,53]\n","%x\t현재 설정된 로케일에 기반한 날짜 출력\t            06/01/01\n","%X\t현재 설정된 로케일에 기반한 시간 출력\t            17:22:21\n","%Y\t          년도 출력\t                                2001\n","%Z\t       시간대 출력\t                            대한민국 표준시\n","%%\t           문자\t                                     %\n","%y\t세기부분을 제외한 년도 출력\t                         01"]},{"cell_type":"markdown","metadata":{"id":"Fvt4F_audzoD"},"source":["다음은 time.strftime을 사용하는 예이다."]},{"cell_type":"code","metadata":{"id":"PPUYeaAJd1th"},"source":[">>> import time\n",">>> time.strftime('%x', time.localtime(time.time()))\n","'05/01/01'\n",">>> time.strftime('%c', time.localtime(time.time()))\n","'05/01/01 17:22:21'"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"LE6dbMqGd3aw"},"source":["time.sleep\n","\n","time.sleep 함수는 주로 루프 안에서 많이 사용한다. 이 함수를 사용하면 일정한 시간 간격을 두고 루프를 실행할 수 있다. 다음 예를 보자."]},{"cell_type":"code","metadata":{"id":"UFjNoJeHd44U"},"source":["#sleep1.py\n","import time\n","for i in range(10):\n","    print(i)\n","    time.sleep(1)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"8Acm30_8d6UP"},"source":["위 예는 1초 간격으로 0부터 9까지의 숫자를 출력한다. 위 예에서 볼 수 있듯이 time.sleep 함수의 인수는 실수 형태를 쓸 수 있다. 즉 1이면 1초, 0.5면 0.5초가 되는 것이다."]},{"cell_type":"markdown","metadata":{"id":"GRFxzxRGd8MR"},"source":["**calendar**\n","\n","calendar는 파이썬에서 달력을 볼 수 있게 해주는 모듈이다.\n","\n","**calendar.calendar(연도**)로 사용하면 그해의 전체 달력을 볼 수 있다. 결괏값은 달력이 너무 길어 생략하겠다."]},{"cell_type":"code","metadata":{"id":"W45Yl43heBqQ"},"source":[">>> import calendar\n",">>> print(calendar.calendar(2015))"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"iP68LOGNeDPL"},"source":["calendar.prcal(연도)를 사용해도 위와 똑같은 결괏값을 얻을 수 있다."]},{"cell_type":"code","metadata":{"id":"uBcx3JHJeE3u"},"source":[">>> calendar.prcal(2015)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"nKfiLc3aeGB4"},"source":["다음 예는 2015년 12월의 달력만 보여 준다."]},{"cell_type":"code","metadata":{"id":"B_lbxub6eH_W"},"source":[">>> calendar.prmonth(2015, 12)\n","December 2015\n","Mo Tu We Th Fr Sa Su\n","    1  2  3  4  5  6\n","7  8  9  10 11 12 13\n","14 15 16 17 18 19 20\n","21 22 23 24 25 26 27\n","28 29 30 31"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"JPRLO64ceJks"},"source":["**calendar.weekday**\n","\n","calendar 모듈의 또 다른 유용한 함수를 보자. weekday(연도, 월, 일) 함수는 그 날짜에 해당하는 요일 정보를 돌려준다. 월요일은 0, 화요일은 1, 수요일은 2, 목요일은 3, 금요일은 4, 토요일은 5, 일요일은 6이라는 값을 돌려준다."]},{"cell_type":"code","metadata":{"id":"x2uWNlqseMHZ"},"source":[">>> calendar.weekday(2015, 12, 31)\n","3"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"mJmgWM6SeNwx"},"source":["위의 예에서 2015년 12월 31일은 목요일임을 보여 준다.\n","\n","**calendar.monthrange**\n","\n","monthrange(연도, 월) 함수는 입력받은 달의 1일이 무슨 요일인지와 그 달이 며칠까지 있는지를 튜플 형태로 돌려준다."]},{"cell_type":"code","metadata":{"id":"H-NVAEPteP6C"},"source":[">>> calendar.monthrange(2015,12)\n","(1, 31)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"LzXLIWcAeRZe"},"source":["위 예는 2015년 12월 1일은 화요일이고, 이 달은 31일까지 있다는 것을 보여 준다.\n","\n","날짜와 관련된 프로그래밍을 할 때 위 2가지 함수는 매우 유용하게 사용된다."]},{"cell_type":"markdown","metadata":{"id":"rNJ1UJJreS4N"},"source":["**random**\n","\n","random은 난수(규칙이 없는 임의의 수)를 발생시키는 모듈이다. random과 randint에 대해 알아보자.\n","\n","다음은 0.0에서 1.0 사이의 실수 중에서 난수 값을 돌려주는 예를 보여 준다."]},{"cell_type":"code","metadata":{"id":"6oGj8GaleVwD"},"source":[">>> import random\n",">>> random.random()\n","0.53840103305098674"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"7Hr-LcD7eXAC"},"source":["다음 예는 1에서 10 사이의 정수 중에서 난수 값을 돌려준다."]},{"cell_type":"code","metadata":{"id":"oHbheWdkeYWv"},"source":[">>> random.randint(1, 10)\n","6"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"t4Lrb5DeeZqt"},"source":["다음 예는 1에서 55 사이의 정수 중에서 난수 값을 돌려준다."]},{"cell_type":"code","metadata":{"id":"AsMPOfoUebET"},"source":[">>> random.randint(1, 55)\n","43"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Cl5V_OKCecaK"},"source":["random 모듈을 사용해서 재미있는 함수를 하나 만들어 보자."]},{"cell_type":"code","metadata":{"id":"F-FbzZMbefqH"},"source":["# random_pop.py\n","import random\n","def random_pop(data):\n","    number = random.randint(0, len(data)-1)\n","    return data.pop(number)\n","\n","if __name__ == \"__main__\":\n","    data = [1, 2, 3, 4, 5]\n","    while data: \n","        print(random_pop(data))\n","결과값:\n","2 \n","3 \n","1 \n","5 \n","4"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"hTJJEVqwehrz"},"source":["위 random_pop 함수는 리스트의 요소 중에서 무작위로 하나를 선택하여 꺼낸 다음 그 값을 돌려준다. 물론 꺼낸 요소는 pop 메서드에 의해 사라진다.\n","\n","random_pop 함수는 random 모듈의 choice 함수를 사용하여 다음과 같이 좀 더 직관적으로 만들 수도 있다."]},{"cell_type":"code","metadata":{"id":"espofYA2ei_B"},"source":["def random_pop(data):\n","    number = random.choice(data)\n","    data.remove(number)\n","    return number"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"FbenEzu-ekQY"},"source":["random.choice 함수는 입력으로 받은 리스트에서 무작위로 하나를 선택하여 돌려준다.\n","\n","리스트의 항목을 무작위로 섞고 싶을 때는 random.shuffle 함수를 사용하면 된다."]},{"cell_type":"code","metadata":{"id":"Ev4fR1lpeljT"},"source":[">>> import random\n",">>> data = [1, 2, 3, 4, 5]\n",">>> random.shuffle(data)\n",">>> data\n","[5, 1, 3, 4, 2]\n",">>>"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"2_pnoLzXenM_"},"source":["[1, 2, 3, 4, 5] 리스트가 shuffle 함수에 의해 섞여서 [5, 1, 3, 4, 2]로 변한 것을 확인할 수 있다."]},{"cell_type":"markdown","metadata":{"id":"p-hDzBnJeot_"},"source":["**webbrowser**\n","\n","webbrowser는 자신의 시스템에서 사용하는 기본 웹 브라우저를 자동으로 실행하는 모듈이다. 다음 예제는 웹 브라우저를 자동으로 실행하고 해당 URL인 google.com으로 가게 해 준다."]},{"cell_type":"code","metadata":{"id":"pvsHpt5ierUK"},"source":[">>> import webbrowser\n",">>> webbrowser.open(\"http://google.com\")"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"mWYcFkxPexgS"},"source":["webbrowser의 open 함수는 웹 브라우저가 이미 실행된 상태라면 입력 주소로 이동한다. 만약 웹 브라우저가 실행되지 않은 상태라면 새로 웹 브라우저를 실행한 후 해당 주소로 이동한다.\n","\n","open_new 함수는 이미 웹 브라우저가 실행된 상태이더라도 새로운 창으로 해당 주소가 열리게 한다."]},{"cell_type":"code","metadata":{"id":"iOjY5Tume8g7"},"source":[">>> webbrowser.open_new(\"http://google.com\")"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"yqkqPFtBe_ml"},"source":["[스레드를 다루는 threading 모듈]\n","\n","스레드 프로그래밍은 초보 프로그래머가 구현하기에는 매우 어려운 기술이다. 여기에 잠시 소개했으니 눈으로만 살펴보고 넘어가자.\n","\n","컴퓨터에서 동작하고 있는 프로그램을 프로세스(Process)라고 한다. 보통 1개의 프로세스는 한 가지 일만 하지만 스레드(Thread)를 사용하면 한 프로세스 안에서 2가지 또는 그 이상의 일을 동시에 수행할 수 있다.\n","\n","간단한 예제로 설명을 대신하겠다."]},{"cell_type":"code","metadata":{"id":"3c0vWKJnfBhL"},"source":["# thread_test.py\n","import time\n","\n","def long_task():  # 5초의 시간이 걸리는 함수\n","    for i in range(5):\n","        time.sleep(1)  # 1초간 대기한다.\n","        print(\"working:%s\\n\" % i)\n","\n","print(\"Start\")\n","\n","for i in range(5):  # long_task를 5회 수행한다.\n","    long_task()\n","\n","print(\"End\")"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"PU2lSnDsfDEi"},"source":["long_task 함수는 수행하는 데 5초의 시간이 걸리는 함수이다. 위 프로그램은 이 함수를 총 5번 반복해서 수행하는 프로그램이다. 이 프로그램은 5초가 5번 반복되니 총 25초의 시간이 걸린다.\n","\n","하지만 앞에서 설명했듯이 스레드를 사용하면 5초의 시간이 걸리는 long_task 함수를 동시에 실행할 수 있으니 시간을 줄일 수 있다.\n","\n","다음과 같이 프로그램을 수정해 보자."]},{"cell_type":"code","metadata":{"id":"nNKKZIOIfEwx"},"source":["# thread_test.py\n","import time\n","import threading  # 스레드를 생성하기 위해서는 threading 모듈이 필요하다.\n","\n","def long_task():\n","    for i in range(5):\n","        time.sleep(1)\n","        print(\"working:%s\\n\" % i)\n","\n","print(\"Start\")\n","\n","threads = []\n","for i in range(5):\n","    t = threading.Thread(target=long_task)  # 스레드를 생성한다.\n","    threads.append(t) \n","\n","for t in threads:\n","    t.start()  # 스레드를 실행한다.\n","\n","print(\"End\")"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"bMLoaaQEfGoy"},"source":["이와 같이 프로그램을 수정하고 실행해 보면 25초 걸리던 작업이 5초 정도에 수행되는 것을 확인할 수 있다. threading.Thread를 사용하여 만든 스레드 객체가 동시 작업을 가능하게 해 주기 때문이다.\n","\n","하지만 위 프로그램을 실행해 보면 \"Start\"와 \"End\"가 먼저 출력되고 그 이후에 스레드의 결과가 출력되는 것을 확인할 수 있다. 그리고 프로그램이 정상 종료되지 않는다. 우리가 기대하는 것은 \"Start\"가 출력되고 그다음에 스레드의 결과가 출력된 후 마지막으로 \"End\"가 출력되는 것이다.\n","\n","이 문제를 해결하기 위해서는 다음과 같이 프로그램을 수정해야 한다."]},{"cell_type":"code","metadata":{"id":"IVUjm_AOfIVL"},"source":["# thread_test.py\n","import time\n","import threading\n","\n","def long_task():\n","    for i in range(5):\n","        time.sleep(1)\n","        print(\"working:%s\\n\" % i)\n","\n","print(\"Start\")\n","\n","threads = []\n","for i in range(5):\n","    t = threading.Thread(target=long_task)\n","    threads.append(t)\n","\n","for t in threads:\n","    t.start()\n","\n","for t in threads:\n","    t.join()  # join으로 스레드가 종료될때까지 기다린다.\n","\n","print(\"End\")"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"rmat0qZnfKKL"},"source":["스레드의 join 함수는 해당 스레드가 종료될 때까지 기다리게 한다. 따라서 위와 같이 수정하면 우리가 원하던 출력을 보게 된다."]},{"cell_type":"markdown","metadata":{"id":"DPigjUHsjQmz"},"source":["**Q1**\n","\n","다음은 Calculator 클래스이다."]},{"cell_type":"code","metadata":{"id":"fnwtzr8-jTNr"},"source":["class Calculator:\n","    def __init__(self):\n","        self.value = 0\n","\n","    def add(self, val):\n","        self.value += val"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"dFPm3Ii3jUg0"},"source":["위 클래스를 상속하는 UpgradeCalculator를 만들고 값을 뺄 수 있는 minus 메서드를 추가해 보자. 즉 다음과 같이 동작하는 클래스를 만들어야 한다."]},{"cell_type":"code","metadata":{"id":"OjxcvobijV6g"},"source":["cal = UpgradeCalculator()\n","cal.add(10)\n","cal.minus(7)\n","\n","print(cal.value) # 10에서 7을 뺀 3을 출력"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"RD1m5Vf2jXTq"},"source":["**Q2**\n","\n","객체변수 value가 100 이상의 값은 가질 수 없도록 제한하는 MaxLimitCalculator 클래스를 만들어 보자. 즉 다음과 같이 동작해야 한다."]},{"cell_type":"code","metadata":{"id":"vjIJ6spKjj6O"},"source":["cal = MaxLimitCalculator()\n","cal.add(50) # 50 더하기\n","cal.add(60) # 60 더하기\n","\n","print(cal.value) # 100 출력"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"azbUBCOTjlMJ"},"source":["단 반드시 다음과 같은 Calculator 클래스를 상속해서 만들어야 한다."]},{"cell_type":"code","metadata":{"id":"1SyGSlmVjmqq"},"source":["class Calculator:\n","    def __init__(self):\n","        self.value = 0\n","\n","    def add(self, val):\n","        self.value += val"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"HOyw_KTLjn8X"},"source":["**Q3**\n","\n","다음 결과를 예측해 보자.\n","\n","하나."]},{"cell_type":"code","metadata":{"id":"0B--PJkSjqyq"},"source":[">>> all([1, 2, abs(-3)-3])"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"VsapGIcsjr_a"},"source":["둘."]},{"cell_type":"code","metadata":{"id":"p9m6v9mdjtkJ"},"source":[">>> chr(ord('a')) == 'a'"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"nzWcVAsejuxi"},"source":["**Q4**\n","\n","filter와 lambda를 사용하여 리스트 [1, -2, 3, -5, 8, -3]에서 음수를 모두 제거해 보자."]},{"cell_type":"markdown","metadata":{"id":"shsSV1Avjz59"},"source":["**Q5**\n","\n","234라는 10진수의 16진수는 다음과 같이 구할 수 있다."]},{"cell_type":"code","metadata":{"id":"mqTiZQ-ij2Nz"},"source":[">>> hex(234)\n","'0xea'"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"oMNa2bodj3yw"},"source":["이번에는 반대로 16진수 문자열 0xea를 10진수로 변경해 보자.\n","\n","※ 내장 함수 int를 활용해 보자."]},{"cell_type":"markdown","metadata":{"id":"-fWD4Z4Ej6SJ"},"source":["**Q6**\n","\n","map과 lambda를 사용하여 [1, 2, 3, 4] 리스트의 각 요솟값에 3이 곱해진 리스트 [3, 6, 9, 12]를 만들어 보자."]},{"cell_type":"markdown","metadata":{"id":"i-49Mhwhj9Da"},"source":["**Q7**\n","\n","다음 리스트의 최댓값과 최솟값의 합을 구해 보자."]},{"cell_type":"code","metadata":{"id":"_3ctt8V3j_Tg"},"source":["[-8, 2, 7, 5, -3, 5, 0, 1]"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"HIPfP8PokAsc"},"source":["**Q8**\n","\n","17 / 3의 결과는 다음과 같다."]},{"cell_type":"code","metadata":{"id":"Dt3UbQ3mkHoG"},"source":[">>> 17 / 3\n","5.666666666666667"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"UCimeeHZkKLo"},"source":["위와 같은 결괏값 5.666666666666667을 소숫점 4자리까지만 반올림하여 표시해 보자."]},{"cell_type":"markdown","metadata":{"id":"-L3FilMukLnY"},"source":["**Q9**\n","\n","다음과 같이 실행할 때 입력값을 모두 더하여 출력하는 스크립트(C:\\doit\\myargv.py)를 작성해 보자."]},{"cell_type":"code","metadata":{"id":"XJfwrtn8kOm0"},"source":["C:\\> cd doit\n","C:\\doit> python myargv.py 1 2 3 4 5 6 7 8 9 10\n","55"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"F8ixpVqJkQOH"},"source":["※ 외장 함수 sys.argv를 사용해 보자."]},{"cell_type":"markdown","metadata":{"id":"As6M_e0hkSsm"},"source":["**Q10**\n","\n","os 모듈을 사용하여 다음과 같이 동작하도록 코드를 작성해 보자.\n","\n","1. C:\\doit 디렉터리로 이동한다.\n","2. dir 명령을 실행하고 그 결과를 변수에 담는다.\n","3. dir 명령의 결과를 출력한다."]},{"cell_type":"markdown","metadata":{"id":"Oh7BQbf-kbOc"},"source":["**Q11**\n","\n","glob 모듈을 사용하여 C:\\doit 디렉터리의 파일 중 확장자가 .py인 파일만 출력하는 프로그램을 작성해 보자."]},{"cell_type":"markdown","metadata":{"id":"n1wzOIEjkd_Y"},"source":["**Q12**\n","\n","time 모듈을 사용하여 현재 날짜와 시간을 다음과 같은 형식으로 출력해 보자."]},{"cell_type":"code","metadata":{"id":"KQjDoGtqkh6J"},"source":["2018/04/03 17:20:32"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Eix-ySuXkjWr"},"source":["**Q13**\n","\n","random 모듈을 사용하여 로또 번호(1~45 사이의 숫자 6개)를 생성해 보자(단 중복된 숫자가 있으면 안 됨)."]},{"cell_type":"markdown","metadata":{"id":"KAblNzpnkzW_"},"source":["**06-1 내가 프로그램을 만들 수 있을까?**\n","\n","프로그램을 막 시작하려는 사람이 맨 먼저 부딪히게 되는 벽은 아마도 다음과 같지 않을까?\n","\n","\"문법도 어느 정도 알겠고, 책 내용도 대부분 이해된다. 하지만 이러한 지식을 바탕으로 내가 도대체 어떤 프로그램을 만들 수 있을까?\"\n","\n","이럴 때는 \"어떤 프로그램을 짜야지\"라는 생각보다는 다른 사람들이 만든 프로그램 파일을 자세히 들여다보고 분석하는 데서 시작하는 것이 좋다. 그러다 보면 다른 사람들의 생각도 읽을 수 있고 거기에 더해 뭔가 새로운 아이디어가 떠오를 수도 있다. 하지만 여기에서 가장 중요한 것은 자신의 수준에 맞는 소스를 찾는 일이다. 그래서 이 장에서는 아주 쉬운 예제부터 시작해서 차츰 수준을 높여 실용적인 예제까지 다루려고 노력하였다. 배운 내용을 어떻게 활용하는가는 독자의 몫이다.\n","\n","필자는 예전에 프로그래밍을 막 시작한 사람에게 구구단 프로그램을 짜 보라고 한 적이 있다. 쉬운 과제이고 파이썬 문법도 다 공부한 사람이었는데 프로그램을 어떻게 만들어야 할지 전혀 갈피를 잡지 못했다. 그래서 필자는 다음과 같은 해결책을 알려 주었다.\n","\n","프로그램을 만들려면 가장 먼저 \"입력\"과 \"출력\"을 생각하라.\n","\n","가령 구구단 프로그램 중 2단을 만든다면 2를 입력값으로 주었을 때 어떻게 출력되어야 할지 생각해 보라고 했다. 그래도 그림이 그려지지 않는 것 같아 직접 연습장에 적어 가며 설명해 주었다.\n","\n","1. 함수 이름은? GuGu로 짓자\n","2. 입력받는 값은? 2\n","3. 출력하는 값은? 2단(2, 4, 6, 8, …, 18)\n","4. 결과는 어떤 형태로 저장하지? 연속된 자료형이니까 리스트!"]},{"cell_type":"markdown","metadata":{"id":"9CSONX46k-P8"},"source":["1. 먼저 에디터를 열고 다음과 같이 입력한다. GuGu라는 함수에 2를 입력값으로 주면 result라는 변수에 결괏값을 넣으라는 뜻이다."]},{"cell_type":"code","metadata":{"id":"f3rxhbdGlADf"},"source":["result = GuGu(2)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"uM0v9violDpq"},"source":["2. 이제 결괏값을 어떤 형태로 받을 것인지 고민해 보자. 2단이니까 2, 4, 6, … 18까지 갈 것이다. 이런 종류의 데이터는 리스트 자료형이 딱이다. 따라서 result = [2, 4, 6, 8, 10, 12, 14, 16, 18] 같은 결과를 얻는 것이 좋겠다는 생각을 먼저 하고 나서 프로그래밍을 시작하는 것이 필요하다. 이런 식으로 머릿속에 그림이 그려지기 시작하면 의외로 생각이 가볍게 좁혀지는 것을 느낄 수 있을 것이다."]},{"cell_type":"markdown","metadata":{"id":"Spb1DjkxlFJ4"},"source":["3. 어떻게 만들지 생각해 봤으니 1번에서 입력한 문장은 지우고 진짜 프로그램을 짜 보자. 일단 이름을 GuGu로 지은 함수를 다음과 같이 만든다."]},{"cell_type":"code","metadata":{"id":"8FL08bvmlHCs"},"source":["def GuGu(n):\n","    print(n)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"pRltrYvflIdn"},"source":["위와 같은 함수를 만들고 GuGu(2)처럼 실행하면 2를 출력하게 된다. 즉 입력값으로 2가 잘 들어오는지 확인하는 것이다."]},{"cell_type":"markdown","metadata":{"id":"eAScHa0nlJyi"},"source":["4. 이제 결괏값을 담을 리스트를 하나 생성하자. 앞에서 작성한 print(n)은 입력이 잘되는지 를 확인하기 위한 것이었으므로 지워도 좋다."]},{"cell_type":"code","metadata":{"id":"emDvRqUqlLNY"},"source":["def GuGu(n):\n","    result = []"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"qgTU7yTWlMaw"},"source":["5. 다음으로 result에 2, 4, 6, … 18을 어떻게 넣어야 할지 생각해 보자. 필자는 다음과 같이 리스트에 요소를 추가하는 append 내장 함수를 사용하기로 결정했다."]},{"cell_type":"code","metadata":{"id":"xF8RjdJqlOCv"},"source":["def GuGu(n):\n","    result = []\n","    result.append(n*1)\n","    result.append(n*2)\n","    result.append(n*3)\n","    result.append(n*4)\n","    result.append(n*5)\n","    result.append(n*6)\n","    result.append(n*7)\n","    result.append(n*8)\n","    result.append(n*9)\n","    return result\n","\n","print(GuGu(2))"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"0TXxpMsLlPp-"},"source":["결괏값: [2, 4, 6, 8, 10, 12, 14, 16, 18]\n","\n","정말 무식한 방법이지만 입력값 2를 주었을 때 원하는 결괏값을 얻을 수 있었다."]},{"cell_type":"markdown","metadata":{"id":"Tt8HgXjtlTbm"},"source":["6. 그런데 위 함수는 반복이 너무 많다. 가만히 보면 result.append(n*□)의 □ 위치에 1부터 9까지 숫자만 다르게 들어가 있다는 것을 알 수 있다. 똑같은 일을 반복할 때는 \"반복문\"을 사용한다고 했다. 그렇다면 1부터 9까지 출력해 주는 반복문을 만들면 되지 않을까?\n","\n","대화형 인터프리터를 열고 다음과 같이 테스트해 보았다."]},{"cell_type":"code","metadata":{"id":"nc_VjBDjlVo8"},"source":[">>> i = 1\n",">>> while i < 10:\n","...     print(i)\n","...     i = i + 1\n","결괏값:\n","1\n","2\n","3\n","4\n","5\n","6\n","7\n","8\n","9"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"78qs1oBUlXKm"},"source":["아주 만족스러운 결과이다. 이제 위 소스 코드를 GuGu 함수에 적용해 보자."]},{"cell_type":"markdown","metadata":{"id":"ImBQ1CtmlXte"},"source":["7. 이상의 생각을 바탕으로 완성한 GuGu 함수는 다음과 같다."]},{"cell_type":"code","metadata":{"id":"xTt9CJ5zlaSv"},"source":["def GuGu(n):\n","    result = []\n","    i = 1\n","    while i < 10:\n","        result.append(n * i)\n","        i = i + 1\n","    return result"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"GV8LLUhjlbmi"},"source":["다음과 같이 테스트해 보자."]},{"cell_type":"code","metadata":{"id":"L4qYyE2flc1o"},"source":["print(GuGu(2))"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"jRJ9Ukv2leqk"},"source":["결괏값: [2, 4, 6, 8, 10, 12, 14, 16, 18]\n","\n","결과는 대만족이다.\n","\n","사실 GuGu 함수는 위와 같은 과정을 거치지 않고도 바로 만들 수 있는 독자들이 많을 것이다. 하지만 더 복잡한 함수를 만들 때는 위와 같이 구체적이고 단계적으로 접근하는 방식이 매우 도움이 된다. 프로그래밍을 할 땐 매우 구체적으로 접근해야 머리가 덜 아프다는 것을 기억하자. 자, 이제 다양한 예제를 접해 보며 여러분 나름대로 멋진 생각을 해보기 바란다."]},{"cell_type":"markdown","metadata":{"id":"3hAV8JSApAGk"},"source":["자, 다음 문제를 어떻게 풀면 좋을지 생각해 보자."]},{"cell_type":"code","metadata":{"id":"zgm1Q5AbpDzR"},"source":["10 미만의 자연수에서 3과 5의 배수를 구하면 3, 5, 6, 9이다. 이들의 총합은 23이다.\n","1000 미만의 자연수에서 3의 배수와 5의 배수의 총합을 구하라."],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"A1Vua-KRpHEV"},"source":["입력 받는 값은?----1부터 999까지(1000 미만의 자연수)\n","\n","출력하는 값은?----3의 배수와 5의 배수의 총합\n","\n","생각해 볼 것은?\n","--3의 배수와 5의 배수는 어떻게 찾지?\n","--3의 배수와 5의 배수가 겹칠 때는 어떻게 하지?\n","\n","이 문제를 풀기 위한 중요 포인트는 두 가지이다. 한 가지는 1000 미만의 자연수를 구하는 방법이고 또 다른 한 가지는 3과 5의 배수를 구하는 것이다. 이 두 가지만 해결되면 문제는 쉽게 해결될 것으로 보인다."]},{"cell_type":"markdown","metadata":{"id":"gmlZldBtpSxA"},"source":["1. 먼저 1000 미만의 자연수는 어떻게 구할 수 있을지 생각해 보자.\n","\n","여러 가지 방법이 떠오를 것이다. 다음과 같이 변수에 초깃값 1을 준 후 루프를 돌리며 1씩 증가시켜서 999까지 진행하는 방법이 가장 일반적인 방법일 것이다."]},{"cell_type":"code","metadata":{"id":"uokPlnicpXGq"},"source":["n = 1\n","while n < 1000:\n","    print(n)\n","    n += 1"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"bkUvcCoBpbNU"},"source":["또는 다음과 같이 좀 더 파이썬다운 range 함수를 사용할 수도 있다."]},{"cell_type":"code","metadata":{"id":"S_4BilEupdoe"},"source":["for n in range(1, 1000):\n","    print(n)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"rjhB-s0ApfIn"},"source":["두 가지 예 모두 실행하면 1부터 999까지 출력하는 것을 확인할 수 있다."]},{"cell_type":"markdown","metadata":{"id":"BCMWgKsEpgeE"},"source":["2.1000까지의 자연수를 차례로 구하는 방법을 알았으니 3과 5의 배수를 구하는 방법을 알아보자.\n","\n"," 1000 미만의 자연수 중 3의 배수는 다음과 같이 증가할 것이다.\n","\n","3, 6, 9, 12, 15, 18, …, 999\n","\n","그렇다면 1부터 1000까지 수가 진행되는 동안 그 수가 3의 배수인지는 어떻게 알 수 있을까? 1부터 1000까지의 수 중 3으로 나누었을 때 나누어떨어지는 경우, 즉 3으로 나누었을 때 나머지가 0인 경우가 바로 3의 배수이다. 따라서 다음과 같이 % 연산자를 사용하면 3의 배수를 쉽게 찾을 수 있다."]},{"cell_type":"code","metadata":{"id":"-6F8f7JFpoII"},"source":["for n in range(1, 1000):\n","    if n % 3 == 0:\n","        print(n)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"jF42InFVptYl"},"source":["그렇다면 5의 배수는 n % 5가 0이 되는 수로 구할 수 있을 것이다."]},{"cell_type":"markdown","metadata":{"id":"HNIX_yrlpuyQ"},"source":["3. 이러한 내용을 바탕으로 만든 최종 풀이는 다음과 같다."]},{"cell_type":"code","metadata":{"id":"v2uYGCnLpwnp"},"source":["result = 0\n","for n in range(1, 1000):\n","    if n % 3 == 0 or n % 5 == 0: \n","        result += n\n","print(result)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"U4l4n_5lqq5c"},"source":["3과 5의 배수에 해당하는 수를 result 변수에 계속해서 더해 주었다.\n","\n","이 문제에는 한 가지 함정이 있는데 3으로도 5로도 나누어지는 15와 같은 수를 이중으로 더해서는 안 된다는 점이다. 따라서 15와 같이 3의 배수도 되고 5의 배수도 되는 값이 이중으로 더해지지 않기 위해 or 연산자를 사용하였다.\n","\n","다음 예는 15와 같은 수를 이중으로 더하여 잘못된 결과를 출력하는 잘못된 풀이이다.\n","\n","**[잘못된 풀이]**"]},{"cell_type":"code","metadata":{"id":"cjGLT5vlqtd1"},"source":["result = 0\n","for n in range(1, 1000):\n","    if n % 3 == 0:\n","        result += n\n","    if n % 5 == 0:\n","        result += n\n","print(result)\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"_GHtzw-XqzSA"},"source":["코딩 연습을 할 수 있는 사이트]\n","\n","이 문제는 코딩 연습을 할 수 있는 \"프로젝트 오일러\"라는 사이트의 첫 번째 문제이다. 이 사이트는 첫 번째 문제부터 차례대로 풀 수 있으며 본인이 작성한 답이 맞는지 즉시 확인할 수도 있다."]},{"cell_type":"markdown","metadata":{"id":"ZkSGuxVoq93R"},"source":["※ 이렇게 게시판의 페이지 수를 보여 주는 것을 \"페이징\"한다고 부른다.\n","\n","함수 이름은? getTotalPage\n","입력 받는 값은? 게시물의 총 건수(m), 한 페이지에 보여줄 게시물 수(n)\n","출력하는 값은? 총 페이지수\n","A씨가 필요한 프로그램을 만들기 위해 입력값과 결괏값이 어떻게 나와야 하는지 먼저 살펴보자. 게시물의 총 건수가 5이고 한 페이지에서 보여 줄 게시물 수가 10이면 총 페이지 수는 당연히 1이 된다. 만약 게시물의 총 건수가 15이고 한 페이지에서 보여 줄 게시물 수가 10이라면 총 페이지 수는 2가 될 것이다.\n","\n","게시물의 총 건수(m)\t페이지당 보여줄 게시물 수(n)\t총 페이지 수\n","        5\t                    10\t                   1\n","        15\t                  10\t                   2\n","        25\t                  10\t                   3\n","        30\t                  10\t                   3"]},{"cell_type":"markdown","metadata":{"id":"VbR621QxrWtL"},"source":["이 문제는 게시판 프로그램을 만들 때 가장 처음 마주치는 난관이라고 할 수 있는 총 페이지수를 구하는 문제이다. 사실 실제 업무에서 사용하는 페이징 기술은 훨씬 복잡한데 여기에서는 그중 가장 간단한 총 페이지 수를 구하는 방법에 대해서만 알아보겠다."]},{"cell_type":"markdown","metadata":{"id":"5XMNZqa5rYfB"},"source":["1. 다음과 같이 총 건수(m)를 한 페이지에 보여 줄 게시물 수(n)로 나누고 1을 더하면 총 페이지 수를 얻을 수 있다.\n","\n","총 페이지 수 = (총 건수 / 한 페이지당 보여 줄 건수) + 1"]},{"cell_type":"markdown","metadata":{"id":"vRYvwpgbrbY3"},"source":["2. 이러한 공식을 적용했을 경우 총 페이지 수가 표의 값처럼 구해지는지 확인해 보자(m을 n으로 나눌 때 소수점 아래 자리를 버리기 위해 / 대신 // 연산자를 사용하였다)."]},{"cell_type":"code","metadata":{"id":"sjVYkBN4rcK2"},"source":["def getTotalPage(m, n):\n","    return m // n + 1\n","\n","print(getTotalPage(5, 10))    # 1 출력\n","print(getTotalPage(15, 10))   # 2 출력\n","print(getTotalPage(25, 10))   # 3 출력\n","print(getTotalPage(30, 10))   # 4 출력"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"hwiCLfUvre7h"},"source":["첫 번째, 두 번째, 세 번째 케이스는 공식에 맞게 결과가 출력된다. 하지만 네 번째 케이스는 총 건수가 30이고 한 페이지에 보여 줄 건수가 10인데 4가 출력되어 실패해 버렸다. 잘 생각해 보자. 총 건수가 30이고 한 페이지에 보여 줄 건수가 10이라면 당연히 총 페이지 수는 3이되어야 한다."]},{"cell_type":"markdown","metadata":{"id":"UJw67GAargfp"},"source":["3. 실패 케이스는 총 게시물 수와 한 페이지에 보여 줄 게시물 수를 나눈 나머지 값이 0이 될 때 발생함을 유추할 수 있을 것이다. 이 실패 케이스를 해결하려면 다음과 같이 코드를 변경해야 한다."]},{"cell_type":"code","metadata":{"id":"p6szjGE8rk_e"},"source":["def getTotalPage(m, n):\n","    if m % n == 0:\n","        return m // n\n","    else:\n","        return m // n + 1\n","\n","print(getTotalPage(5, 10))\n","print(getTotalPage(15, 10))\n","print(getTotalPage(25, 10))\n","print(getTotalPage(30, 10))"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"KDjWmyFCrmpo"},"source":["나누었을 때 나머지가 0인 경우는 나누기의 몫만 돌려주고 그 이외의 경우에는 1을 더하여 돌려주도록 변경했다.\n","\n","프로그램을 실행해 보면 모든 케이스가 원하던 결과를 출력함을 확인할 수 있다."]},{"cell_type":"markdown","metadata":{"id":"Guju_9EpsXFx"},"source":["원하는 메모를 파일에 저장하고 추가 및 조회가 가능한 간단한 메모장을 만들어 보자.\n","\n","필요한 기능은? 메모 추가하기, 메모 조회하기\n","입력 받는 값은? 메모 내용, 프로그램 실행 옵션\n","출력하는 값은? memo.txt\n","가장 먼저 해야 할 일은 메모를 추가하는 것이다. 다음 명령을 실행했을 때 메모를 추가할 수 있도록 만들어 보자.\n","\n","python memo.py -a \"Life is too short\"\n","\n","memo.py는 우리가 작성할 파이썬 프로그램 이름이다. –a는 이 프로그램의 실행 옵션이고 \"Life is too short\"는 추가할 메모 내용이 된다."]},{"cell_type":"markdown","metadata":{"id":"mQ51AhYstPjK"},"source":["1. 우선 다음과 같이 입력으로 받은 옵션과 메모를 출력하는 코드를 작성해 보자."]},{"cell_type":"code","metadata":{"id":"Y2mEEepPtRU-"},"source":["# C:/doit/memo.py\n","import sys\n","\n","option = sys.argv[1]\n","memo = sys.argv[2]\n","\n","print(option)\n","print(memo)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ZzVklswXtTBy"},"source":["sys.argv는 프로그램을 실행할 때 입력된 값을 읽어 들일 수 있는 파이썬 라이브러리이다. sys.argv[0]는 입력받은 값 중에서 파이썬 프로그램 이름인 memo.py이므로 우리가 만들려는 기능에는 필요 없는 값이다. 그리고 순서대로 sys.argv[1]은 프로그램 실행 옵션 값이 되고 sys.argv[2]는 메모 내용이 된다."]},{"cell_type":"markdown","metadata":{"id":"HTV3nKZQtTp6"},"source":["2. memo.py를 작성했다면 다음 명령을 수행해 보자.\n","\n","※ memo.py는 C:\\doit 디렉터리에 저장한다"]},{"cell_type":"code","metadata":{"id":"USdnfR6_tVIi"},"source":["2. memo.py를 작성했다면 다음 명령을 수행해 보자.\n","\n","※ memo.py는 C:\\doit 디렉터리에 저장한다"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"MRv5h0eWtXPf"},"source":["입력으로 전달한 옵션과 메모 내용이 그대로 출력되는 것을 확인할 수 있다."]},{"cell_type":"markdown","metadata":{"id":"wH-wwPqftZQI"},"source":["3. 이제 입력으로 받은 메모를 파일에 쓰도록 코드를 변경해 보자."]},{"cell_type":"code","metadata":{"id":"B7LFeIC_ta2B"},"source":["# c:/doit/memo.py\n","import sys\n","\n","option = sys.argv[1]\n","\n","if option == '-a':\n","    memo = sys.argv[2]\n","    f = open('memo.txt', 'a')\n","    f.write(memo)\n","    f.write('\\n')\n","    f.close()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"tr_S6LwotdEU"},"source":["옵션이 -a인 경우에만 memo 값을 읽어 memo.txt 파일에 그 값을 쓰도록 코드를 작성했다. 여기에서 메모는 항상 새로운 내용이 작성되는 것이 아니라 한 줄씩 추가되어야 하므로 파일열기 모드를 a로 했다. 그리고 메모를 추가할 때마다 다음 줄에 저장되도록 줄바꿈 문자(\\n)도 추가로 파일에 쓰게 했다."]},{"cell_type":"markdown","metadata":{"id":"Kfz64iNdthGD"},"source":["4. 이제 다음과 같은 명령을 수행해 보자."]},{"cell_type":"code","metadata":{"id":"4e5V3sZttixH"},"source":["C:\\doit>python memo.py -a \"Life is too short\"  \n","C:\\doit>python memo.py -a \"You need python\""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"XJivDD--tkG3"},"source":["그리고 파일에 정상적으로 메모가 기입되었는지 다음과 같이 확인해 보자."]},{"cell_type":"code","metadata":{"id":"RFoIs76vtlyq"},"source":["C:\\doit>type memo.txt\n","Life is too short\n","You need python"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ikM0HrnytnI3"},"source":["추가한 메모가 정상적으로 저장된 것을 볼 수 있다."]},{"cell_type":"code","metadata":{"id":"04p7K385tpHn"},"source":["5. 이번에는 작성한 메모를 출력하는 부분을 만들 차례이다. 메모 출력은 다음과 같이 동작하도록 만들어 보자.\n","\n","python memo.py -v\n","\n","메모 추가는 –a 옵션을 사용하고 메모 출력은 –v 옵션을 사용한다.\n","\n","이제 메모 출력을 위해 다음과 같이 코드를 변경해 보자."],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"jw_ksrtNtrt6"},"source":["# c:/doit/memo.py\n","import sys\n","\n","option = sys.argv[1]\n","\n","if option == '-a':\n","    memo = sys.argv[2]\n","    f = open('memo.txt', 'a')\n","    f.write(memo)\n","    f.write('\\n')\n","    f.close()\n","elif option == '-v':\n","    f = open('memo.txt')\n","    memo = f.read()\n","    f.close()\n","    print(memo)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"u-lsVGyBttLX"},"source":["옵션으로 –v가 들어온 경우 memo.txt 파일을 읽어서 출력한다."]},{"cell_type":"markdown","metadata":{"id":"XbzblRr8tujO"},"source":["6. 코드를 수정한 후 다음과 같은 명령을 수행해 보자."]},{"cell_type":"code","metadata":{"id":"OsSWyyPItwhv"},"source":["C:\\doit>python memo.py -v\n","Life is too short\n","You need python"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ByD23iuEtyEy"},"source":["입력한 메모가 그대로 출력되는 것을 확인할 수 있다."]},{"cell_type":"code","metadata":{"id":"b2YSoBnSt5xC"},"source":["python tabto4.py src dst"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"AvMqMOqXt9ik"},"source":["tabto4.py는 우리가 작성해야 할 파이썬 프로그램 이름이고 src는 탭을 포함하고 있는 원본 파일 이름이다. dst는 파일 안의 탭을 공백 4개로 변환한 결과를 저장할 파일 이름이다.\n","\n","예를 들어 a.txt 파일에 있는 탭을 4개의 공백으로 바꾸어 b.txt 파일에 저장하고 싶다면 다음과 같이 수행해야 한다."]},{"cell_type":"code","metadata":{"id":"I1O5zgaQt_GO"},"source":["python tabto4.py a.txt b.txt"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"hnO3Fp3OuAtC"},"source":["1. 우선 다음과 같이 tabto4.py 파일을 작성해 보자.\n","\n","※ tabto4.py는 C:\\doit 디렉터리에 저장한다."]},{"cell_type":"code","metadata":{"id":"XrhaA-60uCQu"},"source":["# c:/doit/tabto4.py\n","import sys\n","\n","src = sys.argv[1]\n","dst = sys.argv[2]\n","\n","print(src)\n","print(dst)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Qt0LEsg2uDzi"},"source":["sys.argv를 사용하여 입력값을 확인하도록 만든 코드이다."]},{"cell_type":"markdown","metadata":{"id":"_mOzfvPTkZVo"},"source":["2. 다음과 같이 수행했을 때 입력값이 정상적으로 출력되는지 확인해 보자."]},{"cell_type":"code","metadata":{"id":"cMsMmNZSkbKr"},"source":["C:\\doit>python tabto4.py a.txt b.txt\n","a.txt\n","b.txt"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ogSMoE4ok0EJ"},"source":["입력으로 전달한 a.txt와 b.txt가 정상적으로 출력되는 것을 확인할 수 있다."]},{"cell_type":"markdown","metadata":{"id":"fTQitzYSk1lj"},"source":["3. 테스트를 위한 원본 파일(탭을 포함하는 파일)인 a.txt를 다음과 같이 작성한다. 각 단어는 탭(\\t) 문자로 분리되도록 입력해야 한다."]},{"cell_type":"code","metadata":{"id":"o1LcqFkKk3Qo"},"source":["Life    is  too short\n","You need    python"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"U4RXZyNck4p1"},"source":["4. 이제 탭 문자를 포함한 a.txt 파일을 읽어서 탭을 공백 4개로 변환할 수 있도록 코드를 변경해 보자."]},{"cell_type":"code","metadata":{"id":"2JXI0L83k6VE"},"source":["# c:/doit/tabto4.py\n","import sys\n","\n","src = sys.argv[1]\n","dst = sys.argv[2]\n","\n","f = open(src)\n","tab_content = f.read()\n","f.close()\n","\n","space_content = tab_content.replace(\"\\t\", \" \"*4)\n","print(space_content)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"_Po0rZYwk73N"},"source":["위 코드는 src에 해당되는 입력 파일을 읽어서 그 내용을 tab_content라는 변수에 저장한 후 문자열의 replace 함수를 사용하여 탭(\\t)을 4개의 공백으로 변경하는 코드이다."]},{"cell_type":"markdown","metadata":{"id":"dyOO-bkMk9kc"},"source":["5. tabto4.py를 위와 같이 변경한 후 다음과 같은 명령을 수행해 보자."]},{"cell_type":"code","metadata":{"id":"BknFSzgak--0"},"source":["C:\\doit>python tabto4.py a.txt b.txt\n","Life    is    too    short\n","You    need    python"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"BC3MyzkslAP6"},"source":["아마도 탭 문자가 공백 4개로 변경되어 출력될 것이다. 하지만 탭과 공백의 차이점을 눈으로 알 수는 없으므로 탭이 정상적으로 공백으로 변경되었는지 확인하기 어렵다."]},{"cell_type":"markdown","metadata":{"id":"whgaCQ9ElBra"},"source":["6. 이제 변경된 내용을 b.txt 파일에 저장할 수 있도록 다음과 같이 프로그램을 변경해 보자."]},{"cell_type":"code","metadata":{"id":"y3XJvkiFlDGv"},"source":["# c:/doit/tabto4.py\n","import sys\n","\n","src = sys.argv[1]\n","dst = sys.argv[2]\n","\n","f = open(src)\n","tab_content = f.read()\n","f.close()\n","\n","space_content = tab_content.replace(\"\\t\", \" \"*4)\n","\n","f = open(dst, 'w')\n","f.write(space_content)\n","f.close()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"EgaK1c-HlEp9"},"source":["탭이 공백으로 변경된 space_content를 출력 파일인 dst에 쓰도록 코드를 수정하였다.\n","\n","7. 프로그램을 실행하기 위해 다음 명령을 수행한다."]},{"cell_type":"code","metadata":{"id":"xYklkST0lGKT"},"source":["C:\\doit>python tabto4.py a.txt b.txt"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"kUx7XmWIlH2y"},"source":["위 명령을 수행하면 b.txt 파일이 C:\\doit 디렉터리에 생성된다. 에디터로 b.txt 파일을 열어서 탭이 4개의 공백 문자로 변경되었는지 확인해 보자. 프로그램을 작성할 때 사용하는 에디터는 대부분 탭과 공백 문자를 다르게 표시하므로 눈으로 확인이 가능할 것이다."]},{"cell_type":"markdown","metadata":{"id":"hkbJ3n2wlQJX"},"source":["1. 다음과 같이 sub_dir_search.py 파일을 작성해 보자.\n","\n","※ sub_dir_search.py는 C:\\doit 디렉터리에 저장한다."]},{"cell_type":"code","metadata":{"id":"oa6OPOJ9lSPE"},"source":["# C:/doit/sub_dir_search.py\n","\n","def search(dirname):\n","    print (dirname)\n","\n","search(\"c:/\")"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"_VkOG5XylTtL"},"source":["search 함수를 만들고 시작 디렉터리를 입력받도록 코드를 작성했다."]},{"cell_type":"markdown","metadata":{"id":"TrLwDpMclVHp"},"source":["2. 이제 이 디렉터리에 있는 파일을 검색할 수 있도록 소스를 변경해 보자."]},{"cell_type":"code","metadata":{"id":"bZHrhciIlW-T"},"source":["# C:/doit/sub_dir_search.py\n","import os\n","\n","def search(dirname):\n","    filenames = os.listdir(dirname)\n","    for filename in filenames:\n","        full_filename = os.path.join(dirname, filename)\n","        print (full_filename)\n","\n","search(\"c:/\")"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"uJuGLKFYlYnj"},"source":["os.listdir를 사용하면 해당 디렉터리에 있는 파일들의 리스트를 구할 수 있다. 여기에서 구하는 파일 리스트는 파일 이름만 포함되어 있으므로 경로를 포함한 파일 이름을 구하기 위해서는 입력으로 받은 dirname을 앞에 덧붙여 주어야 한다. os 모듈에는 디렉터리와 파일 이름을 이어 주는 os.path.join 함수가 있으므로 이 함수를 사용하면 디렉터리를 포함한 전체 경로를 쉽게 구할 수 있다.\n","\n","위 코드를 수행하면 C:/ 디렉터리에 있는 파일이 다음과 비슷하게 출력될 것이다.\n","\n","[디렉토리 출력 예]"]},{"cell_type":"code","metadata":{"id":"f3xakik3laBn"},"source":["c:/$Recycle.Bin\n","c:/$WINDOWS.~BT\n","c:/$Windows.~WS\n","c:/adb\n","c:/AMD\n","c:/android\n","c:/bootmgr\n","c:/BOOTNXT\n","… 생략 …"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"OgEPiGYllboR"},"source":["3. 이제 C:/ 디렉터리에 있는 파일들 중 확장자가 .py인 파일만을 출력하도록 코드를 변경해 보자."]},{"cell_type":"code","metadata":{"id":"1qDhEf-xldI2"},"source":["# C:/doit/sub_dir_search.py\n","import os\n","\n","def search(dirname):\n","    filenames = os.listdir(dirname)\n","    for filename in filenames:\n","        full_filename = os.path.join(dirname, filename)\n","        ext = os.path.splitext(full_filename)[-1]\n","        if ext == '.py': \n","            print(full_filename)\n","\n","search(\"c:/\")"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"qvQ234dCleww"},"source":["파일 이름에서 확장자만 추출하기 위해 os 모듈의 os.path.splitext 함수를 사용하였다. os.path.splitext는 파일 이름을 확장자를 기준으로 두 부분으로 나누어 준다. 따라서 os.path.splitext(full_filename)[-1]은 해당 파일의 확장자 이름이 된다. 위 코드는 확장자 이름이 .py인 경우만을 출력하도록 작성했다. C:/디렉터리에 파이썬 파일이 없다면 아무것도 출력되지 않을 것이다."]},{"cell_type":"markdown","metadata":{"id":"nHUTAdRRlgSQ"},"source":["4. 하지만 우리가 원하는 것은 C:/디렉터리 바로 밑에 있는 파일뿐만 아니라 그 하위 디렉터리(sub directory)를 포함한 모든 파이썬 파일을 검색하는 것이다. 하위 디렉터리도 검색이 가능하도록 다음과 같이 코드를 변경해야 한다."]},{"cell_type":"code","metadata":{"id":"fvB18EvZlh5g"},"source":["# C:/doit/sub_dir_search.py\n","import os\n","\n","def search(dirname):\n","    try:\n","        filenames = os.listdir(dirname)\n","        for filename in filenames:\n","            full_filename = os.path.join(dirname, filename)\n","            if os.path.isdir(full_filename):\n","                search(full_filename)\n","            else:\n","                ext = os.path.splitext(full_filename)[-1]\n","                if ext == '.py': \n","                    print(full_filename)\n","    except PermissionError:\n","        pass\n","\n","search(\"c:/\")"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"yDEeaBsZlj07"},"source":["try ... except PermissionError로 함수 전체를 감싼 이유는 os.listdir를 수행할 때 권한이 없는 디렉터리에 접근하더라도 프로그램이 오류로 종료되지 않고 그냥 수행되도록 하기 위해서이다.\n","\n","full_filename이 디렉터리인지 파일인지 구별하기 위하여 os.path.isdir 함수를 사용하였고 디렉터리일 경우 해당 경로를 입력받아 다시 search 함수를 호출하였다. 이렇게 해당 디렉터리의 파일이 디렉터리일 경우 다시 search 함수를 호출해 나가면 (재귀 호출) 해당 디렉터리의 하위 파일을 다시 검색하기 시작하므로 결국 모든 파일들을 검색할 수 있게 된다.\n","\n","※ 재귀 호출이란 자기 자신을 다시 호출하는 프로그래밍 기법이다. 이 코드에서 보면 search 함수에서 다시 자기 자신인 search 함수를 호출하는 것이 바로 재귀 호출이다.\n","\n","위 코드를 수행하면 C:/디렉터리에 있는 모든 파이썬 파일이 출력될 것이다."]},{"cell_type":"markdown","metadata":{"id":"jvHU-JezllZI"},"source":["[하위 디렉터리 검색을 쉽게 해주는 os.walk]\n","\n","os.walk를 사용하면 위에서 작성한 코드를 보다 간편하게 만들 수 있다. os.walk는 시작 디렉터리부터 시작하여 그 하위 모든 디렉터리를 차례대로 방문하게 해주는 함수이다."]},{"cell_type":"code","metadata":{"id":"N48NZmtYlm72"},"source":["import os\n","\n","for (path, dir, files) in os.walk(\"c:/\"):\n","    for filename in files:\n","        ext = os.path.splitext(filename)[-1]\n","        if ext == '.py':\n","            print(\"%s/%s\" % (path, filename))"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Py_FMix8loY5"},"source":["디렉터리와 파일을 검색하는 일반적인 경우라면 os.walk를 사용하는 것을 추천한다."]},{"cell_type":"markdown","metadata":{"id":"FfeH2KNUlwzg"},"source":["파이보 (https://pybo.kr)\n","파이썬을 공부하며 이해되지 않는 부분이나 궁금한 점들을 파이보에 질문해 보자. 본인이 정확히 어떤 것을 모르는지 질문을 하는 것만으로도 큰 공부가 될 것이다.\n","\n","그리고 다른이의 질문에 대한 답변도 달아보자. 예전에 \"파이썬 정보광장\"이라는 유명한 국내 파이썬 커뮤니티가 있었는데 이곳에서 활동했던 어떤 분의 다음과 같은 말이 아직도 기억에 남는다.\n","\n","\"올라오는 질문들에 대한 모든 답변을 하려고 노력했습니다. 모르는 질문이 있으면 찾아보고 연구해서까지 답변을 달았습니다. 그러다보니 어느순간 파이썬에 대해서는 모르는 것이 없을 정도가 되어 있었습니다.\"\n","\n","안타깝게도 \"파이썬 정보광장\"은 더 이상 운영을 하지 못하게 되었지만 필자가 최근 오픈한 파이보 서비스가 그 역할을 대신하고자 하니 여러분의 많은 참여를 기대한다."]},{"cell_type":"markdown","metadata":{"id":"evO-VTdkmB-j"},"source":["**정규 표현식은 왜 필요한가?**\n","\n","다음과 같은 문제가 주어졌다고 가정해 보자."]},{"cell_type":"code","metadata":{"id":"uVCtTMYPmEbI"},"source":["주민등록번호를 포함하고 있는 텍스트가 있다. 이 텍스트에 포함된 모든 주민등록번호의 뒷자리를 * 문자로 변경해 보자."],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"bSz05AmwmHJd"},"source":["우선 정규식을 전혀 모르면 다음과 같은 순서로 프로그램을 작성해야 할 것이다.\n","\n","전체 텍스트를 공백 문자로 나눈다(split).\n","1. 나뉜 단어가 주민등록번호 형식인지 조사한다.\n","2. 단어가 주민등록번호 형식이라면 뒷자리를 *로 변환한다.\n","3. 나뉜 단어를 다시 조립한다.\n","4. 이를 구현한 코드는 아마도 다음과 같을 것이다."]},{"cell_type":"code","metadata":{"id":"prt4PPQ5mLzk"},"source":["data = \"\"\"\n","park 800905-1049118\n","kim  700905-1059119\n","\"\"\"\n","\n","result = []\n","for line in data.split(\"\\n\"):\n","    word_result = []\n","    for word in line.split(\" \"):\n","        if len(word) == 14 and word[:6].isdigit() and word[7:].isdigit():\n","            word = word[:6] + \"-\" + \"*******\"\n","        word_result.append(word)\n","    result.append(\" \".join(word_result))\n","print(\"\\n\".join(result))\n","결과값:\n","park 800905-*******\n","kim  700905-*******"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"1ccDuP13mNhJ"},"source":["반면에 정규식을 사용하면 다음처럼 훨씬 간편하고 직관적인 코드를 작성할 수 있다. 아직 정규식 사용 방법을 배우지 않았으니 눈으로만 살펴보자."]},{"cell_type":"code","metadata":{"id":"kJPvxlEumPwC"},"source":["import re \n","\n","data = \"\"\"\n","park 800905-1049118\n","kim  700905-1059119\n","\"\"\"\n","\n","pat = re.compile(\"(\\d{6})[-]\\d{7}\")\n","print(pat.sub(\"\\g<1>-*******\", data))\n","결과값:\n","park 800905-*******\n","kim  700905-*******"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"SPFIZb_0mRZU"},"source":["정규 표현식을 사용하면 이렇게 간단한 예제에서도 코드가 상당히 간결해진다. 만약 찾으려는 문자열 또는 바꾸어야 할 문자열의 규칙이 매우 복잡하다면 정규식의 효용은 더 커지게 된다.\n","\n","이제부터 정규 표현식의 기초부터 심화 부분까지 차근차근 알아보자."]},{"cell_type":"markdown","metadata":{"id":"huMCeSEVmoOY"},"source":["**정규 표현식의 기초, 메타 문자**\n","\n","정규 표현식에서 사용하는 메타 문자(meta characters)에는 다음과 같은 것이 있다.\n","\n","※ 메타 문자란 원래 그 문자가 가진 뜻이 아닌 특별한 용도로 사용하는 문자를 말한다."]},{"cell_type":"code","metadata":{"id":"I5LMnduamq6p"},"source":[". ^ $ * + ? { } [ ] \\ | ( )"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"dZWtoN-imsTO"},"source":["정규 표현식에 위 메타 문자를 사용하면 특별한 의미를 갖게 된다.\n","\n","자, 그러면 가장 간단한 정규 표현식부터 시작해 각 메타 문자의 의미와 사용법을 알아보자."]},{"cell_type":"markdown","metadata":{"id":"JK1MPk_5mvKz"},"source":["**문자 클래스 [ ]**\n","\n","우리가 가장 먼저 살펴볼 메타 문자는 바로 문자 클래스(character class)인 [ ]이다. 문자 클래스로 만들어진 정규식은 \"[ ] 사이의 문자들과 매치\"라는 의미를 갖는다.\n","\n","※ 문자 클래스를 만드는 메타 문자인 [ ] 사이에는 어떤 문자도 들어갈 수 있다.\n","\n","즉 정규 표현식이 [abc]라면 이 표현식의 의미는 \"a, b, c 중 한 개의 문자와 매치\"를 뜻한다. 이해를 돕기 위해 문자열 \"a\", \"before\", \"dude\"가 정규식 [abc]와 어떻게 매치되는지 살펴보자."]},{"cell_type":"markdown","metadata":{"id":"SKZfxbxTmytL"},"source":["\"a\"는 정규식과 일치하는 문자인 \"a\"가 있으므로 매치\n","\"before\"는 정규식과 일치하는 문자인 \"b\"가 있으므로 매치\n","\"dude\"는 정규식과 일치하는 문자인 a, b, c 중 어느 하나도 포함하고 있지 않으므로 매치되지 않음\n","\n","[ ] 안의 두 문자 사이에 하이픈(-)을 사용하면 두 문자 사이의 범위(From - To)를 의미한다. 예를 들어 [a-c]라는 정규 표현식은 [abc]와 동일하고 [0-5]는 [012345]와 동일하다.\n","\n","다음은 하이픈(-)을 사용한 문자 클래스의 사용 예이다.\n","\n","[a-zA-Z] : 알파벳 모두\n","[0-9] : 숫자\n","\n","문자 클래스([ ]) 안에는 어떤 문자나 메타 문자도 사용할수 있지만 주의해야 할 메타 문자가 1가지 있다. 그것은 바로 ^인데, 문자 클래스 안에 ^ 메타 문자를 사용할 경우에는 반대(not)라는 의미를 갖는다. 예를 들어 [^0-9]라는 정규 표현식은 숫자가 아닌 문자만 매치된다."]},{"cell_type":"markdown","metadata":{"id":"AdsFFjNfm51y"},"source":["[자주 사용하는 문자 클래스]\n","\n","[0-9] 또는 [a-zA-Z] 등은 무척 자주 사용하는 정규 표현식이다. 이렇게 자주 사용하는 정규식은 별도의 표기법으로 표현할 수 있다. 다음을 기억해 두자.\n","\n","\\d - 숫자와 매치, [0-9]와 동일한 표현식이다.\n","\\D - 숫자가 아닌 것과 매치, [^0-9]와 동일한 표현식이다.\n","\\s - whitespace 문자와 매치, [ \\t\\n\\r\\f\\v]와 동일한 표현식이다. 맨 앞의 빈 칸은 공백문자(space)를 의미한다.\n","\\S - whitespace 문자가 아닌 것과 매치, [^ \\t\\n\\r\\f\\v]와 동일한 표현식이다.\n","\\w - 문자+숫자(alphanumeric)와 매치, [a-zA-Z0-9_]와 동일한 표현식이다.\n","\\W - 문자+숫자(alphanumeric)가 아닌 문자와 매치, [^a-zA-Z0-9_]와 동일한 표현식이다.\n","대문자로 사용된 것은 소문자의 반대임을 추측할 수 있다."]},{"cell_type":"markdown","metadata":{"id":"fzfHEUp7m8Bv"},"source":["**Dot(.)*\n","*\n","정규 표현식의 Dot(.) 메타 문자는 줄바꿈 문자인 \\n을 제외한 모든 문자와 매치됨을 의미한다.\n","\n","※ 나중에 배우겠지만 정규식을 작성할 때 re.DOTALL 옵션을 주면 \\n 문자와도 매치된다.\n","\n","다음 정규식을 보자."]},{"cell_type":"code","metadata":{"id":"M7Djcbx3m-R4"},"source":["a.b"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"GUOQanWnm_yw"},"source":["위 정규식의 의미는 다음과 같다.\n","\n","\"a + 모든문자 + b\"\n","\n","즉 a와 b라는 문자 사이에 어떤 문자가 들어가도 모두 매치된다는 의미이다.\n","\n","이해를 돕기 위해 문자열 \"aab\", \"a0b\", \"abc\"가 정규식 a.b와 어떻게 매치되는지 살펴보자.\n","\n","\"aab\"는 가운데 문자 \"a\"가 모든 문자를 의미하는 .과 일치하므로 정규식과 매치된다.\n","\"a0b\"는 가운데 문자 \"0\"가 모든 문자를 의미하는 .과 일치하므로 정규식과 매치된다.\n","\"abc\"는 \"a\"문자와 \"b\"문자 사이에 어떤 문자라도 하나는있어야 하는 이 정규식과 일치하지 않으므로 매치되지 않는다.\n","다음 정규식을 보자."]},{"cell_type":"code","metadata":{"id":"q6zKwjwvnBkV"},"source":["a[.]b"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"n0KutM7unDk5"},"source":["이 정규식의 의미는 다음과 같다.\n","\n","\"a + Dot(.)문자 + b\"\n","\n","따라서 정규식 a[.]b는 \"a.b\" 문자열과 매치되고, \"a0b\" 문자열과는 매치되지 않는다.\n","\n","※ 만약 앞에서 살펴본 문자 클래스([]) 내에 Dot(.) 메타 문자가 사용된다면 이것은 \"모든 문자\"라는 의미가 아닌 문자 . 그대로를 의미한다. 혼동하지 않도록 주의하자."]},{"cell_type":"markdown","metadata":{"id":"p8tZSWznnFNf"},"source":["반복 (*)\n","\n","다음 정규식을 보자."]},{"cell_type":"code","metadata":{"id":"N-rp1rvXnJ1N"},"source":["ca*t"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ycDRJJpmnLUD"},"source":["이 정규식에는 반복을 의미하는 * 메타 문자가 사용되었다. 여기에서 사용한 *은 * 바로 앞에 있는 문자 a가 0부터 무한대로 반복될 수 있다는 의미이다.\n","\n","※ 여기에서 * 메타 문자의 반복 개수가 무한대라고 표현했는데 사실 메모리 제한으로 2억 개 정도만 가능하다고 한다.\n","\n","즉 다음과 같은 문자열이 모두 매치된다."]},{"cell_type":"markdown","metadata":{"id":"P-WVtjmYnMxL"},"source":["정규식\t문자열\tMatch 여부\t설명\n","ca*t\tct\tYes\t\"a\"가 0번 반복되어 매치\n","ca*t\tcat\tYes\t\"a\"가 0번 이상 반복되어 매치 (1번 반복)\n","ca*t\tcaaat\tYes\t\"a\"가 0번 이상 반복되어 매치 (3번 반복)"]},{"cell_type":"markdown","metadata":{"id":"gVIIa0aknORf"},"source":["**반복 (+)**\n","\n","반복을 나타내는 또 다른 메타 문자로 +가 있다. +는 최소 1번 이상 반복될 때 사용한다. 즉 *가 반복 횟수 0부터라면 +는 반복 횟수 1부터인 것이다.\n","\n","다음 정규식을 보자."]},{"cell_type":"code","metadata":{"id":"5H_cVq48nQyX"},"source":["ca+t"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"pGJGSGYanSQZ"},"source":["위 정규식의 의미는 다음과 같다.\n","\n","\"c + a(1번 이상 반복) + t\"\n","\n","위 정규식에 대한 매치여부는 다음 표와 같다.\n","\n","정규식\t문자열\tMatch 여부\t설명\n","ca+t\tct\tNo\t\"a\"가 0번 반복되어 매치되지 않음\n","ca+t\tcat\tYes\t\"a\"가 1번 이상 반복되어 매치 (1번 반복)\n","ca+t\tcaaat\tYes\t\"a\"가 1번 이상 반복되어 매치 (3번 반복)"]},{"cell_type":"markdown","metadata":{"id":"kicMEOyWnUF8"},"source":["**반복 ({m,n}, ?)**\n","\n","여기에서 잠깐 생각해 볼 게 있다. 반복 횟수를 3회만 또는 1회부터 3회까지만으로 제한하고 싶을 수도 있지 않을까?\n","\n","{ } 메타 문자를 사용하면 반복 횟수를 고정할 수 있다. {m, n} 정규식을 사용하면 반복 횟수가 m부터 n까지 매치할 수 있다. 또한 m 또는 n을 생략할 수도 있다. 만약 {3,}처럼 사용하면 반복 횟수가 3 이상인 경우이고 {,3}처럼 사용하면 반복 횟수가 3 이하를 의미한다. 생략된 m은 0과 동일하며, 생략된 n은 무한대(2억 개 미만)의 의미를 갖는다.\n","\n","※ {1,}은 +와 동일하고, {0,}은 *와 동일하다.\n","\n","{ }을 사용한 몇 가지 정규식을 살펴보자."]},{"cell_type":"markdown","metadata":{"id":"EKvmn3rNnWWX"},"source":["1. {m}"]},{"cell_type":"code","metadata":{"id":"xRPdB-r4nXFO"},"source":["ca{2}t"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"MFMijESLnZWT"},"source":["위 정규식의 의미는 다음과 같다.\n","\n","\"c + a(반드시 2번 반복) + t\"\n","\n","위 정규식에 대한 매치여부는 다음 표와 같다.\n","\n","정규식\t문자열\tMatch 여부\t설명\n","ca{2}t\tcat\tNo\t\"a\"가 1번만 반복되어 매치되지 않음\n","ca{2}t\tcaat\tYes\t\"a\"가 2번 반복되어 매치"]},{"cell_type":"markdown","metadata":{"id":"01pvhSH0naqq"},"source":["2. {m, n}"]},{"cell_type":"code","metadata":{"id":"QmYpGEYpnb8o"},"source":["ca{2,5}t"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"i6Q2D4bJneLf"},"source":["위 정규식의 의미는 다음과 같다:\n","\n","\"c + a(2~5회 반복) + t\"\n","\n","위 정규식에 대한 매치여부는 다음 표와 같다.\n","\n","정규식\t   문자열\t   Match 여부\t                 설명\n","ca{2,5}t\t  cat\t        No\t           \"a\"가 1번만 반복되어 매치되지 않음\n","ca{2,5}t\t caat        Yes\t           \"a\"가 2번 반복되어 매치\n","ca{2,5}t\t caaaaat\t   Yes\t           \"a\"가 5번 반복되어 매치"]},{"cell_type":"markdown","metadata":{"id":"TgbzV3DOnziM"},"source":["3. ?\n","\n","반복은 아니지만 이와 비슷한 개념으로 ? 이 있다. ? 메타문자가 의미하는 것은 {0, 1} 이다.\n","\n","다음 정규식을 보자."]},{"cell_type":"code","metadata":{"id":"gJwnimrVn13E"},"source":["ab?c"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"0siAxCwmn3lD"},"source":["위 정규식의 의미는 다음과 같다:\n","\n","\"a + b(있어도 되고 없어도 된다) + c\"\n","\n","위 정규식에 대한 매치여부는 다음 표와 같다.\n","\n","정규식\t    문자열\t        Match 여부\t            설명\n","ab?c\t       abc\t             Yes\t         \"b\"가 1번 사용되어 매치\n","ab?c\t       abc               Yes\t         \"b\"가 0번 사용되어 매치\n","\n","즉 b 문자가 있거나 없거나 둘 다 매치되는 경우이다.\n","\n","*, +, ? 메타 문자는 모두 {m, n} 형태로 고쳐 쓰는 것이 가능하지만 가급적 이해하기 쉽고 표현도 간결한 *, +, ? 메타 문자를 사용하는 것이 좋다.\n","\n","지금까지 아주 기초적인 정규 표현식에 대해서 알아보았다. 알아야 할 것들이 아직 많이 남아 있지만 그에 앞에서 파이썬으로 이러한 정규 표현식을 어떻게 사용할 수 있는지 먼저 알아보기로 하자."]},{"cell_type":"markdown","metadata":{"id":"Ia3msOMMoOp9"},"source":["**파이썬에서 정규 표현식을 지원하는 re 모듈**\n","\n","파이썬은 정규 표현식을 지원하기 위해 re(regular expression의 약어) 모듈을 제공한다. re 모듈은 파이썬을 설치할 때 자동으로 설치되는 기본 라이브러리로 사용 방법은 다음과 같다."]},{"cell_type":"code","metadata":{"id":"Sywh4phjoRnk"},"source":[">>> import re\n",">>> p = re.compile('ab*')"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"nuGM8KMDoTbR"},"source":["re.compile을 사용하여 정규 표현식(위 예에서는 ab*)을 컴파일한다. re.compile의 결과로 돌려주는 객체 p(컴파일된 패턴 객체)를 사용하여 그 이후의 작업을 수행할 것이다.\n","\n","※ 정규식을 컴파일할 때 특정 옵션을 주는 것도 가능한데, 이에 대해서는 뒤에서 자세히 살펴본다.\n","※ 패턴이란 정규식을 컴파일한 결과이다."]},{"cell_type":"markdown","metadata":{"id":"ofNWrvuhoWLA"},"source":["**정규식을 이용한 문자열 검색**\n","\n","\n","이제 컴파일된 패턴 객체를 사용하여 문자열 검색을 수행해 보자. 컴파일된 패턴 객체는 다음과 같은 4가지 메서드를 제공한다.\n","\n","Method\t                            목적\n","match()\t    문자열의 처음부터 정규식과 매치되는지 조사한다.\n","search()\t  문자열 전체를 검색하여 정규식과 매치되는지 조사한다.\n","findall()\t  정규식과 매치되는 모든 문자열(substring)을 리스트로 돌려준다.\n","finditer()\t정규식과 매치되는 모든 문자열(substring)을 반복 가능한 객체로 돌려준다.\n","match, search는 정규식과 매치될 때는 match 객체를 돌려주고, 매치되지 않을 때는 None을 돌려준다. 이들 메서드에 대한 간단한 예를 살펴보자.\n","\n","※ match 객체란 정규식의 검색 결과로 돌려주는 객체이다.\n","\n","우선 다음과 같은 패턴을 만들어 보자."]},{"cell_type":"code","metadata":{"id":"ML8yd_yuoej5"},"source":[">>> import re\n",">>> p = re.compile('[a-z]+')"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"4_xvNVW3ogGj"},"source":["**match**\n","\n","match 메서드는 문자열의 처음부터 정규식과 매치되는지 조사한다. 위 패턴에 match 메서드를 수행해 보자."]},{"cell_type":"code","metadata":{"id":"F9oXmqEGoiQU"},"source":[">>> m = p.match(\"python\")\n",">>> print(m)\n","<_sre.SRE_Match object at 0x01F3F9F8>"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"G4_UZBIiolKP"},"source":["\"python\" 문자열은 [a-z]+ 정규식에 부합되므로 match 객체를 돌려준다."]},{"cell_type":"code","metadata":{"id":"Tr6Q8kOSomjc"},"source":[">>> m = p.match(\"3 python\")\n",">>> print(m)\n","None"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"_5RLcJ5GooGY"},"source":["\"3 python\" 문자열은 처음에 나오는 문자 3이 정규식 [a-z]+에 부합되지 않으므로 None을 돌려준다.\n","\n","match의 결과로 match 객체 또는 None을 돌려주기 때문에 파이썬 정규식 프로그램은 보통 다음과 같은 흐름으로 작성한다."]},{"cell_type":"code","metadata":{"id":"6rJjLEQLopg4"},"source":["p = re.compile(정규표현식)\n","m = p.match( 'string goes here' )\n","if m:\n","    print('Match found: ', m.group())\n","else:\n","    print('No match')"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"MQ80XDqzoq2m"},"source":["즉 match의 결괏값이 있을 때만 그다음 작업을 수행하겠다는 것이다."]},{"cell_type":"markdown","metadata":{"id":"w40O2AfVUTvL"},"source":["**search**\n","\n","컴파일된 패턴 객체 p를 가지고 이번에는 search 메서드를 수행해 보자."]},{"cell_type":"code","metadata":{"id":"bM98ApcpUVgB"},"source":[">>> m = p.search(\"python\")\n",">>> print(m)\n","<_sre.SRE_Match object at 0x01F3FA68>"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"fIfQWnPKUXGZ"},"source":["\"python\" 문자열에 search 메서드를 수행하면 match 메서드를 수행했을 때와 동일하게 매치된다."]},{"cell_type":"code","metadata":{"id":"y21nLQloUbmh"},"source":[">>> m = p.search(\"3 python\")\n",">>> print(m)\n","<_sre.SRE_Match object at 0x01F3FA30>"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"sqeX7BlmUdk9"},"source":["\"3 python\" 문자열의 첫 번째 문자는 \"3\"이지만 search는 문자열의 처음부터 검색하는 것이 아니라 문자열 전체를 검색하기 때문에 \"3 \" 이후의 \"python\" 문자열과 매치된다.\n","\n","이렇듯 match 메서드와 search 메서드는 문자열의 처음부터 검색할지의 여부에 따라 다르게 사용해야 한다."]},{"cell_type":"markdown","metadata":{"id":"o3AJjx8RUfoS"},"source":["**findall**\n","\n","이번에는 findall 메서드를 수행해 보자."]},{"cell_type":"code","metadata":{"id":"6uSHM8_OUkC2"},"source":[">>> result = p.findall(\"life is too short\")\n",">>> print(result)\n","['life', 'is', 'too', 'short']"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"H2DFM4xJUl3O"},"source":["\"life is too short\" 문자열의 'life', 'is', 'too', 'short' 단어를 각각 [a-z]+ 정규식과 매치해서 리스트로 돌려준다."]},{"cell_type":"markdown","metadata":{"id":"Pi1aUa7tUneA"},"source":["**finditer**\n","\n","이번에는 finditer 메서드를 수행해 보자."]},{"cell_type":"code","metadata":{"id":"qViR8LtxUqb-"},"source":[">>> result = p.finditer(\"life is too short\")\n",">>> print(result)\n","<callable_iterator object at 0x01F5E390>\n",">>> for r in result: print(r)\n","...\n","<_sre.SRE_Match object at 0x01F3F9F8>\n","<_sre.SRE_Match object at 0x01F3FAD8>\n","<_sre.SRE_Match object at 0x01F3FAA0>\n","<_sre.SRE_Match object at 0x01F3F9F8>"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"qrUwFBxWUsbO"},"source":["finditer는 findall과 동일하지만 그 결과로 반복 가능한 객체(iterator object)를 돌려준다. 반복 가능한 객체가 포함하는 각각의 요소는 match 객체이다."]},{"cell_type":"markdown","metadata":{"id":"-o9ORZqKUusa"},"source":["**match 객체의 메서드**\n","\n","자, 이제 match 메서드와 search 메서드를 수행한 결과로 돌려준 match 객체에 대해 알아보자. 앞에서 정규식을 사용한 문자열 검색을 수행하면서 아마도 다음과 같은 궁금증이 생겼을 것이다.\n","\n","어떤 문자열이 매치되었는가?\n","매치된 문자열의 인덱스는 어디서부터 어디까지인가?\n","match 객체의 메서드를 사용하면 이 같은 궁금증을 해결할 수 있다. 다음 표를 보자.\n","\n","method\t         목적\n","group()\t매치된 문자열을 돌려준다.\n","start()\t매치된 문자열의 시작 위치를 돌려준다.\n","end()\t  매치된 문자열의 끝 위치를 돌려준다.\n","span()\t매치된 문자열의 (시작, 끝)에 해당하는 튜플을 돌려준다.\n","\n","다음 예로 확인해 보자."]},{"cell_type":"code","metadata":{"id":"FlknUQsHU2sH"},"source":[">>> m = p.match(\"python\")\n",">>> m.group()\n","'python'\n",">>> m.start()\n","0\n",">>> m.end()\n","6\n",">>> m.span()\n","(0, 6)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ujzrerxXU4U9"},"source":["예상한 대로 결괏값이 출력되는 것을 확인할 수 있다. match 메서드를 수행한 결과로 돌려준 match 객체의 start()의 결괏값은 항상 0일 수밖에 없다. 왜냐하면 match 메서드는 항상 문자열의 시작부터 조사하기 때문이다.\n","\n","만약 search 메서드를 사용했다면 start() 값은 다음과 같이 다르게 나올 것이다."]},{"cell_type":"code","metadata":{"id":"C87t2chRU5_T"},"source":[">>> m = p.search(\"3 python\")\n",">>> m.group()\n","'python'\n",">>> m.start()\n","2\n",">>> m.end()\n","8\n",">>> m.span()\n","(2, 8)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"w09bd-5iU73c"},"source":["[모듈 단위로 수행하기]\n","\n","지금까지 우리는 re.compile을 사용하여 컴파일된 패턴 객체로 그 이후의 작업을 수행했다. re 모듈은 이것을 좀 축약한 형태로 사용할 수 있는 방법을 제공한다. 다음 예를 보자."]},{"cell_type":"code","metadata":{"id":"Ndlps_IZU9vH"},"source":[">>> p = re.compile('[a-z]+')\n",">>> m = p.match(\"python\")"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"beruRE_KVAi2"},"source":["위 코드가 축약된 형태는 다음과 같다."]},{"cell_type":"code","metadata":{"id":"MWJ6n_XmVCiQ"},"source":[">>> m = re.match('[a-z]+', \"python\")"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"7BGB4TRSVEDT"},"source":["위 예처럼 사용하면 컴파일과 match 메서드를 한 번에 수행할 수 있다. 보통 한 번 만든 패턴 객체를 여러번 사용해야 할 때는 이 방법보다 re.compile을 사용하는 것이 편하다."]},{"cell_type":"markdown","metadata":{"id":"yafsQvnGVHuH"},"source":["**컴파일 옵션**\n","\n","정규식을 컴파일할 때 다음 옵션을 사용할 수 있다.\n","\n","DOTALL(S) - . 이 줄바꿈 문자를 포함하여 모든 문자와 매치할 수 있도록 한다.\n","IGNORECASE(I) - 대소문자에 관계없이 매치할 수 있도록 한다.\n","MULTILINE(M) - 여러줄과 매치할 수 있도록 한다. (^, $ 메타문자의 사용과 관계가 있는 옵션이다)\n","VERBOSE(X) - verbose 모드를 사용할 수 있도록 한다. (정규식을 보기 편하게 만들수 있고 주석등을 사용할 수 있게된다.)\n","옵션을 사용할 때는 re.DOTALL처럼 전체 옵션 이름을 써도 되고 re.S처럼 약어를 써도 된다."]},{"cell_type":"markdown","metadata":{"id":"eszSlnQFVKqJ"},"source":["**DOTALL, S**\n","\n",". 메타 문자는 줄바꿈 문자(\\n)를 제외한 모든 문자와 매치되는 규칙이 있다. 만약 \\n 문자도 포함하여 매치하고 싶다면 re.DOTALL 또는 re.S 옵션을 사용해 정규식을 컴파일하면 된다.\n","\n","다음 예를 보자."]},{"cell_type":"code","metadata":{"id":"s7Um_BXNVNBU"},"source":[">>> import re\n",">>> p = re.compile('a.b')\n",">>> m = p.match('a\\nb')\n",">>> print(m)\n","None"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ch84wmxVVPkr"},"source":["정규식이 a.b인 경우 문자열 a\\nb는 매치되지 않음을 알 수 있다. 왜냐하면 \\n은 . 메타 문자와 매치되지 않기 때문이다. \\n 문자와도 매치되게 하려면 다음과 같이 re.DOTALL 옵션을 사용해야 한다."]},{"cell_type":"code","metadata":{"id":"QheUtxMVVRQP"},"source":[">>> p = re.compile('a.b', re.DOTALL)\n",">>> m = p.match('a\\nb')\n",">>> print(m)\n","<_sre.SRE_Match object at 0x01FCF3D8>"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"KiHQON15VSxj"},"source":["보통 re.DOTALL 옵션은 여러 줄로 이루어진 문자열에서 \\n에 상관없이 검색할 때 많이 사용한다."]},{"cell_type":"markdown","metadata":{"id":"5ysHbjQqVUXM"},"source":["**IGNORECASE, I**\n","\n","re.IGNORECASE 또는 re.I 옵션은 대소문자 구별 없이 매치를 수행할 때 사용하는 옵션이다. 다음 예제를 보자."]},{"cell_type":"code","metadata":{"id":"JLtk03B_VXUV"},"source":[">>> p = re.compile('[a-z]', re.I)\n",">>> p.match('python')\n","<_sre.SRE_Match object at 0x01FCFA30>\n",">>> p.match('Python')\n","<_sre.SRE_Match object at 0x01FCFA68>\n",">>> p.match('PYTHON')\n","<_sre.SRE_Match object at 0x01FCF9F8>"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"MSIUfNYFVZap"},"source":["[a-z] 정규식은 소문자만을 의미하지만 re.I 옵션으로 대소문자 구별 없이 매치된다."]},{"cell_type":"markdown","metadata":{"id":"p8CAPaAAVa-F"},"source":["**MULTILINE, M**\n","\n","re.MULTILINE 또는 re.M 옵션은 조금 후에 설명할 메타 문자인 ^, $와 연관된 옵션이다. 이 메타 문자에 대해 간단히 설명하자면 ^는 문자열의 처음을 의미하고, $는 문자열의 마지막을 의미한다. 예를 들어 정규식이 ^python인 경우 문자열의 처음은 항상 python으로 시작해야 매치되고, 만약 정규식이 python$이라면 문자열의 마지막은 항상 python으로 끝나야 매치된다는 의미이다.\n","\n","다음 예를 보자."]},{"cell_type":"code","metadata":{"id":"GnYmcXRnVeIi"},"source":["import re\n","p = re.compile(\"^python\\s\\w+\")\n","\n","data = \"\"\"python one\n","life is too short\n","python two\n","you need python\n","python three\"\"\"\n","\n","print(p.findall(data))"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"f2VWWzPwVfpF"},"source":["정규식 ^python\\s\\w+은 python이라는 문자열로 시작하고 그 뒤에 whitespace, 그 뒤에 단어가 와야 한다는 의미이다. 검색할 문자열 data는 여러 줄로 이루어져 있다.\n","\n","이 스크립트를 실행하면 다음과 같은 결과를 돌려준다."]},{"cell_type":"code","metadata":{"id":"kjdpCWAIVhE8"},"source":["['python one']"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"3CLpAfslVisH"},"source":["^ 메타 문자에 의해 python이라는 문자열을 사용한 첫 번째 줄만 매치된 것이다.\n","\n","하지만 ^ 메타 문자를 문자열 전체의 처음이 아니라 각 라인의 처음으로 인식시키고 싶은 경우도 있을 것이다. 이럴 때 사용할 수 있는 옵션이 바로 re.MULTILINE 또는 re.M이다. 위 코드를 다음과 같이 수정해 보자."]},{"cell_type":"code","metadata":{"id":"NOQoPcqfVkPC"},"source":["import re\n","p = re.compile(\"^python\\s\\w+\", re.MULTILINE)\n","\n","data = \"\"\"python one\n","life is too short\n","python two\n","you need python\n","python three\"\"\"\n","\n","print(p.findall(data))"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Krrh3PgZVl0L"},"source":["re.MULTILINE 옵션으로 인해 ^ 메타 문자가 문자열 전체가 아닌 각 줄의 처음이라는 의미를 갖게 되었다. 이 스크립트를 실행하면 다음과 같은 결과가 출력된다."]},{"cell_type":"code","metadata":{"id":"6iekXb7wVnJ6"},"source":["['python one', 'python two', 'python three']"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"oaHrjfrQVop4"},"source":["즉 re.MULTILINE 옵션은 ^, $ 메타 문자를 문자열의 각 줄마다 적용해 주는 것이다."]},{"cell_type":"markdown","metadata":{"id":"QnMhJHiGVqIY"},"source":["VERBOSE, X\n","지금껏 알아본 정규식은 매우 간단하지만 정규식 전문가들이 만든 정규식을 보면 거의 암호수준이다. 정규식을 이해하려면 하나하나 조심스럽게 뜯어보아야만 한다. 이렇게 이해하기 어려운 정규식을 주석 또는 줄 단위로 구분할 수 있다면 얼마나 보기 좋고 이해하기 쉬울까? 방법이 있다. 바로 re.VERBOSE 또는 re.X 옵션을 사용하면 된다.\n","\n","다음 예를 보자."]},{"cell_type":"code","metadata":{"id":"8bhetbUZVrtD"},"source":["charref = re.compile(r'&[#](0[0-7]+|[0-9]+|x[0-9a-fA-F]+);')"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"bJGAbOrnVtAY"},"source":["위 정규식이 쉽게 이해되는가? 이제 다음 예를 보자."]},{"cell_type":"code","metadata":{"id":"fwMgO_7FVuxK"},"source":["charref = re.compile(r\"\"\"\n"," &[#]                # Start of a numeric entity reference\n"," (\n","     0[0-7]+         # Octal form\n","   | [0-9]+          # Decimal form\n","   | x[0-9a-fA-F]+   # Hexadecimal form\n"," )\n"," ;                   # Trailing semicolon\n","\"\"\", re.VERBOSE)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Sg794atcVwUn"},"source":["첫 번째와 두 번째 예를 비교해 보면 컴파일된 패턴 객체인 charref는 모두 동일한 역할을 한다. 하지만 정규식이 복잡할 경우 두 번째처럼 주석을 적고 여러 줄로 표현하는 것이 훨씬 가독성이 좋다는 것을 알 수 있다.\n","\n","re.VERBOSE 옵션을 사용하면 문자열에 사용된 whitespace는 컴파일할 때 제거된다(단 [ ] 안에 사용한 whitespace는 제외). 그리고 줄 단위로 #기호를 사용하여 주석문을 작성할 수 있다."]},{"cell_type":"markdown","metadata":{"id":"ch1mCePOVyDp"},"source":["**백슬래시 문제**\n","\n","정규 표현식을 파이썬에서 사용할 때 혼란을 주는 요소가 한 가지 있는데, 바로 백슬래시(\\)이다.\n","\n","예를 들어 어떤 파일 안에 있는 \"\\section\" 문자열을 찾기 위한 정규식을 만든다고 가정해 보자."]},{"cell_type":"code","metadata":{"id":"WN1ZUUDJV0i6"},"source":["\\section"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"NqrRwTZqV15y"},"source":["이 정규식은 \\s 문자가 whitespace로 해석되어 의도한 대로 매치가 이루어지지 않는다.\n","\n","위 표현은 다음과 동일한 의미이다."]},{"cell_type":"code","metadata":{"id":"Lz_HkfB2V3cQ"},"source":["[ \\t\\n\\r\\f\\v]ection"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"7FsMfO6OV5Vb"},"source":["의도한 대로 매치하고 싶다면 다음과 같이 변경해야 한다."]},{"cell_type":"code","metadata":{"id":"L620zFzkV6gk"},"source":["\\\\section"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"cLtdoE9nV8K-"},"source":["즉 위 정규식에서 사용한 \\ 문자가 문자열 자체임을 알려 주기 위해 백슬래시 2개를 사용하여 이스케이프 처리를 해야 한다.\n","\n","따라서 위 정규식을 컴파일하려면 다음과 같이 작성해야 한다."]},{"cell_type":"code","metadata":{"id":"FcZWs00KV9um"},"source":[">>> p = re.compile('\\\\section')"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"mAnOn62fV_qF"},"source":["그런데 여기에서 또 하나의 문제가 발견된다. 위처럼 정규식을 만들어서 컴파일하면 실제 파이썬 정규식 엔진에는 파이썬 문자열 리터럴 규칙에 따라 \\\\이 \\로 변경되어 \\section이 전달된다.\n","\n","※ 이 문제는 위와 같은 정규식을 파이썬에서 사용할 때만 발생한다(파이썬의 리터럴 규칙). 유닉스의 grep, vi 등에서는 이러한 문제가 없다.\n","\n","결국 정규식 엔진에 \\\\ 문자를 전달하려면 파이썬은 \\\\\\\\처럼 백슬래시를 4개나 사용해야 한다.\n","\n","※ 정규식 엔진은 정규식을 해석하고 수행하는 모듈이다."]},{"cell_type":"code","metadata":{"id":"vvsLStAqWBO2"},"source":[">>> p = re.compile('\\\\\\\\section')"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"JlH64ncmWDBJ"},"source":["이렇게 해야만 원하는 결과를 얻을 수 있다. 하지만 너무 복잡하지 않은가?\n","\n","만약 위와 같이 \\를 사용한 표현이 계속 반복되는 정규식이라면 너무 복잡해서 이해하기 쉽지않을 것이다. 이러한 문제로 인해 파이썬 정규식에는 Raw String 규칙이 생겨나게 되었다. 즉 컴파일해야 하는 정규식이 Raw String임을 알려 줄 수 있도록 파이썬 문법을 만든 것이다. 그 방법은 다음과 같다."]},{"cell_type":"code","metadata":{"id":"AR4Csvj8WEpy"},"source":[">>> p = re.compile(r'\\\\section')"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Fv55q3rPWGm4"},"source":["위와 같이 정규식 문자열 앞에 r 문자를 삽입하면 이 정규식은 Raw String 규칙에 의하여 백슬래시 2개 대신 1개만 써도 2개를 쓴 것과 동일한 의미를 갖게 된다.\n","\n","※ 만약 백슬래시를 사용하지 않는 정규식이라면 r의 유무에 상관없이 동일한 정규식이 될 것이다."]},{"cell_type":"markdown","metadata":{"id":"ug5GmT2zWJMq"},"source":["### 07-3 강력한 정규 표현식의 세계로\n","\n","이제 07-2에서 배우지 않은 몇몇 메타 문자의 의미를 살펴보고 그룹(Group)을 만드는 법, 전방 탐색 등 더욱 강력한 정규 표현식에 대해서 살펴보자."]},{"cell_type":"markdown","metadata":{"id":"roKSUgmRWRVb"},"source":["**메타문자**\n","\n","아직 살펴보지 않은 메타 문자에 대해서 모두 살펴보자. 여기에서 다룰 메타 문자는 앞에서 살펴본 메타 문자와 성격이 조금 다르다. 앞에서 살펴본 +, *, [], {} 등의 메타문자는 매치가 진행될 때 현재 매치되고 있는 문자열의 위치가 변경된다(보통 소비된다고 표현한다). 하지만 이와 달리 문자열을 소비시키지 않는 메타 문자도 있다. 이번에는 이런 문자열 소비가 없는(zerowidth assertions) 메타 문자에 대해 살펴보자."]},{"cell_type":"markdown","metadata":{"id":"o9zTRY6_WVvA"},"source":["**|**\n","\n","| 메타 문자는 or과 동일한 의미로 사용된다. A|B라는 정규식이 있다면 A 또는 B라는 의미가 된다."]},{"cell_type":"code","metadata":{"id":"VX5YE4U-WY6u"},"source":[">>> p = re.compile('Crow|Servo')\n",">>> m = p.match('CrowHello')\n",">>> print(m)\n","<re.Match object; span=(0, 4), match='Crow'>"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"peZiaErcWamA"},"source":["**^**\n","\n","^ 메타 문자는 문자열의 맨 처음과 일치함을 의미한다. 앞에서 살펴본 컴파일 옵션 re.MULTILINE을 사용할 경우에는 여러 줄의 문자열일 때 각 줄의 처음과 일치하게 된다.\n","\n","다음 예를 보자."]},{"cell_type":"code","metadata":{"id":"vCI5Wmr1WcwS"},"source":[">>> print(re.search('^Life', 'Life is too short'))\n","<re.Match object; span=(0, 4), match='Life'>\n",">>> print(re.search('^Life', 'My Life'))\n","None"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"7QQgZdXHWeRA"},"source":["^Life 정규식은 Life 문자열이 처음에 온 경우에는 매치하지만 처음 위치가 아닌 경우에는 매치되지 않음을 알 수 있다."]},{"cell_type":"markdown","metadata":{"id":"CWUunj_CWfqd"},"source":["**$**\n","\n","$ 메타 문자는 ^ 메타 문자와 반대의 경우이다. 즉 $는 문자열의 끝과 매치함을 의미한다.\n","\n","다음 예를 보자."]},{"cell_type":"code","metadata":{"id":"0p982MAgWmWL"},"source":[">>> print(re.search('short$', 'Life is too short'))\n","<re.Match object; span=(12, 17), match='short'>\n",">>> print(re.search('short$', 'Life is too short, you need python'))\n","None"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"lIp6Z1bBWoBO"},"source":["short$ 정규식은 검색할 문자열이 short로 끝난 경우에는 매치되지만 그 이외의 경우에는 매치되지 않음을 알 수 있다.\n","\n","※ ^ 또는 $ 문자를 메타 문자가 아닌 문자 그 자체로 매치하고 싶은 경우에는 \\^, \\$ 로 사용하면 된다."]},{"cell_type":"markdown","metadata":{"id":"M5SWp0GcWp6b"},"source":["**\\A**\n","\n","\\A는 문자열의 처음과 매치됨을 의미한다. ^ 메타 문자와 동일한 의미이지만 re.MULTILINE 옵션을 사용할 경우에는 다르게 해석된다. re.MULTILINE 옵션을 사용할 경우 ^은 각 줄의 문자열의 처음과 매치되지만 \\A는 줄과 상관없이 전체 문자열의 처음하고만 매치된다."]},{"cell_type":"markdown","metadata":{"id":"62LZ-I5WW6mh"},"source":["**\\Z**\n","\n","\\Z는 문자열의 끝과 매치됨을 의미한다. 이것 역시 \\A와 동일하게 re.MULTILINE 옵션을 사용할 경우 $ 메타 문자와는 달리 전체 문자열의 끝과 매치된다."]},{"cell_type":"markdown","metadata":{"id":"Ti81nUbrW9FW"},"source":["**\\b**\n","\n","\\b는 단어 구분자(Word boundary)이다. 보통 단어는 whitespace에 의해 구분된다.\n","\n","다음 예를 보자."]},{"cell_type":"code","metadata":{"id":"b081SDfeW_xq"},"source":[">>> p = re.compile(r'\\bclass\\b')\n",">>> print(p.search('no class at all'))  \n","<re.Match object; span=(3, 8), match='class'>"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"8wZsGJcAXBN-"},"source":["\\bclass\\b 정규식은 앞뒤가 whitespace로 구분된 class라는 단어와 매치됨을 의미한다. 따라서 no class at all의 class라는 단어와 매치됨을 확인할 수 있다."]},{"cell_type":"code","metadata":{"id":"7FLvYBtrXClO"},"source":[">>> print(p.search('the declassified algorithm'))\n","None"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"MwIYqa3qXEEB"},"source":["위 예의 the declassified algorithm 문자열 안에도 class 문자열이 포함되어 있긴 하지만 whitespace로 구분된 단어가 아니므로 매치되지 않는다."]},{"cell_type":"code","metadata":{"id":"CYgnsAbMXFxj"},"source":[">>> print(p.search('one subclass is'))\n","None"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"P-PLHPv1XHUA"},"source":["subclass 문자열 역시 class 앞에 sub 문자열이 더해져 있으므로 매치되지 않음을 알 수 있다.\n","\n","\\b 메타 문자를 사용할 때 주의해야 할 점이 있다. \\b는 파이썬 리터럴 규칙에 의하면 백스페이스(BackSpace)를 의미하므로 백스페이스가 아닌 단어 구분자임을 알려 주기 위해 r'\\bclass\\b'처럼 Raw string임을 알려주는 기호 r을 반드시 붙여 주어야 한다."]},{"cell_type":"markdown","metadata":{"id":"DIZyuXYYXJQ9"},"source":["**\\B**\n","\n","\\B 메타 문자는 \\b 메타 문자와 반대의 경우이다. 즉 whitespace로 구분된 단어가 아닌 경우에만 매치된다."]},{"cell_type":"code","metadata":{"id":"c4AAaTXEXLs4"},"source":[">>> p = re.compile(r'\\Bclass\\B')\n",">>> print(p.search('no class at all'))  \n","None\n",">>> print(p.search('the declassified algorithm'))\n","<re.Match object; span=(6, 11), match='class'>\n",">>> print(p.search('one subclass is'))\n","None"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"uoRqMIN_XNE2"},"source":["class 단어의 앞뒤에 whitespace가 하나라도 있는 경우에는 매치가 안 되는 것을 확인할 수 있다."]},{"cell_type":"markdown","metadata":{"id":"zL43pMr2XO-4"},"source":["**그루핑**\n","\n","ABC 문자열이 계속해서 반복되는지 조사하는 정규식을 작성하고 싶다고 하자. 어떻게 해야할까? 지금까지 공부한 내용으로는 위 정규식을 작성할 수 없다. 이럴 때 필요한 것이 바로 그루핑(Grouping) 이다.\n","\n","위 경우는 다음처럼 그루핑을 사용하여 작성할 수 있다."]},{"cell_type":"code","metadata":{"id":"N7E-Yjc8XRT_"},"source":["(ABC)+"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"KQSWO4o9XSmv"},"source":["그룹을 만들어 주는 메타 문자는 바로 ( )이다."]},{"cell_type":"code","metadata":{"id":"dKzhLwawXT_e"},"source":[">>> p = re.compile('(ABC)+')\n",">>> m = p.search('ABCABCABC OK?')\n",">>> print(m)\n","<re.Match object; span=(0, 9), match='ABCABCABC'>\n",">>> print(m.group())\n","ABCABCABC"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"CrGhjXGGXVP0"},"source":["다음 예를 보자."]},{"cell_type":"code","metadata":{"id":"9P2IG950XWks"},"source":[">>> p = re.compile(r\"\\w+\\s+\\d+[-]\\d+[-]\\d+\")\n",">>> m = p.search(\"park 010-1234-1234\")"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"aOehqkUUXZpk"},"source":["\\w+\\s+\\d+[-]\\d+[-]\\d+은 이름 + \" \" + 전화번호 형태의 문자열을 찾는 정규식이다. 그런데 이렇게 매치된 문자열 중에서 이름만 뽑아내고 싶다면 어떻게 해야 할까?\n","\n","보통 반복되는 문자열을 찾을 때 그룹을 사용하는데, 그룹을 사용하는 보다 큰 이유는 위에서 볼 수 있듯이 매치된 문자열 중에서 특정 부분의 문자열만 뽑아내기 위해서인 경우가 더 많다.\n","\n","위 예에서 만약 ‘이름’ 부분만 뽑아내려 한다면 다음과 같이 할 수 있다."]},{"cell_type":"code","metadata":{"id":"2qFLXlEAXbHf"},"source":[">>> p = re.compile(r\"(\\w+)\\s+\\d+[-]\\d+[-]\\d+\")\n",">>> m = p.search(\"park 010-1234-1234\")\n",">>> print(m.group(1))\n","park"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"NK_Wg1QNXdFv"},"source":["이름에 해당하는 \\w+ 부분을 그룹 (\\w+)으로 만들면 match 객체의 group(인덱스) 메서드를 사용하여 그루핑된 부분의 문자열만 뽑아낼 수 있다. group 메서드의 인덱스는 다음과 같은 의미를 갖는다.\n","\n","**group(인덱스)**\t                ** 설명**\n","\n","group(0)\t                     매치된 전체 문자열\n","group(1)\t                 첫 번째 그룹에 해당되는 문자열\n","group(2)\t                 두 번째 그룹에 해당되는 문자열\n","group(n)\t                 n 번째 그룹에 해당되는 문자열\n","\n","다음 예제를 계속해서 보자."]},{"cell_type":"code","metadata":{"id":"bB3aUofTXuvX"},"source":[">>> p = re.compile(r\"(\\w+)\\s+(\\d+[-]\\d+[-]\\d+)\")\n",">>> m = p.search(\"park 010-1234-1234\")\n",">>> print(m.group(2))\n","010-1234-1234"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"eCp_zqa8XzW9"},"source":["이번에는 전화번호 부분을 추가로 그룹 (\\d+[-]\\d+[-]\\d+)로 만들었다. 이렇게 하면 group(2)처럼 사용하여 전화번호만 뽑아낼 수 있다.\n","\n","만약 전화번호 중에서 국번만 뽑아내고 싶으면 어떻게 해야 할까? 다음과 같이 국번 부분을 또 그루핑하면 된다."]},{"cell_type":"code","metadata":{"id":"2ODzBZbVX02L"},"source":[">>> p = re.compile(r\"(\\w+)\\s+((\\d+)[-]\\d+[-]\\d+)\")\n",">>> m = p.search(\"park 010-1234-1234\")\n",">>> print(m.group(3))\n","010"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"z7pb1KSgX2cv"},"source":["위 예에서 볼 수 있듯이 (\\w+)\\s+((\\d+)[-]\\d+[-]\\d+)처럼 그룹을 중첩되게 사용하는 것도 가능하다. 그룹이 중첩되어 있는 경우는 바깥쪽부터 시작하여 안쪽으로 들어갈수록 인덱스가 증가한다."]},{"cell_type":"markdown","metadata":{"id":"NhOBRC27X7D7"},"source":["**그루핑된 문자열 재참조하기**\n","\n","그룹의 또 하나 좋은 점은 한 번 그루핑한 문자열을 재참조(Backreferences)할 수 있다는 점이다. 다음 예를 보자."]},{"cell_type":"code","metadata":{"id":"ncWomSA0X-0S"},"source":[">>> p = re.compile(r'(\\b\\w+)\\s+\\1')\n",">>> p.search('Paris in the the spring').group()\n","'the the'"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Bgqaae0dYA-Y"},"source":["정규식 (\\b\\w+)\\s+\\1은 (그룹) + \" \" + 그룹과 동일한 단어와 매치됨을 의미한다. 이렇게 정규식을 만들게 되면 2개의 동일한 단어를 연속적으로 사용해야만 매치된다. 이것을 가능하게 해주는 것이 바로 재참조 메타 문자인 \\1이다. \\1은 정규식의 그룹 중 첫 번째 그룹을 가리킨다.\n","\n","※ 두 번째 그룹을 참조하려면 \\2를 사용하면 된다."]},{"cell_type":"markdown","metadata":{"id":"cMuLMcm2YCs2"},"source":["**그루핑된 문자열에 이름 붙이기**\n","\n","정규식 안에 그룹이 무척 많아진다고 가정해 보자. 예를 들어 정규식 안에 그룹이 10개 이상만 되어도 매우 혼란스러울 것이다. 거기에 더해 정규식이 수정되면서 그룹이 추가, 삭제되면 그 그룹을 인덱스로 참조한 프로그램도 모두 변경해 주어야 하는 위험도 갖게 된다.\n","\n","만약 그룹을 인덱스가 아닌 이름(Named Groups)으로 참조할 수 있다면 어떨까? 그렇다면 이런 문제에서 해방되지 않을까?\n","\n","이러한 이유로 정규식은 그룹을 만들 때 그룹 이름을 지정할 수 있게 했다. 그 방법은 다음과 같다."]},{"cell_type":"code","metadata":{"id":"LXxZgf-oYFXa"},"source":["(?P<name>\\w+)\\s+((\\d+)[-]\\d+[-]\\d+)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ogOqGkrjYG1x"},"source":["위 정규식은 앞에서 본 이름과 전화번호를 추출하는 정규식이다. 기존과 달라진 부분은 다음과 같다.\n","\n","(\\w+) --> (?P<name>\\w+)\n","\n","대단히 복잡해진 것처럼 보이지만 (\\w+)라는 그룹에 name이라는 이름을 붙인 것에 불과하다. 여기에서 사용한 (?...) 표현식은 정규 표현식의 확장 구문이다. 이 확장 구문을 사용하기 시작하면 가독성이 상당히 떨어지긴 하지만 반면에 강력함을 갖게 된다.\n","\n","그룹에 이름을 지어 주려면 다음과 같은 확장 구문을 사용해야 한다."]},{"cell_type":"code","metadata":{"id":"whSW-93aYIKO"},"source":["(?P<그룹명>...)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"HZs9KdQ8YJd9"},"source":["그룹에 이름을 지정하고 참조하는 다음 예를 보자."]},{"cell_type":"code","metadata":{"id":"FzbNzzlnYKzc"},"source":[">>> p = re.compile(r\"(?P<name>\\w+)\\s+((\\d+)[-]\\d+[-]\\d+)\")\n",">>> m = p.search(\"park 010-1234-1234\")\n",">>> print(m.group(\"name\"))\n","park"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"BgN3SXAUYMEK"},"source":["위 예에서 볼 수 있듯이 name이라는 그룹 이름으로 참조할 수 있다.\n","\n","그룹 이름을 사용하면 정규식 안에서 재참조하는 것도 가능하다."]},{"cell_type":"code","metadata":{"id":"cSz5vtb7YNnt"},"source":[">>> p = re.compile(r'(?P<word>\\b\\w+)\\s+(?P=word)')\n",">>> p.search('Paris in the the spring').group()\n","'the the'"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"1vMIwz-5YPEI"},"source":["위 예에서 볼 수 있듯이 재참조할 때에는 (?P=그룹이름)이라는 확장 구문을 사용해야 한다."]},{"cell_type":"markdown","metadata":{"id":"C0fx7XABYQcU"},"source":["**전방 탐색**\n","\n","정규식에 막 입문한 사람들이 가장 어려워하는 것이 바로 전방 탐색(Lookahead Assertions) 확장 구문이다. 정규식 안에 이 확장 구문을 사용하면 순식간에 암호문처럼 알아보기 어렵게 바뀌기 때문이다. 하지만 이 전방 탐색이 꼭 필요한 경우가 있으며 매우 유용한 경우도 많으니 꼭 알아 두자.\n","\n","다음 예를 보자."]},{"cell_type":"code","metadata":{"id":"DFm-QYJxYS0X"},"source":[">>> p = re.compile(\".+:\")\n",">>> m = p.search(\"http://google.com\")\n",">>> print(m.group())\n","http:"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"YmBQ3elHYUp9"},"source":["정규식 .+:과 일치하는 문자열로 http:를 돌려주었다. 만약 http:라는 검색 결과에서 :을 제외하고 출력하려면 어떻게 해야 할까? 위 예는 그나마 간단하지만 훨씬 복잡한 정규식이어서 그루핑은 추가로 할 수 없다는 조건까지 더해진다면 어떻게 해야 할까?\n","\n","이럴 때 사용할 수 있는 것이 바로 전방 탐색이다. 전방 탐색에는 긍정(Positive)과 부정(Negative)의 2종류가 있고 다음과 같이 표현한다.\n","\n","-긍정형 전방 탐색((?=...)) - ... 에 해당되는 정규식과 매치되어야 하며 조건이 통과되어도 문자열이 소비되지 않는다.\n","\n","-부정형 전방 탐색((?!...)) - ...에 해당되는 정규식과 매치되지 않아야 하며 조건이 통과되어도 문자열이 소비되지 않는다."]},{"cell_type":"markdown","metadata":{"id":"jpRZvQzXYctO"},"source":["**긍정형 전방 탐색**\n","\n","긍정형 전방 탐색을 사용하면 http:의 결과를 http로 바꿀 수 있다. 다음 예를 보자."]},{"cell_type":"code","metadata":{"id":"8a0KmM4VYfcI"},"source":[">>> p = re.compile(\".+(?=:)\")\n",">>> m = p.search(\"http://google.com\")\n",">>> print(m.group())\n","http"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"GaTWSEFMYgzY"},"source":["정규식 중 :에 해당하는 부분에 긍정형 전방 탐색 기법을 적용하여 (?=:)으로 변경하였다. 이렇게 되면 기존 정규식과 검색에서는 동일한 효과를 발휘하지만 : 에 해당하는 문자열이 정규식 엔진에 의해 소비되지 않아(검색에는 포함되지만 검색 결과에는 제외됨) 검색 결과에서는 :이 제거된 후 돌려주는 효과가 있다.\n","\n","자, 이번에는 다음 정규식을 보자."]},{"cell_type":"code","metadata":{"id":"KF4Ns8bZYiOM"},"source":[".*[.].*$"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Kn595LRGYjqZ"},"source":["이 정규식은 파일 이름 + . + 확장자를 나타내는 정규식이다. 이 정규식은 foo.bar, autoexec.bat, sendmail.cf 같은 형식의 파일과 매치될 것이다.\n","\n","이 정규식에 확장자가 \"bat인 파일은 제외해야 한다\"는 조건을 추가해 보자. 가장 먼저 생각할 수 있는 정규식은 다음과 같다."]},{"cell_type":"code","metadata":{"id":"K7kdaoMVYk5u"},"source":[".*[.][^b].*$"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"aWIvA5JKYmIU"},"source":["이 정규식은 확장자가 b라는 문자로 시작하면 안 된다는 의미이다. 하지만 이 정규식은 foo.bar라는 파일마저 걸러 낸다. 정규식을 다음과 같이 수정해 보자."]},{"cell_type":"code","metadata":{"id":"m7j46eNCYngO"},"source":[".*[.]([^b]..|.[^a].|..[^t])$"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"bBCDAnE6Yo1_"},"source":["이 정규식은 | 메타 문자를 사용하여 확장자의 첫 번째 문자가 b가 아니거나 두 번째 문자가 a가 아니거나 세 번째 문자가 t가 아닌 경우를 의미한다. 이 정규식에 의하여 foo.bar는 제외되지 않고 autoexec.bat은 제외되어 만족스러운 결과를 돌려준다. 하지만 이 정규식은 아쉽게도 sendmail.cf처럼 확장자의 문자 개수가 2개인 케이스를 포함하지 못하는 오동작을 하기 시작한다.\n","\n","따라서 다음과 같이 바꾸어야 한다."]},{"cell_type":"code","metadata":{"id":"z1T4g4ztYqL-"},"source":[".*[.]([^b].?.?|.[^a]?.?|..?[^t]?)$"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"7roC_69dYrjT"},"source":["확장자의 문자 개수가 2개여도 통과되는 정규식이 만들어졌다. 하지만 정규식은 점점 더 복잡해지고 이해하기 어려워진다.\n","\n","그런데 여기에서 bat 파일말고 exe 파일도 제외하라는 조건이 추가로 생긴다면 어떻게 될까? 이 모든 조건을 만족하는 정규식을 구현하려면 패턴은 더욱더 복잡해질 것이다."]},{"cell_type":"markdown","metadata":{"id":"cnK3LGpTYs89"},"source":["**부정형 전방 탐색**\n","\n","이러한 상황의 구원 투수는 바로 부정형 전방 탐색이다. 위 예는 부정형 전방 탐색을 사용하면 다음과 같이 간단하게 처리된다."]},{"cell_type":"code","metadata":{"id":"a6SHWP01YvUZ"},"source":[".*[.](?!bat$).*$"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"27osZwbMYwzV"},"source":["확장자가 bat가 아닌 경우에만 통과된다는 의미이다. bat 문자열이 있는지 조사하는 과정에서 문자열이 소비되지 않으므로 bat가 아니라고 판단되면 그 이후 정규식 매치가 진행된다.\n","\n","exe 역시 제외하라는 조건이 추가되더라도 다음과 같이 간단히 표현할 수 있다."]},{"cell_type":"code","metadata":{"id":"Lf8j-XziYyOy"},"source":[".*[.](?!bat$|exe$).*$"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"N2sVsUYoYzfk"},"source":["**문자열 바꾸기**\n","\n","sub 메서드를 사용하면 정규식과 매치되는 부분을 다른 문자로 쉽게 바꿀 수 있다.\n","\n","다음 예를 보자."]},{"cell_type":"code","metadata":{"id":"N2gnjzfCY18l"},"source":[">>> p = re.compile('(blue|white|red)')\n",">>> p.sub('colour', 'blue socks and red shoes')\n","'colour socks and colour shoes'"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"5ZZ2BjIyY3Qz"},"source":["sub 메서드의 첫 번째 매개변수는 \"바꿀 문자열(replacement)\"이 되고, 두 번째 매개변수는 \"대상 문자열\"이 된다. 위 예에서 볼 수 있듯이 blue 또는 white 또는 red라는 문자열이 colour라는 문자열로 바뀌는 것을 확인할 수 있다.\n","\n","그런데 딱 한 번만 바꾸고 싶은 경우도 있다. 이렇게 바꾸기 횟수를 제어하려면 다음과 같이 세 번째 매개변수로 count 값을 넘기면 된다."]},{"cell_type":"code","metadata":{"id":"_YxM-nSQY4pK"},"source":[">>> p.sub('colour', 'blue socks and red shoes', count=1)\n","'colour socks and red shoes'"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"KfDEwy7UY5_5"},"source":["처음 일치하는 blue만 colour라는 문자열로 한 번만 바꾸기가 실행되는 것을 알 수 있다."]},{"cell_type":"markdown","metadata":{"id":"bpPILknZY9PB"},"source":["[sub 메서드와 유사한 subn 메서드]\n","\n","subn 역시 sub와 동일한 기능을 하지만 반환 결과를 튜플로 돌려준다는 차이가 있다. 돌려준 튜플의 첫 번째 요소는 변경된 문자열이고, 두 번째 요소는 바꾸기가 발생한 횟수이다."]},{"cell_type":"code","metadata":{"id":"pl-tj7QpY_Ea"},"source":[">>> p = re.compile('(blue|white|red)')\n",">>> p.subn( 'colour', 'blue socks and red shoes')\n","('colour socks and colour shoes', 2)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"MWbqbju2ZAeE"},"source":["**sub 메서드 사용 시 참조 구문 사용하기**\n","\n","sub 메서드를 사용할 때 참조 구문을 사용할 수 있다. 다음 예를 보자."]},{"cell_type":"code","metadata":{"id":"FxuB8lanZDPp"},"source":[">>> p = re.compile(r\"(?P<name>\\w+)\\s+(?P<phone>(\\d+)[-]\\d+[-]\\d+)\")\n",">>> print(p.sub(\"\\g<phone> \\g<name>\", \"park 010-1234-1234\"))\n","010-1234-1234 park"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Rjs0NxVmZEsy"},"source":["위 예는 이름 + 전화번호의 문자열을 전화번호 + 이름으로 바꾸는 예이다. sub의 바꿀 문자열 부분에 \\g<그룹이름>을 사용하면 정규식의 그룹 이름을 참조할 수 있게 된다.\n","\n","다음과 같이 그룹 이름 대신 참조 번호를 사용해도 마찬가지 결과를 돌려준다."]},{"cell_type":"code","metadata":{"id":"IQMpfYSdZGKu"},"source":[">>> p = re.compile(r\"(?P<name>\\w+)\\s+(?P<phone>(\\d+)[-]\\d+[-]\\d+)\")\n",">>> print(p.sub(\"\\g<2> \\g<1>\", \"park 010-1234-1234\"))\n","010-1234-1234 park"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"gvAkBrO5ZHeA"},"source":["**sub 메서드의 매개변수로 함수 넣기**\n","\n","sub 메서드의 첫 번째 매개변수로 함수를 넣을 수도 있다. 다음 예를 보자."]},{"cell_type":"code","metadata":{"id":"JEWpHgO2ZKal"},"source":[">>> def hexrepl(match):\n","...     value = int(match.group())\n","...     return hex(value)\n","...\n",">>> p = re.compile(r'\\d+')\n",">>> p.sub(hexrepl, 'Call 65490 for printing, 49152 for user code.')\n","'Call 0xffd2 for printing, 0xc000 for user code.'"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"03pkCLpVZLzq"},"source":["hexrepl 함수는 match 객체(위에서 숫자에 매치되는)를 입력으로 받아 16진수로 변환하여 돌려주는 함수이다. sub의 첫 번째 매개변수로 함수를 사용할 경우 해당 함수의 첫 번째 매개변수에는 정규식과 매치된 match 객체가 입력된다. 그리고 매치되는 문자열은 함수의 반환 값으로 바뀌게 된다."]},{"cell_type":"markdown","metadata":{"id":"DDMIbdySZNNi"},"source":["**Greedy vs Non-Greedy**\n","\n","정규식에서 Greedy(탐욕스러운)란 어떤 의미일까? 다음 예제를 보자."]},{"cell_type":"code","metadata":{"id":"WEyHZpW3ZP05"},"source":[">>> s = '<html><head><title>Title</title>'\n",">>> len(s)\n","32\n",">>> print(re.match('<.*>', s).span())\n","(0, 32)\n",">>> print(re.match('<.*>', s).group())\n","<html><head><title>Title</title>"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"TnAYRwMFZRSj"},"source":["<.*> 정규식의 매치 결과로 <html> 문자열을 돌려주기를 기대했을 것이다. 하지만 * 메타 문자는 매우 탐욕스러워서 매치할 수 있는 최대한의 문자열인 <html><head><title>Title</title> 문자열을 모두 소비해 버렸다. 어떻게 하면 이 탐욕스러움을 제한하고 <html> 문자열까지만 소비하도록 막을 수 있을까?\n","\n","다음과 같이 non-greedy 문자인 ?를 사용하면 *의 탐욕을 제한할 수 있다."]},{"cell_type":"code","metadata":{"id":"zbh1VnleZSs6"},"source":[">>> print(re.match('<.*?>', s).group())\n","<html>"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"AraS9EXKZUKG"},"source":["non-greedy 문자인 ?는 *?, +?, ??, {m,n}?와 같이 사용할 수 있다. 가능한 한 가장 최소한의 반복을 수행하도록 도와주는 역할을 한다."]},{"cell_type":"markdown","metadata":{"id":"17Qd42TdZXqd"},"source":["##08장 종합문제\n","\n","파이썬은 웹, GUI, 네트워크, 딥러닝 등 상당히 많은 일을 할 수 있는 언어이다. 여러분이 지금까지 배운 내용을 충분히 숙지했다면 이제 이들을 향해 첫발을 내디딜 준비를 마친 것이다. 하지만 그전에 여기에 준비한 문제들을 풀어 보면서 여러분이 얼마나 파이썬에 익숙해졌는지 점검해 보도록 하자.\n","\n","이곳에 준비한 문제들은 조금 어려울 수 있다. 하지만 파이썬과 함께라면 이 문제들을 해결하는 과정 역시 또 하나의 즐거움이라는 것을 분명 느끼게 될 것이다."]},{"cell_type":"markdown","metadata":{"id":"DU0aXP_iZbSR"},"source":["**Q1 문자열 바꾸기**\n","\n","다음과 같은 문자열이 있다."]},{"cell_type":"code","metadata":{"id":"f8rrclQDZd9v"},"source":["a:b:c:d"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"0yvKdIEeZgRg"},"source":["문자열의 split와 join 함수를 사용하여 위 문자열을 다음과 같이 고치시오."]},{"cell_type":"code","metadata":{"id":"wdUvUBgAZhYd"},"source":["a#b#c#d"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"vnldmyzoZirK"},"source":["**Q2 딕셔너리 값 추출하기**\n","\n","다음은 딕셔너리의 a에서 'C'라는 key에 해당하는 value를 출력하는 프로그램이다."]},{"cell_type":"code","metadata":{"id":"e4k5K9bIZk60"},"source":[">>> a = {'A':90, 'B':80}\n",">>> a['C']\n","Traceback (most recent call last):\n","  File \"<stdin>\", line 1, in <module>\n","KeyError: 'C'"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"HkzeHLmnZmXq"},"source":["a 딕셔너리에는 'C'라는 key가 없으므로 위와 같은 오류가 발생한다. 'C'에 해당하는 key 값이 없을 경우 오류 대신 70을 얻을 수 있도록 수정하시오."]},{"cell_type":"markdown","metadata":{"id":"RKzRfYVoZnsD"},"source":["**Q3 리스트의 더하기와 extend 함수**\n","\n","다음과 같은 리스트 a가 있다."]},{"cell_type":"code","metadata":{"id":"K-TnW1kbZqBQ"},"source":[">>> a = [1, 2, 3]"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"wI7whULVZrPK"},"source":["리스트 a에 [4, 5]를 + 기호를 사용하여 더한 결과는 다음과 같다."]},{"cell_type":"code","metadata":{"id":"likioQnNZsef"},"source":[">>> a = [1, 2, 3]\n",">>> a = a + [4,5]\n",">>> a\n","[1, 2, 3, 4, 5]"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ACLmbH-hZtrG"},"source":["리스트 a에 [4,5]를 extend를 사용하여 더한 결과는 다음과 같다."]},{"cell_type":"code","metadata":{"id":"OamjfItyZu6G"},"source":[">>> a = [1, 2, 3]\n",">>> a.extend([4, 5])\n",">>> a\n","[1, 2, 3, 4, 5]"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"j850Q-h-ZwXJ"},"source":["+ 기호를 사용하여 더한 것과 extend한 것의 차이점이 있을까? 있다면 그 차이점을 설명하시오."]},{"cell_type":"markdown","metadata":{"id":"9zv_R92SZx9P"},"source":["**Q4 리스트 총합 구하기**\n","\n","다음은 A학급 학생의 점수를 나타내는 리스트이다. 다음 리스트에서 50점 이상 점수의 총합을 구하시오."]},{"cell_type":"code","metadata":{"id":"rXlwWRN_Z0YM"},"source":["A = [20, 55, 67, 82, 45, 33, 90, 87, 100, 25]"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"qIffND7fZ1pm"},"source":["**Q5 피보나치 함수**\n","\n","첫 번째 항의 값이 0이고 두 번째 항의 값이 1일 때, 이후에 이어지는 항은 이전의 두 항을 더한 값으로 이루어지는 수열을 피보나치 수열이라고 한다."]},{"cell_type":"code","metadata":{"id":"uo1Oapi5Z4ah"},"source":["0, 1, 1, 2, 3, 5, 8, 13, ..."],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"vPQHtzDSZ535"},"source":["입력을 정수 n으로 받았을 때, n 이하까지의 피보나치 수열을 출력하는 함수를 작성해 보자."]},{"cell_type":"markdown","metadata":{"id":"VyTW4KBgZ7V8"},"source":["**Q6 숫자의 총합 구하기**\n","\n","사용자로부터 다음과 같은 숫자를 입력받아 입력받은 숫자의 총합을 구하는 프로그램을 작성하시오. (단 숫자는 콤마로 구분하여 입력한다.)"]},{"cell_type":"code","metadata":{"id":"TeOI3QtLZ91C"},"source":["65,45,2,3,45,8"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"gCyYwH4SZ_S8"},"source":["**Q7 한 줄 구구단**\n","\n","사용자로부터 2~9의 숫자 중 하나를 입력받아 해당 숫자의 구구단을 한 줄로 출력하는 프로그램을 작성하시오.\n","\n","실행 예)"]},{"cell_type":"code","metadata":{"id":"2y-j4_inaB4r"},"source":["구구단을 출력할 숫자를 입력하세요(2~9): 2\n","2 4 6 8 10 12 14 16 18"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"iqzJBGbDaDQW"},"source":["**Q8 역순 저장**\n","\n","다음과 같은 내용의 파일 abc.txt가 있다."]},{"cell_type":"code","metadata":{"id":"8N6rZobGaFXY"},"source":["AAA\n","BBB\n","CCC\n","DDD\n","EEE"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"L3HU1ShFaGk5"},"source":["이 파일의 내용을 다음과 같이 역순으로 바꾸어 저장하시오."]},{"cell_type":"code","metadata":{"id":"BVj2KRmHaH3R"},"source":["EEE\n","DDD\n","CCC\n","BBB\n","AAA"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ZH8WS0wCaJLV"},"source":["**Q9 평균값 구하기**\n","\n","다음과 같이 총 10줄로 이루어진 sample.txt 파일이 있다. sample.txt 파일의 숫자 값을 모두 읽어 총합과 평균 값을 구한 후 평균 값을 result.txt 파일에 쓰는 프로그램을 작성하시오."]},{"cell_type":"code","metadata":{"id":"HjDS3CU-aMcW"},"source":["70\n","60\n","55\n","75\n","95\n","90\n","80\n","80\n","85\n","100"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"k7gpWcoNaOAD"},"source":["**Q10 사칙연산 계산기**\n","\n","다음과 같이 동작하는 클래스 Calculator를 작성하시오."]},{"cell_type":"code","metadata":{"id":"5iusiehhaQbW"},"source":[">>> cal1 = Calculator([1,2,3,4,5])\n",">>> cal1.sum() # 합계\n","15\n",">>> cal1.avg() # 평균\n","3.0\n",">>> cal2 = Calculator([6,7,8,9,10])\n",">>> cal2.sum() # 합계\n","40\n",">>> cal2.avg() # 평균\n","8.0"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Rz0LZNaUaR2k"},"source":["**Q11 모듈 사용 방법**\n","\n","C:\\doit 디렉터리에 mymod.py 파이썬 모듈이 있다고 가정해 보자. 명령 프롬프트 창에서 파이썬 셸을 열어 이 모듈을 import해서 사용할 수 있는 방법을 모두 기술하시오. (즉 다음과 같이 import mymod를 수행할 때 오류가 없어야 한다.)"]},{"cell_type":"code","metadata":{"id":"Qcr9valPaUIn"},"source":[">>> import mymod\n",">>>"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"6FiLtcAEaVf0"},"source":["**Q12 오류와 예외 처리**\n","\n","다음 코드의 실행 결과를 예측하고 그 이유에 대해 설명하시오."]},{"cell_type":"code","metadata":{"id":"_lf0VLIGaYwp"},"source":["result = 0\n","\n","try:\n","    [1, 2, 3][3]\n","    \"a\"+1\n","    4 / 0\n","except TypeError:\n","    result += 1\n","except ZeroDivisionError:\n","    result += 2\n","except IndexError:\n","    result += 3\n","finally:\n","    result += 4\n","\n","print(result)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"wFnIlW5yaaT7"},"source":["**Q13 DashInsert 함수**\n","\n","DashInsert 함수는 숫자로 구성된 문자열을 입력받은 뒤 문자열 안에서 홀수가 연속되면 두 수 사이에 - 를 추가하고, 짝수가 연속되면 * 를 추가하는 기능을 갖고 있다. DashInsert 함수를 완성하시오."]},{"cell_type":"code","metadata":{"id":"Dpcx7bP_adKU"},"source":["입력 예시: 4546793\n","출력 예시: 454*67-9-3"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"-sc94D9kaeiN"},"source":["**Q14 문자열 압축하기**\n","\n","문자열을 입력받아 같은 문자가 연속적으로 반복되는 경우에 그 반복 횟수를 표시해 문자열을 압축하여 표시하시오."]},{"cell_type":"code","metadata":{"id":"l-arrECOahAT"},"source":["입력 예시: aaabbcccccca\n","출력 예시: a3b2c6a1"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"29bgn2IlaimU"},"source":["**Q15 Duplicate Numbers**\n","\n","0~9의 문자로 된 숫자를 입력받았을 때, 이 입력값이 0~9의 모든 숫자를 각각 한 번씩만 사용한 것인지 확인하는 함수를 작성하시오."]},{"cell_type":"code","metadata":{"id":"nrNwH78HalXe"},"source":["입력 예시: 0123456789 01234 01234567890 6789012345 012322456789\n","출력 예시: true false false true false"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"RuU7MwqLat2T"},"source":["**Q16 모스 부호 해독**\n","\n","문자열 형식으로 입력받은 모스 부호(dot:. dash:-)를 해독하여 영어 문장으로 출력하는 프로그램을 작성하시오.\n","\n","-글자와 글자 사이는 공백 1개, 단어와 단어 사이는 공백 2개로 구분한다.\n","-예를 들어 다음 모스 부호는 \"HE SLEEPS EARLY\"로 해석해야 한다."]},{"cell_type":"code","metadata":{"id":"xc7O7l1oaz7I"},"source":[".... .  ... .-.. . . .--. ...  . .- .-. .-.. -.--"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"tjBkFry5a13j"},"source":["모스부호 규칙 표\n","\n","문자\t부호\t문자\t부호\n","A\t    .-\t   N\t   -.\n","B\t    -...\t O\t  ---\n","C\t    -.-.\t P\t  .--.\n","D\t     -..\t Q\t  --.-\n","E\t     .\t   R\t   .-.\n","F\t   ..-.\t   S\t  ...\n","G\t    --.\t   T\t   -\n","H\t   ....    U\t   ..-\n","I\t    ..\t   V\t  ...-\n","J\t   .---\t   W\t  .--\n","K\t    -.- \t X\t  -..-\n","L\t    .-..\t Y\t  -.--\n","M\t    --\t   Z\t  --.."]},{"cell_type":"markdown","metadata":{"id":"Mykd1eDjbm1E"},"source":["**Q17 기초 메타 문자**\n","\n","다음 중 정규식 a[.]{3,}b과 매치되는 문자열은 무엇일까?\n","\n","-acccb\n","-a....b\n","-aaab\n","-a.cccb"]},{"cell_type":"markdown","metadata":{"id":"KFZpV0jGbqks"},"source":["**Q18 문자열 검색**\n","\n","다음 코드의 결괏값은 무엇일까?"]},{"cell_type":"code","metadata":{"id":"b5Dcf-CPbtNo"},"source":[">>> import re\n",">>> p = re.compile(\"[a-z]+\")\n",">>> m = p.search(\"5 python\")\n",">>> m.start() + m.end()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"bbXQK22bbzYW"},"source":["**Q19 그루핑**\n","\n","다음과 같은 문자열에서 휴대폰 번호 뒷자리인 숫자 4개를 ####로 바꾸는 프로그램을 정규식을 사용하여 작성하시오."]},{"cell_type":"code","metadata":{"id":"fbgFo85Vb2E4"},"source":["\"\"\"\n","park 010-9999-9988\n","kim 010-9909-7789\n","lee 010-8789-7768\n","\"\"\""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Fc1tcvybb3nD"},"source":["**Q20 전방 탐색**\n","\n","다음은 이메일 주소를 나타내는 정규식이다. 이 정규식은 park@naver.com, kim@daum.net, lee@myhome.co.kr 등과 매치된다. 긍정형 전방 탐색 기법을 사용하여 .com, .net이 아닌 이메일 주소는 제외시키는 정규식을 작성하시오."]},{"cell_type":"code","metadata":{"id":"neYz3b_lb6MQ"},"source":[".*[@].*[.].*$"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"S473Ydwnb9ar"},"source":["##09장 풀이"]},{"cell_type":"markdown","metadata":{"id":"UbTgglLNcA3L"},"source":["###02장 파이썬 프로그래밍의 기초, 자료형"]},{"cell_type":"markdown","metadata":{"id":"8xvAU6QAcGWj"},"source":["**Q1.**\n","\n","홍길동 씨의 과목별 점수는 각각 다음과 같다. 홍길동 씨의 평균 점수를 구해 보자."]},{"cell_type":"code","metadata":{"id":"Z1myb0WScIxp"},"source":[">>> a = 80\n",">>> b = 75\n",">>> c = 55\n",">>> (a+b+c)/3\n","70.0"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"D4xf2XeXcKGb"},"source":["**Q2.**\n","\n","자연수 13이 홀수인지 짝수인지 판별할 수 있는 방법에 대해서 말해 보자.\n","\n","나머지 연산자를 사용하면 자연수의 홀수, 짝수를 쉽게 판별할 수 있다"]},{"cell_type":"code","metadata":{"id":"eC2rHN-TcMKs"},"source":[">>> 1 % 2\n","1\n",">>> 2 % 2\n","0\n",">>> 3 % 2\n","1\n",">>> 4 % 2\n","0"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"71pOMVHgcNtV"},"source":["1, 2, 3, 4라는 자연수를 2로 나누었을 때의 나머지 값을 출력하는 예제이다. 결과를 보면 자연수가 홀수일 때는 1을 짝수일 때는 0을 돌려주는 것을 확인할 수 있다."]},{"cell_type":"markdown","metadata":{"id":"_vLHQwPacPap"},"source":["**Q3.**\n","\n","홍길동씨의 주민등록번호는 881120-1068234이다. 홍길동씨의 주민등록번호를 연월일(YYYYMMDD) 부분과 그 뒤의 숫자 부분으로 나누어 출력해 보자."]},{"cell_type":"code","metadata":{"id":"f6zUW9bwcR2M"},"source":["pin = \"881120-1068234\"\n","yyyymmdd = pin[:6]\n","num = pin[7:]\n","print(yyyymmdd)  # 881120 출력\n","print(num)       # 1068234 출력"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"WT3Bf5ErcTfY"},"source":["**Q4.**\n","\n","주민등록번호 뒷자리의 맨 첫 번째 숫자는 성별을 나타낸다. 주민등록번호에서 성별을 나타내는 숫자를 출력해 보자."]},{"cell_type":"code","metadata":{"id":"qStEe2xTcVoc"},"source":["pin = \"881120-1068234\"\n","print(pin[7])   # 1이면 남자, 2이면 여자"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"a-t9u_WccW38"},"source":["성별을 나타내는 숫자는 하이픈을 포함하여 8번째 숫자이므로 8번째 자리를 인덱싱한다."]},{"cell_type":"markdown","metadata":{"id":"p8k0-uAkcY2w"},"source":["**Q5.**\n","\n","다음과 같은 문자열 a:b:c:d가 있다. 문자열의 replace 함수를 사용하여 a#b#c#d로 바꿔서 출력해 보자."]},{"cell_type":"code","metadata":{"id":"wC44DHogcbHV"},"source":["a = \"a:b:c:d\"\n","b = a.replace(\":\", \"#\")\n","print(b)\n","'a#b#c#d'"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"MrYi9X0Qcca-"},"source":["**Q6.**\n","\n","[1, 3, 5, 4, 2]라는 리스트를 [5, 4, 3, 2, 1]로 만들어보자."]},{"cell_type":"code","metadata":{"id":"vOCTbnN4cePy"},"source":["a = [1, 3, 5, 4, 2]\n","a.sort( )\n","a.reverse( )\n","print(a)       # [5, 4, 3, 2, 1] 출력"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"JbvovNlIcfn2"},"source":["리스트의 내장 함수인 sort를 사용하여 리스트 값들을 먼저 정렬한 후 reverse 함수를 사용하여 순서를 뒤집는다."]},{"cell_type":"markdown","metadata":{"id":"sS5Ko8vxchEy"},"source":["**Q7.**\n","\n","['Life', 'is', 'too', 'short'] 라는 리스트를 Life is too short라는 문자열로 만들어 출력해 보자."]},{"cell_type":"code","metadata":{"id":"k-A6CEJrci-3"},"source":["a = ['Life', 'is', 'too', 'short']\n","result = \" \".join(a)\n","print(result)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"9wb9rLSCckNS"},"source":["a 리스트의 각 단어들을 한 문장으로 조립할 때 단어들 사이마다 공백을 넣어 주어야 한다. 1개의 공백문자(\" \")를 사용하여 join한다."]},{"cell_type":"markdown","metadata":{"id":"q61Fvu6QclsV"},"source":["**Q8.**\n","\n","(1,2,3)이라는 튜플에 4라는 값을 추가하여 (1,2,3,4)처럼 만들어 출력해 보자."]},{"cell_type":"code","metadata":{"id":"frELmi6wcnqx"},"source":["a = (1, 2, 3)\n","a = a + (4,)\n","print(a)       # (1, 2, 3, 4) 출력"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"yMsr0CbdcpEf"},"source":["a 튜플에 (4, )라는 튜플을 더하면 된다. 단, 이때 만들어지는 a + (4, )의 결과는 a 값이 변경되는 것이 아니라(튜플은 그 값을 변경할 수 없다) 새로운 튜플이 생성되고 그 값이 a 변수에 대입되는 것임에 유념하자.\n","\n","다음 코드를 실행해 보면 a의 고유 주소 값이 변경됨을 확인할 수 있다."]},{"cell_type":"code","metadata":{"id":"HBBO5fEMcqtK"},"source":["a = (1, 2, 3)\n","print (id(a))     # a의 고유 주소 값 출력\n","a = a + (4,)\n","print(a)\n","print (id(a))     # (4,) 값이 더해 진 후 a의 고유 주소 값 출력"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"yXM9sHwAcsPV"},"source":["**Q9.**\n","\n","다음과 같은 딕셔너리 a가 있다. 다음 중 오류가 발생하는 경우는 어떤 경우인가? 그리고 그 이유를 설명해 보자.\n","\n","3번째 예를 실행하면 다음과 같은 오류가 발생한다."]},{"cell_type":"code","metadata":{"id":"7pQlBzcwcumT"},"source":[">>> a[[1]] = 'python'\n","Traceback (most recent call last):\n","  File \"<stdin>\", line 1, in <module>\n","TypeError: unhashable type: 'list'"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"lbq-rWClcv_a"},"source":["오류가 발생하는 이유는 딕셔너리의 키로는 변하는(mutable) 값을 사용할 수 없기 때문이다. 위 예에서 키로 사용된 [1]은 리스트이므로 변하는 값이다. 다른 예에서 키로 사용된 문자열, 튜플, 숫자는 변하지 않는(immutable) 값이므로 딕셔너리의 키로 사용이 가능하다."]},{"cell_type":"markdown","metadata":{"id":"Mkys2tqhcyiD"},"source":["**Q10.**\n","\n","딕셔너리 a에서 'B'에 해당되는 값을 추출해 보자.\n","\n","딕셔너리도 리스트와 마찬가지로 다음과 같이 pop 함수를 사용할 수 있다."]},{"cell_type":"code","metadata":{"id":"VXarvdq9c1F5"},"source":["a = {'A':90, 'B':80, 'C':70}\n","result = a.pop('B')\n","print(a)            # {'A':90, 'C':70} 출력\n","print(result)       # 80 출력"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"dMu4h7Bmc2rc"},"source":["‘B’ 키 값에 해당되는 값이 리턴되고 딕셔너리 a에서는 그 값이 제거되는 것을 확인할 수 있다."]},{"cell_type":"markdown","metadata":{"id":"HD4eiA2uc4Rc"},"source":["**Q11.**\n","\n","a 리스트에서 중복된 숫자들을 제거해 보자."]},{"cell_type":"code","metadata":{"id":"uIhKLqHZc6Rq"},"source":["a = [1, 1, 1, 2, 2, 3, 3, 3, 4, 4, 5]\n","aSet = set(a)     # a 리스트를 집합자료형으로 변환\n","b = list(aSet)    # 집합자료형을 리스트 자료형으로 다시 변환\n","print(b)          # [1,2,3,4,5] 출력"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"AcbEMz1Qc7q5"},"source":["리스트 자료형이 집합 자료형으로 변환되면서 중복된 값들은 사라지게 된다. 이와 같은 성질을 사용하면 리스트 내에 중 복된 값을 쉽게 제거할 수 있다."]},{"cell_type":"markdown","metadata":{"id":"e4N1AExkc9Ll"},"source":["**Q12.**\n","\n","파이썬은 다음처럼 동일한 값에 여러 개의 변수를 선언할 수 있다. 다음과 같이 a, b 변수를 선언 한 후 a의 두 번째 요솟값을 변경하면 b의 값은 어떻게 될까? 그리고 이런 결과가 나오는 이유에 대해서 설명해 보자.\n","\n","[1, 4, 3]이 출력된다. a와 b 변수는 모두 동일한 [1, 2, 3]이라는 리스트 객체를 가리키고 있기 때문이다."]},{"cell_type":"markdown","metadata":{"id":"3-Iw_L2mc_76"},"source":["###03장 프로그램의 구조를 쌓는다! 제어문"]},{"cell_type":"markdown","metadata":{"id":"JUZKhvW7dKn0"},"source":["**Q1.**\n","\n","다음 코드의 결괏값은 무엇일까?\n","\n","결괏값으로 shirt 가 출력된다.\n","\n","첫 번째 조건: \"wife\"라는 단어는 a 문자열에 없으므로 거짓이다.\n","두 번째 조건: \"python\"이라는 단어는 a 문자열에 있지만 \"you\" 역시 a 문자열에 있으므로 거짓이다.\n","세 번째 조건: \"shirt\"라는 단어가 a 문자열에 없으므로 참이다.\n","네 번째 조건: \"need\"라는 단어가 a 문자열에 있으므로 참이다.\n","가장 먼저 참이 되는 것이 세 번째 조건이므로 \"shirt\"가 출력된다."]},{"cell_type":"markdown","metadata":{"id":"zstVe6e8dOld"},"source":["**Q2.**\n","\n","while문을 사용해 1부터 1000까지의 자연수 중 3의 배수의 합을 구해 보자.\n","\n","3의 배수는 3으로 나누어 떨어지는 수이다. 이러한 아이디어를 기반으로 한 파이썬 코드는 다음과 같다."]},{"cell_type":"code","metadata":{"id":"ANjv9fjmdREd"},"source":["result = 0\n","i = 1\n","while i <= 1000:\n","    if i % 3 == 0: # 3으로 나누어 떨어지는 수는 3의 배수\n","        result += i\n","    i += 1\n","\n","print(result) # 166833 출력"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"cb_T-iYAdSmn"},"source":["**Q3.**\n","\n","while문을 사용하여 다음과 같이 별(*)을 표시하는 프로그램을 작성해 보자."]},{"cell_type":"code","metadata":{"id":"S5ZYDU_xdUp2"},"source":["i = 0\n","while True:\n","    i += 1 # while문 수행 시 1씩 증가\n","    if i > 5: break     # i 값이 5이상이면 while문을 벗어난다.\n","    print ('*' * i)     # i 값 개수만큼 *를 출력한다."],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"h8Z1sncFdWET"},"source":["while문을 수행할 때마다 i 값을 증가시킨다. 별 모양을 5번 출력해야 하므로 i 값이 5 이상일 경우 while문을 벗어나도록 한다. 별 모양을 i 값 만큼 출력하기 위해서 문자열 곱하기 기능을 사용한다."]},{"cell_type":"markdown","metadata":{"id":"E6VIOTnbdXhn"},"source":["**Q4.**\n","\n","for문을 사용해 1부터 100까지의 숫자를 출력해 보자."]},{"cell_type":"code","metadata":{"id":"hfy-8gEkdZij"},"source":[">>> for i in range(1, 101):\n","...    print(i)\n","...\n","1\n","2\n","3\n","4\n","5\n","6\n","7\n","8\n","9\n","10\n","... 생략 ..."],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"EjWhOlYZdbBT"},"source":["**Q5.**\n","\n","for문을 사용하여 A 학급의 평균 점수를 구해 보자."]},{"cell_type":"code","metadata":{"id":"L6W_4UZOeR63"},"source":["A = [70, 60, 55, 75, 95, 90, 80, 80, 85, 100]\n","total = 0\n","\n","for score in A:\n","    total += score   # A학급의 점수를 모두 더한다.\n","\n","average = total / len(A) # 평균을 구하기 위해 총 점수를 총 학생수로 나눈다.\n","print(average) # 평균 79.0이 출력된다."],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"FGW2fh1geTQs"},"source":["for문을 사용하여 먼저 총 점수를 구한 후 총 점수를 총 학생 수로 나누어 평균 점수를 구한다."]},{"cell_type":"markdown","metadata":{"id":"b1j_M5nUeUzu"},"source":["**Q6.**\n","\n","리스트 중에서 홀수에만 2를 곱하여 저장하는 다음과 같은 코드가 있다."]},{"cell_type":"code","metadata":{"id":"qTbCwj8AeXN7"},"source":["numbers = [1, 2, 3, 4, 5]\n","\n","result = []\n","for n in numbers:\n","    if n % 2 == 1:\n","        result.append(n*2)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"PnrLrzAIeYss"},"source":["위 코드를 리스트 내포(list comprehension)를 사용하여 표현해 보자.\n","\n","리스트 내포로 표현하면 다음과 같다."]},{"cell_type":"code","metadata":{"id":"20SE2ZxIeaF5"},"source":["numbers = [1, 2, 3, 4, 5]\n","result = [n*2 for n in numbers if n%2==1]\n","print(result)\n","[2, 6, 10]"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"GUJfUgfeebnN"},"source":["###04장 프로그램의 입력과 출력은 어떻게 해야 할까?"]},{"cell_type":"markdown","metadata":{"id":"b5CLtlRQehOc"},"source":["**Q1.**\n","\n","주어진 자연수가 홀수인지 짝수인지 판별해 주는 함수(is_odd)를 작성해 보자."]},{"cell_type":"code","metadata":{"id":"sB-C-sCxejQ0"},"source":[">>> def is_odd(number):\n","...     if number % 2 == 1:   # 2로 나누었을 때 나머지가 1이면 홀수이다.\n","...         return True\n","...     else:\n","...         return False\n","...\n",">>> is_odd(3)\n","True\n",">>> is_odd(4)\n","False"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"1fbV5UEbekkE"},"source":["람다와 조건부 표현식을 사용하면 다음과 같이 간단하게도 만들 수 있다."]},{"cell_type":"code","metadata":{"id":"AAXwQWnSel3-"},"source":[">>> is_odd = lambda x: True if x % 2 == 1 else False\n",">>> is_odd(3)\n","True"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"G09ytoiWenMm"},"source":["**Q2.**\n","\n","입력으로 들어오는 모든 수의 평균 값을 계산해 주는 함수를 작성해 보자."]},{"cell_type":"code","metadata":{"id":"CUcEU0uqepWn"},"source":[">>> def avg_numbers(*args):   # 입력 개수에 상관없이 사용하기 위해 *args를 사용\n","...     result = 0\n","...     for i in args:\n","...         result += i\n","...     return result / len(args)\n","...\n",">>> avg_numbers(1, 2)\n","1.5\n",">>> avg_numbers(1,2,3,4,5)\n","3.0"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"wRVkZA9heqxs"},"source":["**Q3.**\n","\n","3과 6을 입력했을 때 9가 아닌 36이라는 결괏값을 돌려주었다. 이 프로그램의 오류를 수정해 보자."]},{"cell_type":"code","metadata":{"id":"zjRYzTKBetAv"},"source":["input1 = input(\"첫 번째 숫자를 입력하세요:\")\n","input2 = input(\"두 번째 숫자를 입력하세요:\")\n","\n","total = int(input1) + int(input2)      # 입력은 항상 문자열이므로 숫자로 바꾸어 주어야 한다.\n","print(\"두수의 합은 %s 입니다\" % total)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"HXVfcIQGeuUQ"},"source":["출력 결과는 다음과 같다."]},{"cell_type":"code","metadata":{"id":"AXyGOvzSevvY"},"source":["첫 번째 숫자를 입력하세요:3\n","두 번째 숫자를 입력하세요:6\n","두 수의 합은 9 입니다"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"jKSSmZtpexSo"},"source":["**Q4.**\n","\n","다음 중 출력 결과가 다른 것 한 개를 고르시오."]},{"cell_type":"code","metadata":{"id":"ApG6JKwfezxu"},"source":[">>> print(\"you\" \"need\" \"python\")\n","youneedpython\n",">>> print(\"you\"+\"need\"+\"python\")\n","youneedpython\n",">>> print(\"you\", \"need\", \"python\")   # 콤마가 있는 경우 공백이 삽입되어 더해진다.\n","you need python\n",">>> print(\"\".join([\"you\", \"need\", \"python\"]))\n","youneedpython"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Td8oymSCe1Jq"},"source":["**Q5.**\n","\n","이 프로그램은 우리가 예상한 \"Life is too short\"라는 문장을 출력하지 않는다. 우리가 예상한 값을 출력할 수 있도록 프로그램을 수정해 보자.\n","\n","문제의 예와 같이 파일을 닫지 않은 상태에서 다시 열면 파일에 저장한 데이터를 읽을 수 없다. 따라서 열린 파일 객체를 close로 닫아준 후 다시 열어서 파일의 내용을 읽어야 한다."]},{"cell_type":"code","metadata":{"id":"vo_r_ie3e3N6"},"source":["f1 = open(\"test.txt\", 'w')\n","f1.write(\"Life is too short!\")\n","f1.close() # 열린 파일 객체를 닫는다.\n","\n","f2 = open(\"test.txt\", 'r')\n","print(f2.read())\n","f2.close()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"4XoXwXNye5BD"},"source":["또는 다음과 같이 close를 명시적으로 할 필요가 없는 with구문을 사용한다."]},{"cell_type":"code","metadata":{"id":"lXL9-e66e6aH"},"source":["with open(\"test.txt\", 'w') as f1:\n","    f1.write(\"Life is too short! \")\n","with open(\"test.txt\", 'r') as f2:\n","    print(f2.read())"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"RI_yU54-e74O"},"source":["**Q6.**\n","\n","사용자의 입력을 파일(test.txt)에 저장하는 프로그램을 작성해 보자.\n","\n","기존 내용을 유지하고 새로운 내용을 덧붙이기 위해서 다음과 같이 'a' 모드를 사용해야 한다."]},{"cell_type":"markdown","metadata":{"id":"6mp-xmCEe-Tg"},"source":["user_input = input(\"저장할 내용을 입력하세요:\")\n","f = open('test.txt', 'a')   # 내용을 추가하기 위해서 'a'를 사용\n","f.write(user_input)\n","f.write(\"\\n\")               # 입력된 내용을 줄 단위로 구분하기 위해 줄 바꿈 문자 삽입\n","f.close()"]},{"cell_type":"markdown","metadata":{"id":"ryvEMVIYe_2A"},"source":["**Q7.**\n","\n","다음과 같은 내용을 지닌 파일 test.txt가 있다. 이 파일의 내용 중 \"java\"라는 문자열을 \"python\"으로 바꾸어서 저장해 보자.\n","\n","파일을 모두 읽은 후에 문자열의 replace 함수를 사용하여 java라는 문자열을 python으로 변경한 다음 저장한다."]},{"cell_type":"markdown","metadata":{"id":"vjktar2zfB9u"},"source":["f = open('test.txt', 'r')\n","body = f.read()\n","f.close()\n","\n","body = body.replace('java', 'python')\n","\n","f = open('test.txt', 'w')\n","f.write(body)\n","f.close()"]},{"cell_type":"markdown","metadata":{"id":"3mF24QP8fEG8"},"source":["###05장 파이썬 날개 달기"]},{"cell_type":"markdown","metadata":{"id":"oP1BRpqufGmX"},"source":["**Q1.**\n","\n","위 클래스를 상속하는 UpgradeCalculator를 만들고 값을 뺄 수 있는 minus 메서드를 추가해 보자.\n","\n","다음과 같이 Calculator 클래스를 상속하는 UpgradeCalculator 클래스를 만들고 minus 메서드를 추가한다."]},{"cell_type":"code","metadata":{"id":"axEdOOmRfMSB"},"source":["class UpgradeCalculator(Calculator):\n","    def minus(self, val):\n","        self.value -= val"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"1L6GfNaJfNub"},"source":["**Q2.**\n","\n","객체변수 value가 100 이상의 값은 가질 수 없도록 제한하는 MaxLimitCalculator 클래스를 만들어 보자.\n","\n","Calculator 클래스를 상속하고 add 메서드를 오버라이딩하여 다음과 같은 클래스를 만든다."]},{"cell_type":"code","metadata":{"id":"HdHd2BBwfT4q"},"source":["class MaxLimitCalculator(Calculator):\n","    def add(self, val):\n","        self.value += val\n","        if self.value > 100:\n","            self.value = 100"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"myvcD7_3fWE6"},"source":["**Q3.**\n","\n","다음 결과를 예측해 보자.\n","\n","하나."]},{"cell_type":"code","metadata":{"id":"uHxeOyJTfYHl"},"source":[">>> all([1, 2, abs(-3)-3])\n","False"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"wOVUWCc3fZaL"},"source":["abs(-3)은 -3의 절댓값이므로 3이 되어 all([1, 2, 0])이 되고, 리스트의 요솟값중 0이 있기 때문에 all 내장 함수의 결과는 False가 된다.\n","\n","둘."]},{"cell_type":"code","metadata":{"id":"ciKf80Fofa6w"},"source":[">>> chr(ord('a')) == 'a'\n","True"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"O5hm8SZTfcdH"},"source":["ord('a') 의 결과는 97이 되어 chr(97)로 치환된다. chr(97)의 결과는 다시 'a'가 되므로 'a' == 'a'가 되어 True를 돌려준다."]},{"cell_type":"markdown","metadata":{"id":"r0UdNJ66fiam"},"source":["**Q4.**\n","\n","filter와 lambda를 사용하여 리스트 [1, -2, 3, -5, 8, -3]에서 음수를 모두 제거해 보자.\n","\n","음수를 제거하기 위한 filter의 함수로 lambda 함수를 다음과 같이 만들어 실행한다."]},{"cell_type":"code","metadata":{"id":"EKraZb1ffka3"},"source":[">>> list(filter(lambda x:x>0, [1, -2, 3, -5, 8, -3]))\n","[1, 3, 8]"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"jPLTSRg2fl4j"},"source":["**Q5.**\n","\n","'0xea' 라는 16진수 문자열을 10진수로 변경해 보자.\n","\n","int 내장 함수를 다음과 같이 실행한다."]},{"cell_type":"code","metadata":{"id":"GNG44ytJfnwj"},"source":[">>> int('0xea', 16)\n","234"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"I8MeDU90fpMm"},"source":["**Q6.**\n","\n","map과 lambda를 사용하여 [1, 2, 3, 4] 라는 리스트의 각 요솟값에 3이 곱해진 리스트 [3, 6, 9, 12]를 만들어 보자.\n","\n","입력에 항상 3을 곱하여 돌려 주는 lambda 함수를 다음과 같이 만들고 map과 조합하여 실행한다."]},{"cell_type":"code","metadata":{"id":"9zGSZ-BWfrEM"},"source":[">>> list(map(lambda x:x*3, [1,2,3,4]))\n","[3, 6, 9, 12]"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"69cB4vVGfsmF"},"source":["**Q7.**\n","\n","다음 리스트의 최댓값과 최솟값의 합을 구해 보자.\n","\n","리스트의 최댓값은 max, 최솟값은 min 내장 함수를 사용하여 다음과 같이 구한다."]},{"cell_type":"code","metadata":{"id":"-In5vmvFfwPI"},"source":[">>> a = [-8, 2, 7, 5, -3, 5, 0, 1]\n",">>> max(a) + min(a)\n","-1"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"7EygJwBofxna"},"source":["**Q8.**\n","\n","5.666666666666667을 소수점 4자리까지만 반올림하여 표시해 보자.\n","\n","round 내장 함수를 사용하면 다음과 같이 반올림하여 소수점 4자리까지 표시할 수 있다."]},{"cell_type":"code","metadata":{"id":"TLvLjoU2fzeB"},"source":[">>> round(17/3, 4)\n","5.6667"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"E2IAl3akf036"},"source":["**Q9.**\n","\n","다음과 같이 실행할 때 입력값을 모두 더하여 출력하는 스크립트(C:\\doit\\myargv.py)를 작성해 보자.\n","\n","다음처럼 sys모듈의 argv를 사용하여 명령 행 입력값 모두를 차례로 더해 준다."]},{"cell_type":"code","metadata":{"id":"IxUqN8Umf2_E"},"source":["import sys\n","\n","numbers = sys.argv[1:] # 파일 이름을 제외한 명령 행의 모든 입력\n","\n","result = 0\n","for number in numbers:\n","    result += int(number)\n","print(result)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"bCb8bLvIf4dd"},"source":["**Q10.**\n","\n","os 모듈을 사용하여 다음과 같이 동작하도록 코드를 작성해 보자.\n","\n","다음처럼 os 모듈의 chdir을 사용하여 C:\\doit 이라는 디렉터리로 이동한다."]},{"cell_type":"code","metadata":{"id":"S_JEURgyf6nc"},"source":[">>> import os\n",">>> os.chdir(\"c:/doit\")"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"nTcVv2MAf75Z"},"source":["그리고 다음처럼 os 모듈의 popen을 사용하여 시스템 명령어인 dir을 수행한다."]},{"cell_type":"code","metadata":{"id":"qds26N2bf9G4"},"source":[">>> result = os.popen(\"dir\")"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Em9tn5iJf-va"},"source":["popen의 결과를 출력하기 위해 다음과 같이 수행한다."]},{"cell_type":"code","metadata":{"id":"VFEeM8OlgAF4"},"source":[">>> print(result.read())\n","...\n","abc.txt\n","bidusource.html\n","..."],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Exy1TO2CgBm3"},"source":["**Q11.**\n","\n","glob 모듈을 사용하여 C:\\doit 디렉터리의 파일 중 확장자가 .py인 파일만 출력하는 프로그램을 작성해 보자.\n","\n","다음과 같이 glob 모듈을 사용한다."]},{"cell_type":"code","metadata":{"id":"O7DflJSkgEMC"},"source":[">>> import glob\n",">>> glob.glob(\"c:/doit/*.py\")\n","['c:/doit/doit01.py', 'c:/doit/test.py']"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"C2vkgunOgFiX"},"source":["**Q12.**\n","\n","time 모듈을 사용하여 현재 날짜와 시간을 다음과 같은 형식으로 출력해 보자.\n","\n","time 모듈의 strftime을 사용하여 다음과 같이 작성한다."]},{"cell_type":"code","metadata":{"id":"LubquSAagHme"},"source":[">>> import time\n",">>> time.strftime(\"%Y/%m/%d %H:%M:%S\")   # %Y:년, %m:월, %d:일, %H:시, %M:분, %S:초\n","'2018/04/05 10:56:27'"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"WaqrM12mgJF8"},"source":["**Q13.**\n","\n","random 모듈을 사용하여 로또 번호(1~45 사이의 숫자 6개)를 생성해 보자.\n","\n","random 모듈의 randint를 사용하여 다음과 같이 작성한다."]},{"cell_type":"code","metadata":{"id":"hKkIvv_cgLCH"},"source":["import random\n","\n","result = []\n","while len(result) < 6:\n","    num = random.randint(1, 45)   # 1부터 45까지의 난수 발생\n","    if num not in result:\n","        result.append(num)\n","\n","print(result)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"od5NqpemgM6X"},"source":["###08장 종합문제"]},{"cell_type":"markdown","metadata":{"id":"m2Sqj9NwgdEy"},"source":["**Q1.**\n","\n","문자열 바꾸기"]},{"cell_type":"code","metadata":{"id":"8xOrKOCAgfZ5"},"source":[">>> a = \"a:b:c:d\"\n",">>> b = a.split(\":\")\n",">>> b\n","['a', 'b', 'c', 'd']\n",">>> c = \"#\".join(b)\n",">>> c\n","'a#b#c#d'"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"WZ2NEZOYgh74"},"source":["**Q2.**\n","\n","딕셔너리 값 추출하기\n","\n","딕셔너리의 get 함수를 사용하면 해당 key가 없을 경우에는 두 번째 매개변수로 전달된 default 값을 대신 돌려준다."]},{"cell_type":"code","metadata":{"id":"w9fA8XNpgjzH"},"source":[">>> a = {'A':90, 'B':80}\n",">>> a.get('C', 70)\n","70"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"3finex8IglTZ"},"source":["위 예에서는 'C'에 해당되는 key가 없기 때문에 디폴트 값으로 전달된 70을 돌려주었다."]},{"cell_type":"markdown","metadata":{"id":"Di0AWDZUgmxi"},"source":["**Q3**.\n","\n","리스트의 더하기와 extend 함수\n","\n","리스트 a에 + 기호를 사용하는 경우에 대해서 먼저 살펴보자."]},{"cell_type":"code","metadata":{"id":"wf-p9_f-gooK"},"source":[">>> a = [1, 2, 3]\n",">>> id(a)\n","4302429640"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"KQ6pVIFUgqEc"},"source":["id 함수는 입력으로 받은 리스트 a의 주소 값을 돌려 준다. 현재 a라는 리스트는 4302429640이라는 주소에 저장되어 있다."]},{"cell_type":"code","metadata":{"id":"XFYsHEL7grbe"},"source":[">>> a = a + [4,5]\n",">>> a\n","[1, 2, 3, 4, 5]"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"u7z7slP2gsyk"},"source":["리스트 a에 + 기호를 사용하여 [4, 5]라는 리스트를 더해 보았다. 그리고 다시 다음과 같이 리스트 a의 주소 값을 확인해 보자."]},{"cell_type":"code","metadata":{"id":"3HhHab04guJR"},"source":[">>> id(a)\n","4302472072"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ywyOdwAMgvW7"},"source":["이전에 리스트 a가 저장되어 있던 주소와 다른 값을 돌려주는 것을 확인할 수 있다. 주소 값이 다르기 때문에 +를 사용하면 리스트 a의 값이 변하는 것이 아니라 두 리스트가 더해진 새로운 리스트가 반환된다는 것을 확인할 수 있다.\n","\n","이번에는 extend 함수를 사용해 보자."]},{"cell_type":"code","metadata":{"id":"xcvfhJmZgw-w"},"source":[">>> a = [1, 2, 3]\n",">>> id(a)\n","4302429640"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"JhxamKO1gyON"},"source":["리스트 a를 생성하고 그 주소 값을 출력해 보았다."]},{"cell_type":"code","metadata":{"id":"92llmZMpgzqP"},"source":[">>> a.extend([4, 5])\n",">>> a\n","[1, 2, 3, 4, 5]"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"KfUFxrVBg1Et"},"source":["그리고 리스트 a에 extend를 사용하여 [4, 5]라는 리스트를 더해 주었다. 그리고 다시 다음과 같이 리스트 a의 주소 값을 확인해 보도록 하자."]},{"cell_type":"code","metadata":{"id":"crbOG0Rwg2XT"},"source":[">>> id(a)\n","4302429640"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"U66kWnHOg3uc"},"source":["+ 기호를 사용하여 더한 경우와는 달리 주소 값이 변하지 않고 그대로 유지되는 것을 확인할 수 있다."]},{"cell_type":"markdown","metadata":{"id":"98SHsCLVg49E"},"source":["**Q4.**\n","\n","리스트 총합 구하기"]},{"cell_type":"code","metadata":{"id":"m1HlMpWOg7Gh"},"source":["A = [20, 55, 67, 82, 45, 33, 90, 87, 100, 25]\n","\n","result = 0\n","while A:                # A 리스트에 값이 있는 동안\n","    mark = A.pop()      # A리스트의 가장 마지막 항목을 하나씩 뽑아냄\n","    if mark >= 50:      # 50점 이상의 점수만 더함\n","        result += mark\n","\n","print(result)           # 481 출력"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"HLVxzoiCg83w"},"source":["**Q5.**\n","\n","피보나치 함수\n","\n","피보나치 수열은 다음과 같은 순서로 결괏값을 반환한다.\n","\n","1. fib(0) → 0 반환\n","2. fib(1) → 1 반환\n","3. fib(2) → fib(0) + fib(1) → 0 + 1 → 1 반환\n","4. fib(3) → fib(1) + fib(2) → 1 + 1 → 2 반환\n","5. fib(4) → fib(2) + fib(3) → 1 + 2 → 3 반환\n","6. ...\n","\n","n이 0일 때는 0을 반환, 1일 때는 1을 반환한다. n이 2 이상일 경우에는 이전의 두 값을 더하여 반환한다.\n","\n","재귀 호출을 사용하면 피보나치 함수를 다음과 같이 간단하게 작성할 수 있다."]},{"cell_type":"code","metadata":{"id":"sR0uXw_ihBL9"},"source":["def fib(n):\n","    if n == 0 : return 0          # n이 0일 때는 0을 반환\n","    if n == 1 : return 1          # n이 1일 때는 1을 반환\n","    return fib(n-2) + fib(n-1)    # n이 2 이상일 때는 그 이전의 두 값을 더하여 반환\n","\n","for i in range(10):\n","    print(fib(i))"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"rfadjAGWhKAH"},"source":["0부터 9까지의 피보나치 수열의 결괏값을 출력하여 그 값을 확인해 보았다."]},{"cell_type":"markdown","metadata":{"id":"C6gPH85bhLo1"},"source":["**Q6.**\n","\n","숫자의 총합 구하기"]},{"cell_type":"code","metadata":{"id":"nnn8aN_HhNo3"},"source":["user_input = input(\"숫자를 입력하세요: \")\n","numbers = user_input.split(\",\")\n","total = 0\n","for n in numbers:\n","    total += int(n)    # 입력은 문자열이므로 숫자로 변환해야 한다.\n","print(total)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"DyAPEnazhPCh"},"source":["수행결과"]},{"cell_type":"code","metadata":{"id":"AIFztzIBhQMy"},"source":["숫자를 입력하세요: 65,45,2,3,45,8\n","168"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Md4TM-jPhRmX"},"source":["**Q7.**\n","\n","한 줄 구구단"]},{"cell_type":"code","metadata":{"id":"JC3TWNplhToh"},"source":["user_input = input(\"구구단을 출력할 숫자를 입력하세요(2~9):\")\n","dan = int(user_input)       # 입력 문자열을 숫자로 변환\n","for i in range(1, 10):\n","    print(i*dan, end= ' ')  # 한 줄로 출력하기 위해 줄 바꿈 문자 대신 공백 문자를 마지막에 출력한다."],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"F8rHbEsThVJk"},"source":["**Q8.**\n","\n","역순 저장\n","\n","파일 객체의 readlines를 사용하여 모든 라인을 읽은 후에 reversed를 사용하여 역순으로 정렬한 다음 다시 파일에 저장한다."]},{"cell_type":"code","metadata":{"id":"JjwxvnmdhXks"},"source":["f = open('abc.txt', 'r')\n","lines = f.readlines()    # 모든 라인을 읽음\n","f.close()\n","\n","lines.reverse()          # 읽은 라인을 역순으로 정렬\n","\n","f = open('abc.txt', 'w')\n","for line in lines:\n","    line = line.strip()  # 포함되어 있는 줄 바꿈 문자 제거\n","    f.write(line)\n","    f.write('\\n')        # 줄 바꿈 문자 삽입\n","f.close()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"XLHOtQybhY_c"},"source":["**Q9.**\n","\n","평균 값 구하기"]},{"cell_type":"code","metadata":{"id":"QlDo5r6jhc3d"},"source":["f = open(\"sample.txt\")\n","lines = f.readlines( )  # sample.txt를 줄 단위로 모두 읽는다.\n","f.close( )\n","\n","total = 0\n","for line in lines:\n","    score = int(line)  # 줄에 적힌 점수를 숫자형으로 변환한다.\n","    total += score\n","average = total / len(lines)\n","\n","f = open(\"result.txt\", \"w\")\n","f.write(str(average))\n","f.close()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"KCDg3dXhhefY"},"source":["sample.txt의 점수를 모두 읽기 위해 파일을 열고 readlines를 사용하여 각 줄의 점수 값을 모두 읽어 들여 총 점수를 구한다. 총 점수를 sample.txt 파일의 라인(Line) 수로 나누어 평균 값을 구한 후 그 결과를 result.txt 파일에 쓴다. 숫자 값은 result.txt 파일에 바로 쓸 수 없으므로 str 함수를 사용하여 문자열로 변경한 후 파일에 쓴다."]},{"cell_type":"markdown","metadata":{"id":"YP1NeKk9hf40"},"source":["**Q10.**\n","\n","사칙연산 계산기"]},{"cell_type":"code","metadata":{"id":"uG5KOPJahh7M"},"source":["class Calculator:\n","    def __init__(self, numberList): \n","        self.numberList = numberList\n","\n","    def add(self): result = 0\n","        for num in self.numberList: \n","            result += num\n","        return result\n","\n","    def avg(self):\n","        total = self.add()\n","        return total / len(self.numberList)\n","\n","cal1 = Calculator([1,2,3,4,5]) \n","print (cal1.add())\n","print (cal1.avg())\n","\n","cal2 = Calculator([6,7,8,9,10]) \n","print (cal2.add())\n","print (cal2.avg())"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"aiVZarafhjnt"},"source":["**Q11.**\n","\n","모듈 사용 방법\n","\n","파이썬 셸에서 mymod.py 모듈을 인식하기 위해서는 다음과 같은 3가지 방법이 있을 수 있다.\n","\n","1) sys 모듈 사용하기\n","\n","다음과 같이 sys.path 에 C:\\doit 이라는 디렉터리를 추가하면 C:\\doit 이라는 디렉터리에 있는 mymod 모듈을 사용할 수 있게 된다."]},{"cell_type":"code","metadata":{"id":"DEqkJXh7hlrY"},"source":[">>> import sys\n",">>> sys.path.append(\"c:/doit\")\n",">>> import mymod"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"U8Qw8-nMhnmM"},"source":["2) PYTHONPATH 환경 변수 사용하기\n","\n","다음처럼 PYTHONPATH 환경 변수에 C:\\doit 디렉터리를 지정하면 C:\\doit 디렉터리에 있는 mymod 모듈을 사용할 수 있게 된다."]},{"cell_type":"code","metadata":{"id":"McFl_JIQhpSG"},"source":["C:\\Users\\home>set PYTHONPATH=c:\\doit\n","C:\\Users\\home>python\n",">>> import mymod"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ixLkxdVThqwz"},"source":["3) 현재 디렉터리 사용하기\n","\n","파이썬 셸을 mymod.py가 있는 위치로 이동하여 실행해도 mymod 모듈을 사용할 수 있게 된다. 왜냐하면 sys.path 에는 현재 디렉터리인 . 이 항상 포함되어 있기 때문이다."]},{"cell_type":"code","metadata":{"id":"nlipUfI-hsG6"},"source":["C:\\Users\\home>cd c:\\doit\n","C:\\doit>python\n",">>> import mymod"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"t1e6RTtShtuG"},"source":["**Q12.**\n","\n","오류와 예외 처리\n","\n","7이 출력된다.\n","\n","1. result의 초깃값은 0이다.\n","2. try문 안의 [1, 2, 3][3] 이라는 문장 수행 시 IndexError가 발생하여 except 3. 3. IndexError: 구문으로 이동하게 되어 result에 3이 더해져 3이 된다.\n","4. 최종적으로 finally 구문이 실행되어 result에 4가 더해져 7이 된다.\n","5. print(result)가 수행되어 result의 최종 값인 7이 출력된다."]},{"cell_type":"markdown","metadata":{"id":"3AcFhqzkh0wR"},"source":["**Q13.**\n","\n","DashInsert 함수\n","\n","다음 프로그램의 주석문을 참고하자."]},{"cell_type":"code","metadata":{"id":"hfYdpW9fh24a"},"source":["data = \"4546793\"\n","numbers = list(map(int, data))   # 숫자 문자열을 숫자 리스트로 변경\n","result = []\n","\n","for i, num in enumerate(numbers):\n","    result.append(str(num))\n","    if i < len(numbers)-1:                   # 다음 수가 있다면\n","        is_odd = num % 2 == 1                # 현재 수가 홀수\n","        is_next_odd = numbers[i+1] % 2 == 1  # 다음 수가 홀수\n","        if is_odd and is_next_odd:           # 연속 홀수\n","            result.append(\"-\")\n","        elif not is_odd and not is_next_odd: # 연속 짝수\n","            result.append(\"*\")\n","\n","print(\"\".join(result))"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"LOE60HFNh4f6"},"source":["**Q14.**\n","\n","문자열 압축하기\n","\n","먼저 입력 문자열의 문자를 확인하여 동일한 문자가 들어올 경우에는 해당 문자의 숫자 값을 증가시킨다. 만약 다른 문자가 들어올 경우에는 해당 문자의 숫자 값을 1로 초기화하는 방법을 사용하여 작성한 코드이다."]},{"cell_type":"code","metadata":{"id":"Z69cA1l-h7NO"},"source":["def compress_string(s):\n","    _c = \"\"\n","    cnt = 0\n","    result = \"\"\n","    for c in s:\n","        if c!=_c:\n","            _c = c\n","            if cnt: result += str(cnt)\n","            result += c\n","            cnt = 1\n","        else:\n","            cnt +=1\n","    if cnt: result += str(cnt)\n","    return result\n","\n","print (compress_string(\"aaabbcccccca\"))  # a3b2c6a1 출력"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"A4olzr8vh8v9"},"source":["**Q15.**\n","\n","Duplicate Numbers"]},{"cell_type":"code","metadata":{"id":"fIqKInM3h_IB"},"source":["def chkDupNum(s):\n","    result = []\n","    for num in s:\n","        if num not in result:\n","            result.append(num)\n","        else:\n","            return False\n","    return len(result) == 10\n","\n","print(chkDupNum(\"0123456789\"))      # True 리턴\n","print(chkDupNum(\"01234\"))           # False 리턴\n","print(chkDupNum(\"01234567890\"))     # False 리턴\n","print(chkDupNum(\"6789012345\"))      # True 리턴\n","print(chkDupNum(\"012322456789\"))    # False 리턴"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"mDY-HwxCiA-3"},"source":["리스트 자료형을 사용하여 중복된 값이 있는지 먼저 조사한다. 중복된 값이 있을 경우는 False를 리턴한다. 최종적으로 중복된 값이 없을 경우 0~9까지의 숫자가 모두 사용되었는지 판단하기 위해 입력 문자열의 숫자 값을 저장한 리스트 자료형의 총 개수가 10인지를 조사하여 10일 경우는 True, 아닐 경우는 False를 리턴한다."]},{"cell_type":"markdown","metadata":{"id":"kbyE-6J1iCrq"},"source":["**Q16.**\n","\n","모스 부호 해독"]},{"cell_type":"code","metadata":{"id":"95Fgq1R_iE9A"},"source":["dic = {\n","    '.-':'A','-...':'B','-.-.':'C','-..':'D','.':'E','..-.':'F',\n","    '--.':'G','....':'H','..':'I','.---':'J','-.-':'K','.-..':'L',\n","    '--':'M','-.':'N','---':'O','.--.':'P','--.-':'Q','.-.':'R',\n","    '...':'S','-':'T','..-':'U','...-':'V','.--':'W','-..-':'X',\n","    '-.--':'Y','--..':'Z'\n","}\n","\n","def morse(src):\n","    result = []\n","    for word in src.split(\"  \"):\n","        for char in word.split(\" \"):\n","            result.append(dic[char])\n","        result.append(\" \")\n","    return \"\".join(result)\n","\n","\n","print(morse('.... .  ... .-.. . . .--. ...  . .- .-. .-.. -.--'))"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"k-_qyBq4iG9L"},"source":["모스 부호 규칙 표를 딕셔너리로 작성한 후 입력에 해당되는 모스 부호 문자열을 먼저 단어(공백 문자 2개)로 구분한다. 그 후 단어(공백 문자 1개)를 문자로 구분하여 해당 모스 부호 값을 딕셔너리에서 찾아서 그 결괏값을 구한다."]},{"cell_type":"markdown","metadata":{"id":"6y1lkQPviIdM"},"source":["**Q17.**\n","\n","기초 메타 문자\n","\n","보기 중 이 조건에 해당되는 것은 B이다.\n","\n","다음은 위 문제의 정규식 매치 결과를 확인해 보는 파이썬 코드이다."]},{"cell_type":"code","metadata":{"id":"99MR88TEiKlI"},"source":["import re\n","\n","p = re.compile(\"a[.]{3,}b\")\n","\n","print (p.match(\"acccb\"))    # None\n","print (p.match(\"a....b\"))   # 매치 객체 출력\n","print (p.match(\"aaab\"))     # None\n","print (p.match(\"a.cccb\"))   # None"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"fMfH5mtDiL-Z"},"source":["**Q18.**\n","\n","문자열 검색\n","\n","정규식 [a-z]+은 소문자로 이루어진 단어를 뜻하므로 5 python 문자열에서 python과 매치될 것이다. 따라서 python 문자열의 시작 인덱스(m.start())는 2이고 마지막 인덱스(m.end())는 8이므로 10이 출력된다."]},{"cell_type":"code","metadata":{"id":"_PIKQZn9iOET"},"source":["import re\n","\n","p = re.compile('[a-z]+')\n","m = p.search(\"5 python\")\n","print(m.start() + m.end())  # 10 출력"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"76MoTOG1iPlK"},"source":["**Q19.**\n","\n","그루핑\n","\n","전화번호 패턴은 다음과 같이 작성할 수 있다."]},{"cell_type":"code","metadata":{"id":"-iP_kybYiRgQ"},"source":["pat = re.compile(\"\\d{3}[-]\\d{4}[-]\\d{4}\")"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"1OvHVqOaiTKt"},"source":["이 전화번호 패턴 중 뒤의 숫자 4개를 변경할 것이므로 필요한 앞부분을 다음과 같이 그루핑한다."]},{"cell_type":"code","metadata":{"id":"DuIH_F0YiUoR"},"source":["pat = re.compile(\"(\\d{3}[-]\\d{4})[-]\\d{4}\")"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Lj8mg_4viV71"},"source":["컴파일된 객체 pat에 sub 함수를 사용하여 다음과 같이 문자열을 변경한다."]},{"cell_type":"code","metadata":{"id":"Svzp3pAdiXdV"},"source":["import re\n","\n","s = \"\"\"\n","park 010-9999-9988\n","kim 010-9909-7789\n","lee 010-8789-7768\n","\"\"\"\n","\n","pat = re.compile(\"(\\d{3}[-]\\d{4})[-]\\d{4}\")\n","result = pat.sub(\"\\g<1>-####\", s)\n","\n","print(result)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"belvN3xhiY5n"},"source":["**Q20.**\n","\n","전방 탐색\n","\n",".com과 .net에 해당되는 이메일 주소만을 매치하기 위해서 이메일 주소의 도메인 부분에 다음과 같은 긍정형 전방탐색 패턴을 적용한다."]},{"cell_type":"code","metadata":{"id":"nzNDXvE9ia8x"},"source":["pat = re.compile(\".*[@].*[.](?=com$|net$).*$\")"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"_k_JwiF7ic0h"},"source":["다음은 위 패턴을 적용한 파이썬 코드이다."]},{"cell_type":"code","metadata":{"id":"JgnUNqD0ieMQ"},"source":["import re\n","\n","pat = re.compile(\".*[@].*[.](?=com$|net$).*$\")\n","\n","print(pat.match(\"pahkey@gmail.com\"))\n","print(pat.match(\"kim@daum.net\"))\n","print(pat.match(\"lee@myhome.co.kr\"))\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"n2S_pQMmikOv"},"source":["##10장 마치며\n","\n","\"점프 투 파이썬\" 졸업을 축하한다."]},{"cell_type":"markdown","metadata":{"id":"SxQFYGiLippz"},"source":["함께 만드는 점프 투 파이썬\n","\"점프 투 파이썬\"은 피드백으로 성장해 나가는 온라인 위키책이다.\n","\n","이 책을 읽고 도움을 받았다면 나중에 이 책을 읽게 될 후배 프로그래머에게 도움을 주기를 바란다. 이 책을 다 읽은 여러분이 도와줄 수 있는 가장 좋은 방법은 댓글 또는 피드백이다.\n","\n","※ 댓글이나 피드백 링크는 페이지 하단에 있다."]},{"cell_type":"markdown","metadata":{"id":"5dbRZGjYisgz"},"source":["**도전과제**\n","\n","이제 여러분은 파이썬으로 무엇이든 만들 수 있는 준비가 되었다.\n","\n","요새 인기있는 딥러닝 분야나 웹 프로그래밍에 도전하는 것도 좋을 것이다. 만약 웹 프로그래밍에 관심이 있다면 필자가 저술한 \"점프 투 장고\"와 \"점프 투 플라스크\"를 추천한다.\n","\n","점프 투 장고\n","점프 투 플라스크\n","그리고 외국서적이지만 \"Python Essential Reference\"와 \"Python Cook Book\" 의 저자인 David Beazley의 공개 파이썬 강좌인 \"Practical Python\"을 추천한다.\n","\n","Practical Python"]},{"cell_type":"markdown","metadata":{"id":"VkjddaEqiv48"},"source":["**파이썬 질문과 답변**\n","\n","파이썬에 대한 질문은 언제든지 환영한다. 필자가 운영하는 파이보에 파이썬 질문을 작성하면 빠른 답변을 얻을 수 있을 것이다.\n","\n","파이썬 질문과 답변 서비스 \"파이보\" - https://pybo.kr"]},{"cell_type":"code","metadata":{"id":"uWnP8tdsO0qP","executionInfo":{"status":"ok","timestamp":1601875752793,"user_tz":-540,"elapsed":884,"user":{"displayName":"김솔찬","photoUrl":"","userId":"16218816003344536399"}},"outputId":"c140fcb1-33a7-42cf-eed6-3ece08ecbe81","colab":{"base_uri":"https://localhost:8080/","height":35}},"source":[">>> a=\"life is too short\"\n",">>> len(a)\n","\n"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["17"]},"metadata":{"tags":[]},"execution_count":4}]}]}